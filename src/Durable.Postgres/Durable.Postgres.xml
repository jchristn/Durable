<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Durable.Postgres</name>
    </assembly>
    <members>
        <member name="T:Durable.Postgres.PostgresCaseExpressionBuilder`1">
            <summary>
            Provides a fluent interface for building SQL CASE expressions in PostgreSQL queries.
            Allows conditional logic within SQL SELECT statements using WHEN/THEN/ELSE syntax.
            </summary>
            <typeparam name="TEntity">The entity type that the CASE expression operates on.</typeparam>
        </member>
        <member name="M:Durable.Postgres.PostgresCaseExpressionBuilder`1.#ctor(Durable.Postgres.PostgresQueryBuilder{`0},Durable.Postgres.PostgresRepository{`0})">
            <summary>
            Initializes a new instance of the PostgresCaseExpressionBuilder with the specified query builder and repository.
            </summary>
            <param name="queryBuilder">The PostgreSQL query builder instance to add the CASE expression to</param>
            <param name="repository">The PostgreSQL repository instance used for building WHERE clause conditions</param>
            <exception cref="T:System.ArgumentNullException">Thrown when queryBuilder or repository is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresCaseExpressionBuilder`1.When(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)">
            <summary>
            Adds a WHEN clause to the CASE expression with a condition expressed as a LINQ expression.
            </summary>
            <param name="condition">A lambda expression defining the condition to evaluate (e.g., x => x.Age > 18)</param>
            <param name="result">The value to return when the condition is true. Can be string, number, boolean, or null</param>
            <returns>The current builder instance for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when condition is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresCaseExpressionBuilder`1.WhenRaw(System.String,System.Object)">
            <summary>
            Adds a WHEN clause to the CASE expression with a raw SQL condition string.
            </summary>
            <param name="condition">The raw SQL condition string to evaluate (e.g., "column_name > 18")</param>
            <param name="result">The value to return when the condition is true. Can be string, number, boolean, or null</param>
            <returns>The current builder instance for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when condition is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when condition is empty or whitespace</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresCaseExpressionBuilder`1.Else(System.Object)">
            <summary>
            Sets the ELSE clause for the CASE expression, defining the default value when no WHEN conditions are met.
            </summary>
            <param name="result">The default value to return when no WHEN conditions are true. Can be string, number, boolean, or null</param>
            <returns>The current builder instance for method chaining</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresCaseExpressionBuilder`1.EndCase(System.String)">
            <summary>
            Completes the CASE expression construction and adds it to the SELECT clause with the specified alias.
            </summary>
            <param name="alias">The column alias to use for the CASE expression result in the SELECT clause</param>
            <returns>The query builder instance to continue building the query</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when alias is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when alias is empty or whitespace</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresCaseExpressionBuilder`1.BuildWhereClause(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Builds a WHERE clause from a LINQ expression for use in CASE WHEN conditions.
            Uses the full PostgresExpressionParser to support complex expressions, method calls,
            navigation properties, and all standard LINQ query patterns.
            </summary>
            <param name="expression">The LINQ expression to convert to SQL</param>
            <returns>A SQL WHERE clause string</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresCaseExpressionBuilder`1.FormatResult(System.Object)">
            <summary>
            Formats a result value for use in SQL with PostgreSQL-specific formatting.
            </summary>
            <param name="result">The result value to format</param>
            <returns>A SQL-formatted value string</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresCaseExpressionBuilder`1.BuildPostgresCaseExpression">
            <summary>
            Builds the PostgreSQL-specific CASE expression SQL.
            </summary>
            <returns>A complete CASE expression SQL string</returns>
        </member>
        <member name="T:Durable.Postgres.PostgresCollectionLoader`1">
            <summary>
            Handles loading of collection navigation properties for PostgreSQL entities.
            Supports both one-to-many and many-to-many relationships with efficient batch loading.
            </summary>
            <typeparam name="T">The entity type that contains collection navigation properties</typeparam>
        </member>
        <member name="M:Durable.Postgres.PostgresCollectionLoader`1.#ctor(Durable.ISanitizer,Durable.IDataTypeConverter)">
            <summary>
            Initializes a new instance of the PostgresCollectionLoader class.
            </summary>
            <param name="sanitizer">The sanitizer for SQL identifiers</param>
            <param name="dataTypeConverter">The data type converter for database values</param>
            <exception cref="T:System.ArgumentNullException">Thrown when sanitizer or dataTypeConverter is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresCollectionLoader`1.LoadCollections(System.Collections.Generic.List{`0},System.Collections.Generic.List{Durable.Postgres.PostgresIncludeInfo},Npgsql.NpgsqlConnection,Durable.ITransaction)">
            <summary>
            Loads collection navigation properties for a list of entities.
            </summary>
            <param name="entities">The entities to load collections for</param>
            <param name="includes">The include information for navigation properties</param>
            <param name="connection">The PostgreSQL connection to use</param>
            <param name="transaction">Optional transaction to execute within</param>
            <exception cref="T:System.ArgumentNullException">Thrown when required parameters are null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresCollectionLoader`1.LoadCollectionsForRelatedEntities(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{Durable.Postgres.PostgresIncludeInfo},Npgsql.NpgsqlConnection,Durable.ITransaction)">
            <summary>
            Loads collections for related entities in nested navigation scenarios.
            </summary>
            <param name="entities">The related entities to load collections for</param>
            <param name="includes">The include information for navigation properties</param>
            <param name="connection">The PostgreSQL connection to use</param>
            <param name="transaction">Optional transaction to execute within</param>
        </member>
        <member name="M:Durable.Postgres.PostgresCollectionLoader`1.LoadCollection(System.Collections.Generic.List{`0},Durable.Postgres.PostgresIncludeInfo,Npgsql.NpgsqlConnection,Durable.ITransaction)">
            <summary>
            Loads a collection navigation property for the specified entities.
            </summary>
            <param name="entities">The entities to load the collection for</param>
            <param name="include">The include information for the collection</param>
            <param name="connection">The PostgreSQL connection to use</param>
            <param name="transaction">Optional transaction to execute within</param>
        </member>
        <member name="M:Durable.Postgres.PostgresCollectionLoader`1.LoadOneToManyCollection(System.Collections.Generic.List{`0},Durable.Postgres.PostgresIncludeInfo,Npgsql.NpgsqlConnection,Durable.ITransaction)">
            <summary>
            Loads a one-to-many collection navigation property.
            </summary>
            <param name="entities">The entities to load the collection for</param>
            <param name="include">The include information for the collection</param>
            <param name="connection">The PostgreSQL connection to use</param>
            <param name="transaction">Optional transaction to execute within</param>
        </member>
        <member name="M:Durable.Postgres.PostgresCollectionLoader`1.LoadManyToManyCollection(System.Collections.Generic.List{`0},Durable.Postgres.PostgresIncludeInfo,Npgsql.NpgsqlConnection,Durable.ITransaction)">
            <summary>
            Loads a many-to-many collection navigation property.
            </summary>
            <param name="entities">The entities to load the collection for</param>
            <param name="include">The include information for the collection</param>
            <param name="connection">The PostgreSQL connection to use</param>
            <param name="transaction">Optional transaction to execute within</param>
        </member>
        <member name="M:Durable.Postgres.PostgresCollectionLoader`1.LoadCollectionForRelatedEntities(System.Collections.Generic.List{System.Object},Durable.Postgres.PostgresIncludeInfo,Npgsql.NpgsqlConnection,Durable.ITransaction)">
            <summary>
            Loads collections for entities that are already loaded as navigation properties.
            </summary>
            <param name="entities">The related entities to load collections for</param>
            <param name="include">The include information for the collection</param>
            <param name="connection">The PostgreSQL connection to use</param>
            <param name="transaction">Optional transaction to execute within</param>
        </member>
        <member name="T:Durable.Postgres.PostgresConnectionFactory">
            <summary>
            Provides a factory for creating and managing PostgreSQL database connections with connection pooling support.
            Implements connection pooling to improve performance and resource management for PostgreSQL databases.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresConnectionFactory.#ctor(System.String,Durable.ConnectionPoolOptions)">
            <summary>
            Initializes a new instance of the PostgresConnectionFactory with the specified connection string and pooling options.
            </summary>
            <param name="connectionString">The PostgreSQL connection string used to create database connections.</param>
            <param name="options">Optional connection pool configuration settings. Uses default settings if null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when connectionString is null.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresConnectionFactory.GetConnection">
            <summary>
            Retrieves a database connection from the connection pool synchronously.
            </summary>
            <returns>A ready-to-use PostgreSQL database connection from the pool.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the factory has been disposed.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresConnectionFactory.GetConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves a database connection from the connection pool asynchronously.
            </summary>
            <param name="cancellationToken">A cancellation token to cancel the operation if needed.</param>
            <returns>A task representing the asynchronous operation that returns a ready-to-use PostgreSQL database connection from the pool.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the factory has been disposed.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresConnectionFactory.ReturnConnection(System.Data.Common.DbConnection)">
            <summary>
            Returns a database connection to the connection pool for reuse.
            </summary>
            <param name="connection">The database connection to return to the pool. Null connections are safely ignored.</param>
        </member>
        <member name="M:Durable.Postgres.PostgresConnectionFactory.ReturnConnectionAsync(System.Data.Common.DbConnection)">
            <summary>
            Asynchronously returns a database connection to the connection pool for reuse.
            </summary>
            <param name="connection">The database connection to return to the pool. Null connections are safely ignored.</param>
            <returns>A task representing the asynchronous return operation.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresConnectionFactory.Dispose">
            <summary>
            Releases all resources used by the PostgresConnectionFactory.
            Closes all pooled connections and disposes of the connection pool.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresConnectionFactory.ThrowIfDisposed">
            <summary>
            Throws an ObjectDisposedException if this factory instance has been disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown when the factory has been disposed.</exception>
        </member>
        <member name="T:Durable.Postgres.PostgresConnectionFactoryExtensions">
            <summary>
            Extension methods for PostgreSQL connection factory to provide convenient setup options.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresConnectionFactoryExtensions.CreatePostgresFactory(System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a PostgreSQL connection factory with common connection string parameters.
            </summary>
            <param name="host">The PostgreSQL server hostname or IP address</param>
            <param name="database">The database name</param>
            <param name="username">The username for authentication</param>
            <param name="password">The password for authentication</param>
            <param name="port">The port number (default is 5432)</param>
            <param name="pooling">Whether to enable connection pooling (default is true)</param>
            <param name="minPoolSize">Minimum pool size (default is 0)</param>
            <param name="maxPoolSize">Maximum pool size (default is 100)</param>
            <param name="connectionTimeout">Connection timeout in seconds (default is 30)</param>
            <param name="commandTimeout">Command timeout in seconds (default is 30)</param>
            <param name="sslMode">SSL mode for secure connections (default is Prefer)</param>
            <returns>A configured PostgreSQL connection factory</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresConnectionFactoryExtensions.CreateLocalPostgresFactory(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a PostgreSQL connection factory for local development with default settings.
            </summary>
            <param name="database">The database name</param>
            <param name="username">The username (default is "postgres")</param>
            <param name="password">The password (default is empty)</param>
            <param name="host">The host (default is "localhost")</param>
            <param name="port">The port (default is 5432)</param>
            <returns>A configured PostgreSQL connection factory for local development</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresConnectionFactoryExtensions.CreateProductionPostgresFactory(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a PostgreSQL connection factory configured for production use with recommended settings.
            </summary>
            <param name="host">The PostgreSQL server hostname</param>
            <param name="database">The database name</param>
            <param name="username">The username for authentication</param>
            <param name="password">The password for authentication</param>
            <param name="port">The port number (default is 5432)</param>
            <returns>A configured PostgreSQL connection factory optimized for production</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresConnectionFactoryExtensions.CreateUnixSocketPostgresFactory(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a PostgreSQL connection factory with Unix domain socket connection for local development.
            </summary>
            <param name="database">The database name</param>
            <param name="username">The username (default is "postgres")</param>
            <param name="password">The password (default is empty)</param>
            <param name="socketDirectory">The Unix socket directory (default is "/tmp")</param>
            <returns>A configured PostgreSQL connection factory using Unix domain socket</returns>
        </member>
        <member name="T:Durable.Postgres.PostgresConnectionResult">
            <summary>
            Internal helper class that manages the lifecycle of PostgreSQL connections and commands.
            Ensures proper disposal of database resources.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresConnectionResult.Connection">
            <summary>
            Gets the PostgreSQL connection associated with this result.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresConnectionResult.Command">
            <summary>
            Gets the PostgreSQL command associated with this result.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresConnectionResult.ShouldDisposeConnection">
            <summary>
            Gets a value indicating whether this connection result should dispose the connection when disposed.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresConnectionResult.#ctor(Npgsql.NpgsqlConnection,Npgsql.NpgsqlCommand,System.Boolean)">
            <summary>
            Initializes a new instance of the PostgresConnectionResult.
            </summary>
            <param name="connection">The PostgreSQL connection</param>
            <param name="command">The PostgreSQL command</param>
            <param name="shouldDisposeConnection">Whether to dispose the connection when this object is disposed</param>
            <exception cref="T:System.ArgumentNullException">Thrown when connection or command is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresConnectionResult.Create(Npgsql.NpgsqlConnection,Npgsql.NpgsqlCommand)">
            <summary>
            Creates a new PostgresConnectionResult with a connection and command that should be disposed together.
            </summary>
            <param name="connection">The PostgreSQL connection</param>
            <param name="command">The PostgreSQL command</param>
            <returns>A new PostgresConnectionResult instance</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when connection or command is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresConnectionResult.CreateWithManagedConnection(Npgsql.NpgsqlConnection,Npgsql.NpgsqlCommand)">
            <summary>
            Creates a new PostgresConnectionResult where the connection should not be disposed (e.g., when using transactions).
            </summary>
            <param name="connection">The PostgreSQL connection</param>
            <param name="command">The PostgreSQL command</param>
            <returns>A new PostgresConnectionResult instance</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when connection or command is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresConnectionResult.Dispose">
            <summary>
            Disposes the command and optionally the connection based on the ShouldDisposeConnection setting.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresConnectionResult.Dispose(System.Boolean)">
            <summary>
            Performs the actual disposal of resources.
            </summary>
            <param name="disposing">True if disposing managed resources, false if called from finalizer</param>
        </member>
        <member name="M:Durable.Postgres.PostgresConnectionResult.Finalize">
            <summary>
            Finalizer to ensure resources are cleaned up if Dispose is not called.
            </summary>
        </member>
        <member name="T:Durable.Postgres.PostgresCycleDetector">
            <summary>
            Detects cycles in navigation property includes to prevent infinite loops in PostgreSQL queries.
            Ensures that Include() chains don't create circular references that would cause stack overflow.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresCycleDetector.#ctor">
            <summary>
            Initializes a new instance of the PostgresCycleDetector.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresCycleDetector.WouldCreateCycle(System.String)">
            <summary>
            Checks if adding the specified path would create a cycle.
            </summary>
            <param name="path">The navigation property path to check</param>
            <returns>True if adding this path would create a cycle, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when path is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when path is empty or whitespace</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresCycleDetector.EnterPath(System.String)">
            <summary>
            Adds a path to the current processing stack and visited paths.
            </summary>
            <param name="path">The navigation property path to add</param>
            <exception cref="T:System.ArgumentNullException">Thrown when path is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when path is empty or whitespace</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when adding this path would create a cycle</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresCycleDetector.ExitPath">
            <summary>
            Removes the most recently added path from the current processing stack.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when there are no paths to exit</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresCycleDetector.GetCurrentPath">
            <summary>
            Gets the current navigation path as a dot-separated string.
            </summary>
            <returns>The current path or empty string if no path is active</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresCycleDetector.Reset">
            <summary>
            Clears all tracked paths and resets the detector to initial state.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresCycleDetector.GetCurrentDepth">
            <summary>
            Gets the depth of the current navigation path.
            </summary>
            <returns>The number of navigation levels deep</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresCycleDetector.HasActivePaths">
            <summary>
            Checks if the detector has any active paths.
            </summary>
            <returns>True if there are active paths, false otherwise</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresCycleDetector.GetVisitedPaths">
            <summary>
            Gets a copy of all visited paths for debugging purposes.
            </summary>
            <returns>A collection of all visited navigation paths</returns>
        </member>
        <member name="T:Durable.Postgres.PostgresDataTypeConverter">
            <summary>
            PostgreSQL-specific data type converter that maintains type fidelity for PostgreSQL parameter binding.
            Unlike the generic DataTypeConverter, this preserves DateTime objects as DateTime for proper PostgreSQL parameter binding.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresDataTypeConverter.ConvertToDatabase(System.Object,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Converts a .NET object to its PostgreSQL database parameter representation.
            Preserves DateTime objects as DateTime for proper PostgreSQL parameter binding.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The target database type.</param>
            <param name="propertyInfo">Optional property information for attribute-based conversion hints.</param>
            <returns>The PostgreSQL-compatible representation of the value.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresDataTypeConverter.ConvertFromDatabase(System.Object,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Converts a PostgreSQL database value to its .NET type representation.
            </summary>
            <param name="value">The database value to convert.</param>
            <param name="targetType">The target .NET type.</param>
            <param name="propertyInfo">Optional property information for attribute-based conversion hints.</param>
            <returns>The .NET object representation of the database value.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresDataTypeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether the converter can handle the specified type.
            </summary>
            <param name="type">The type to check for conversion support.</param>
            <returns>True if the type can be converted; otherwise, false.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresDataTypeConverter.GetDatabaseTypeString(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Gets the appropriate PostgreSQL database type string for the specified .NET type.
            </summary>
            <param name="type">The .NET type.</param>
            <param name="propertyInfo">Optional property information for attribute-based type mapping hints.</param>
            <returns>The PostgreSQL type string (e.g., "TEXT", "INTEGER", "TIMESTAMP").</returns>
        </member>
        <member name="T:Durable.Postgres.PostgresEntityMapper`1">
            <summary>
            Advanced entity mapping capabilities for PostgreSQL data readers.
            Handles complex type conversions, navigation properties, and relationship mapping
            with support for Include operations and nested entity graphs.
            </summary>
            <typeparam name="T">The primary entity type being mapped</typeparam>
        </member>
        <member name="M:Durable.Postgres.PostgresEntityMapper`1.#ctor(Durable.IDataTypeConverter,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},Durable.ISanitizer)">
            <summary>
            Initializes a new instance of the PostgresEntityMapper class.
            </summary>
            <param name="dataTypeConverter">The data type converter for handling complex type conversions</param>
            <param name="baseColumnMappings">Column mappings for the primary entity type</param>
            <param name="sanitizer">The sanitizer for handling SQL values and identifiers</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any required parameter is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresEntityMapper`1.MapJoinedResults(Npgsql.NpgsqlDataReader,Durable.Postgres.PostgresJoinBuilder.PostgresJoinResult,System.Collections.Generic.List{Durable.Postgres.PostgresIncludeInfo})">
            <summary>
            Maps a PostgreSQL data reader to a list of entities, handling joined results and navigation properties.
            </summary>
            <param name="reader">The PostgreSQL data reader containing the query results</param>
            <param name="joinResult">Join metadata for mapping related entities</param>
            <param name="includes">Navigation property information for Include operations</param>
            <returns>A list of mapped entities with populated navigation properties</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when reader is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when mapping encounters errors</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresEntityMapper`1.MapSimpleResults(Npgsql.NpgsqlDataReader)">
            <summary>
            Maps a simple PostgreSQL data reader to a list of entities without joins or navigation properties.
            Provides enhanced type conversion compared to basic mapping implementations.
            </summary>
            <param name="reader">The PostgreSQL data reader containing the query results</param>
            <returns>A list of mapped entities</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when reader is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when mapping encounters errors</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresEntityMapper`1.MapSimpleResultsAsync(Npgsql.NpgsqlDataReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously maps a simple PostgreSQL data reader to a list of entities without joins or navigation properties.
            Provides enhanced type conversion compared to basic mapping implementations.
            </summary>
            <param name="reader">The PostgreSQL data reader containing the query results</param>
            <param name="cancellationToken">Cancellation token for the async operation</param>
            <returns>A list of mapped entities</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when reader is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when mapping encounters errors</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresEntityMapper`1.MapEntity(Npgsql.NpgsqlDataReader,Durable.Postgres.PostgresJoinBuilder.PostgresJoinResult)">
            <summary>
            Maps a single entity from the current row of a PostgreSQL data reader.
            This is a simplified version for basic query operations without joins.
            </summary>
            <param name="reader">The PostgreSQL data reader positioned at the desired row</param>
            <param name="joinResult">Optional join result for complex mapping scenarios</param>
            <returns>A mapped entity of type T</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when reader is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when mapping encounters errors</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresEntityMapper`1.MapJoinedResultsAsync(Npgsql.NpgsqlDataReader,Durable.Postgres.PostgresJoinBuilder.PostgresJoinResult,System.Collections.Generic.List{Durable.Postgres.PostgresIncludeInfo},System.Threading.CancellationToken)">
            <summary>
            Maps a PostgreSQL data reader to a list of entities asynchronously, handling joined results and navigation properties.
            </summary>
            <param name="reader">The PostgreSQL data reader containing the query results</param>
            <param name="joinResult">Join metadata for mapping related entities</param>
            <param name="includes">Navigation property information for Include operations</param>
            <param name="cancellationToken">Cancellation token for the async operation</param>
            <returns>A list of mapped entities with populated navigation properties</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when reader is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when mapping encounters errors</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresEntityMapper`1.MapSingleEntity(Npgsql.NpgsqlDataReader,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            Maps a single entity from the data reader using the provided column mappings.
            </summary>
            <param name="reader">The data reader to read from</param>
            <param name="columnMappings">The column to property mappings</param>
            <returns>A mapped entity</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresEntityMapper`1.ConvertPostgresValue(System.Object,System.Type)">
            <summary>
            Converts PostgreSQL-specific values to appropriate .NET types.
            Handles PostgreSQL arrays, JSON/JSONB, UUID, timestamps, geometric types, and other PostgreSQL-specific data types.
            </summary>
            <param name="value">The raw value from PostgreSQL</param>
            <param name="targetType">The target .NET type</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresEntityMapper`1.GetColumnIndex(Npgsql.NpgsqlDataReader,System.String)">
            <summary>
            Gets the column index for the specified column name, case-insensitive.
            </summary>
            <param name="reader">The data reader</param>
            <param name="columnName">The column name to find</param>
            <returns>The column index, or -1 if not found</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresEntityMapper`1.MapPrimaryEntity(Npgsql.NpgsqlDataReader,System.Collections.Generic.Dictionary{System.Object,`0})">
            <summary>
            Maps the primary entity from the current reader row.
            </summary>
            <param name="reader">The data reader</param>
            <param name="primaryEntities">Existing primary entities cache</param>
            <returns>The mapped primary entity</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresEntityMapper`1.GetEntityKey(`0)">
            <summary>
            Gets a unique key for the entity (typically primary key value).
            </summary>
            <param name="entity">The entity to get the key for</param>
            <returns>A unique key for the entity</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresEntityMapper`1.MapRelatedEntities(Npgsql.NpgsqlDataReader,`0,System.Collections.Generic.List{Durable.Postgres.PostgresIncludeInfo},Durable.Postgres.PostgresJoinBuilder.PostgresJoinResult)">
            <summary>
            Maps related entities from joined results.
            </summary>
            <param name="reader">The data reader</param>
            <param name="primaryEntity">The primary entity</param>
            <param name="includes">Include information</param>
            <param name="joinResult">Join result metadata</param>
        </member>
        <member name="M:Durable.Postgres.PostgresEntityMapper`1.ClearProcessingCache">
            <summary>
            Clears the internal entity processing cache. Call this between different query executions
            to prevent issues with entity identity tracking.
            </summary>
        </member>
        <member name="T:Durable.Postgres.PostgresExpressionParser`1">
            <summary>
            Parses and converts LINQ expressions to PostgreSQL-compatible SQL strings.
            Provides support for complex expression trees including binary operations, method calls, and member access.
            </summary>
            <typeparam name="T">The entity type that the expressions operate on.</typeparam>
        </member>
        <member name="M:Durable.Postgres.PostgresExpressionParser`1.#ctor(System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},Durable.ISanitizer)">
            <summary>
            Initializes a new instance of the PostgresExpressionParser with the specified column mappings and sanitizer.
            </summary>
            <param name="columnMappings">A dictionary mapping property names to their corresponding database column names and PropertyInfo objects.</param>
            <param name="sanitizer">The sanitizer to use for value formatting and SQL injection prevention. Defaults to PostgresSanitizer if null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when columnMappings is null.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresExpressionParser`1.ParseExpression(System.Linq.Expressions.Expression)">
            <summary>
            Parses any expression tree and converts it to its PostgreSQL SQL equivalent string representation.
            </summary>
            <param name="expression">The expression tree to parse and convert to SQL.</param>
            <returns>A string containing the PostgreSQL-compatible SQL representation of the expression.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when an unsupported expression type is encountered.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresExpressionParser`1.ParseExpressionWithParameters(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Parses an expression tree and converts it to parameterized PostgreSQL SQL with extracted parameters.
            This method clears any existing parameters before parsing.
            </summary>
            <param name="expression">The expression tree to parse and convert to SQL.</param>
            <param name="useParameterizedQueries">If true, extracts values as parameters; if false, embeds values directly (for backward compatibility).</param>
            <returns>A string containing the PostgreSQL-compatible SQL representation of the expression.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when an unsupported expression type is encountered.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresExpressionParser`1.GetParameters">
            <summary>
            Gets the parameters that were collected during the last call to ParseExpressionWithParameters.
            </summary>
            <returns>A list of parameter name-value pairs extracted from the expression.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresExpressionParser`1.GetColumnFromExpression(System.Linq.Expressions.Expression)">
            <summary>
            Extracts the database column name from a member expression that references an entity property.
            </summary>
            <param name="expression">The member expression representing a property access (e.g., p.FirstName).</param>
            <returns>The corresponding database column name for the property.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the expression is not a valid member expression or the property is not mapped to a column.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresExpressionParser`1.GetRawColumnFromExpression(System.Linq.Expressions.Expression)">
            <summary>
            Gets the raw column name without quotes from a member expression.
            Used internally when quotes will be added manually.
            </summary>
            <param name="expression">The member expression representing a property access.</param>
            <returns>The raw column name without quotes.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the expression is not a valid member expression or the property is not mapped to a column.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresExpressionParser`1.ParseUpdateExpression(System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            Parses an update expression that specifies how to modify entity properties and converts it to SQL SET clause format.
            </summary>
            <param name="updateExpression">A lambda expression defining the property updates using member initialization syntax (e.g., p => new Person { Name = "John", Age = 30 }).</param>
            <returns>A string containing the SQL SET clause with column assignments (e.g., "\"Name\" = 'John', \"Age\" = 30").</returns>
            <exception cref="T:System.ArgumentException">Thrown when the expression is not a member initialization expression.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when an unsupported expression type is encountered in the update values.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresExpressionParser`1.GetCacheCount">
            <summary>
            Gets the count of cached compiled expressions for this specific T type.
            This method is useful for testing and verifying cache isolation between different entity types.
            </summary>
            <returns>The number of expressions currently cached for this type T</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresExpressionParser`1.ClearCache">
            <summary>
            Clears the expression cache for this specific T type.
            This method is useful for testing and debugging cache behavior.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresExpressionParser`1.ResolveNavigationPropertyChain(System.Linq.Expressions.MemberExpression)">
            <summary>
            Resolves navigation property chains like b.Author.Name to table alias references like t1."name"
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresExpressionParser`1.GetNavigationColumnReference(System.String,System.String)">
            <summary>
            Gets the column reference for a navigation property
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresExpressionParser`1.ConvertPropertyNameToColumnName(System.String)">
            <summary>
            Converts a C# property name to the corresponding database column name
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresExpressionParser`1.ConvertToSnakeCase(System.String)">
            <summary>
            Converts PascalCase strings to snake_case
            </summary>
        </member>
        <member name="T:Durable.Postgres.PostgresGroupedQueryBuilder`2">
            <summary>
            Advanced grouped query builder for PostgreSQL with EntityMapper integration.
            Provides comprehensive support for complex type conversions, navigation properties,
            and sophisticated aggregate operations with proper entity mapping.
            </summary>
            <typeparam name="TEntity">The entity type being queried</typeparam>
            <typeparam name="TKey">The type of the grouping key</typeparam>
        </member>
        <member name="M:Durable.Postgres.PostgresGroupedQueryBuilder`2.#ctor(Durable.Postgres.PostgresRepository{`0},Durable.Postgres.PostgresQueryBuilder{`0},System.Linq.Expressions.Expression{System.Func{`0,`1}},Durable.Postgres.PostgresEntityMapper{`0},Durable.IDataTypeConverter,Durable.ISanitizer)">
            <summary>
            Initializes a new instance of the PostgresGroupedQueryBuilder class.
            </summary>
            <param name="repository">The PostgreSQL repository instance</param>
            <param name="queryBuilder">The PostgreSQL query builder instance</param>
            <param name="keySelector">Expression for selecting the grouping key</param>
            <param name="entityMapper">Advanced entity mapper for complex type handling</param>
            <param name="dataTypeConverter">Data type converter for advanced conversions</param>
            <param name="sanitizer">SQL sanitizer for safe query construction</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any required parameter is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresGroupedQueryBuilder`2.Having(System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{`1,`0},System.Boolean}})">
            <summary>
            Adds a HAVING clause to filter grouped results using advanced expression parsing.
            </summary>
            <param name="predicate">The condition to apply to the grouped results</param>
            <returns>The current grouped query builder for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate is null</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the expression contains unsupported operations</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresGroupedQueryBuilder`2.Select``1(System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{`1,`0},``0}})">
            <summary>
            Specifies a custom selection for the grouped query results with enhanced type handling.
            </summary>
            <typeparam name="TResult">The type of the result after selection</typeparam>
            <param name="selector">The selection expression to apply to each group</param>
            <returns>The current grouped query builder for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresGroupedQueryBuilder`2.Execute">
            <summary>
            Executes the grouped query and returns results with full entity mapping support.
            </summary>
            <returns>The grouped query results with properly mapped entities</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when query execution fails</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresGroupedQueryBuilder`2.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the grouped query with advanced entity mapping.
            </summary>
            <param name="token">The cancellation token</param>
            <returns>A task representing the asynchronous operation with grouped query results</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when query execution fails</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresGroupedQueryBuilder`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns the count of items in each group with enhanced filtering support.
            </summary>
            <param name="predicate">Optional predicate to filter items before counting</param>
            <returns>The count of items</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when count operation fails</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresGroupedQueryBuilder`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the count of items in each group with enhanced filtering support.
            </summary>
            <param name="predicate">Optional predicate to filter items before counting</param>
            <param name="token">The cancellation token</param>
            <returns>A task representing the asynchronous operation with the count of items</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when count operation fails</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresGroupedQueryBuilder`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Calculates the sum of a numeric property for items in each group with type-safe conversion.
            </summary>
            <param name="selector">The property selector for the sum calculation</param>
            <returns>The sum of the selected property</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when sum operation fails</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresGroupedQueryBuilder`2.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the sum of a numeric property for items in each group.
            </summary>
            <param name="selector">The property selector for the sum calculation</param>
            <param name="token">The cancellation token</param>
            <returns>A task representing the asynchronous operation with the sum of the selected property</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when sum operation fails</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresGroupedQueryBuilder`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Calculates the average of a numeric property for items in each group with enhanced precision.
            </summary>
            <param name="selector">The property selector for the average calculation</param>
            <returns>The average of the selected property</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when average operation fails</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresGroupedQueryBuilder`2.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the average of a numeric property for items in each group.
            </summary>
            <param name="selector">The property selector for the average calculation</param>
            <param name="token">The cancellation token</param>
            <returns>A task representing the asynchronous operation with the average of the selected property</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when average operation fails</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresGroupedQueryBuilder`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Finds the maximum value of a property for items in each group with advanced type conversion.
            </summary>
            <typeparam name="TResult">The type of the property being compared</typeparam>
            <param name="selector">The property selector for finding the maximum</param>
            <returns>The maximum value of the selected property</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when max operation fails</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresGroupedQueryBuilder`2.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously finds the maximum value of a property for items in each group.
            </summary>
            <typeparam name="TResult">The type of the property being compared</typeparam>
            <param name="selector">The property selector for finding the maximum</param>
            <param name="token">The cancellation token</param>
            <returns>A task representing the asynchronous operation with the maximum value of the selected property</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when max operation fails</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresGroupedQueryBuilder`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Finds the minimum value of a property for items in each group with advanced type conversion.
            </summary>
            <typeparam name="TResult">The type of the property being compared</typeparam>
            <param name="selector">The property selector for finding the minimum</param>
            <returns>The minimum value of the selected property</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when min operation fails</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresGroupedQueryBuilder`2.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously finds the minimum value of a property for items in each group.
            </summary>
            <typeparam name="TResult">The type of the property being compared</typeparam>
            <param name="selector">The property selector for finding the minimum</param>
            <param name="token">The cancellation token</param>
            <returns>A task representing the asynchronous operation with the minimum value of the selected property</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when min operation fails</exception>
        </member>
        <member name="T:Durable.Postgres.PostgresGrouping`2">
            <summary>
            Represents a grouping of elements with a common key for PostgreSQL grouped query operations.
            Provides enhanced navigation property support and complex type handling.
            </summary>
            <typeparam name="TKey">The type of the grouping key</typeparam>
            <typeparam name="TElement">The type of the elements in the group</typeparam>
        </member>
        <member name="M:Durable.Postgres.PostgresGrouping`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the PostgresGrouping class.
            </summary>
            <param name="key">The common key for all elements in this group</param>
            <param name="elements">The elements that share this key</param>
            <exception cref="T:System.ArgumentNullException">Thrown when elements is null</exception>
        </member>
        <member name="P:Durable.Postgres.PostgresGrouping`2.Key">
            <summary>
            Gets the key that is common to all elements in this group.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresGrouping`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the elements in this group.
            </summary>
            <returns>An enumerator for the elements in this group</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresGrouping`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the elements in this group.
            </summary>
            <returns>An enumerator for the elements in this group</returns>
        </member>
        <member name="T:Durable.Postgres.PostgresIncludeInfo">
            <summary>
            Contains metadata about navigation properties for Include operations in PostgreSQL queries.
            Supports both single-entity and collection navigation properties with foreign key relationships.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.PropertyName">
            <summary>
            Gets or sets the name of the navigation property being included.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.PropertyPath">
            <summary>
            Gets or sets the full property path for this include (e.g., "Company.Address").
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.NavigationProperty">
            <summary>
            Gets or sets the navigation property that will be populated with related data.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.ForeignKeyProperty">
            <summary>
            Gets or sets the foreign key property that establishes the relationship.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.InverseForeignKeyProperty">
            <summary>
            Gets or sets the name of the inverse foreign key property for collection navigation properties.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.RelatedEntityType">
            <summary>
            Gets or sets the type of the related entity being included.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.RelatedTableName">
            <summary>
            Gets or sets the database table name for the related entity.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.JoinAlias">
            <summary>
            Gets or sets the SQL alias used for the related table in JOIN operations.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.Parent">
            <summary>
            Gets or sets the parent include info for nested includes (ThenInclude scenarios).
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.Children">
            <summary>
            Gets or sets the collection of child includes for nested navigation properties.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.IsCollection">
            <summary>
            Gets or sets whether this navigation property represents a collection (one-to-many relationship).
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.IsManyToMany">
            <summary>
            Gets or sets whether this represents a many-to-many relationship requiring a junction table.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.JunctionEntityType">
            <summary>
            Gets or sets the junction entity type for many-to-many relationships.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.JunctionTableName">
            <summary>
            Gets or sets the junction table name for many-to-many relationships.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.JunctionAlias">
            <summary>
            Gets or sets the SQL alias for the junction table in many-to-many scenarios.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.ForeignKeyColumn">
            <summary>
            Gets or sets the foreign key column name in the current table.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.InverseForeignKeyColumn">
            <summary>
            Gets or sets the inverse foreign key column name in the related table.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.ParentPrimaryKeyColumn">
            <summary>
            Gets or sets the primary key column name in the parent table.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.RelatedPrimaryKeyColumn">
            <summary>
            Gets or sets the primary key column name in the related table.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.JunctionParentKeyColumn">
            <summary>
            Gets or sets the parent key column name in the junction table for many-to-many relationships.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresIncludeInfo.JunctionTargetKeyColumn">
            <summary>
            Gets or sets the target key column name in the junction table for many-to-many relationships.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresIncludeInfo.#ctor">
            <summary>
            Initializes a new instance of the PostgresIncludeInfo class.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresIncludeInfo.ToString">
            <summary>
            Returns a string representation of this include info for debugging purposes.
            </summary>
            <returns>A string containing the property path and related entity type information.</returns>
        </member>
        <member name="T:Durable.Postgres.PostgresIncludeProcessor">
            <summary>
            Simplified PostgreSQL include processor for basic navigation property support.
            This is a minimal implementation to enable compilation and basic functionality.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresIncludeProcessor.#ctor(Durable.ISanitizer,System.Int32)">
            <summary>
            Initializes a new instance of the PostgresIncludeProcessor class.
            </summary>
            <param name="sanitizer">The sanitizer to use for SQL identifiers</param>
            <param name="maxIncludeDepth">Maximum depth for nested includes to prevent infinite recursion. Default is 5</param>
            <exception cref="T:System.ArgumentNullException">Thrown when sanitizer is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresIncludeProcessor.ParseIncludes``1(System.Collections.Generic.List{System.String})">
            <summary>
            Parses a list of include paths and creates corresponding PostgresIncludeInfo objects.
            Supports nested navigation properties through dot notation (e.g., "Company.Address").
            </summary>
            <typeparam name="T">The root entity type</typeparam>
            <param name="includePaths">The navigation property paths to include</param>
            <returns>A list of root-level include information objects</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when includePaths is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when include validation fails</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresIncludeProcessor.GetColumnMappings(System.Type)">
            <summary>
            Gets the column mappings for the specified entity type.
            This method caches results to improve performance for repeated calls.
            </summary>
            <param name="entityType">The entity type to get column mappings for</param>
            <returns>A dictionary mapping column names to PropertyInfo objects</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when entityType is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresIncludeProcessor.GetTableName(System.Type)">
            <summary>
            Gets the database table name for the specified entity type.
            This method caches results to improve performance.
            </summary>
            <param name="entityType">The entity type to get the table name for</param>
            <returns>The database table name</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when entityType is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the entity type does not have an EntityAttribute</exception>
        </member>
        <member name="T:Durable.Postgres.PostgresIncludeValidator">
            <summary>
            Validates Include expressions to prevent common errors and security issues in PostgreSQL queries.
            Provides depth limiting, circular reference detection, and path validation.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresIncludeValidator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the PostgresIncludeValidator class.
            </summary>
            <param name="maxIncludeDepth">Maximum allowed depth for nested includes. Default is 5</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when maxIncludeDepth is less than 1</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresIncludeValidator.ValidateIncludePath(System.String)">
            <summary>
            Validates an include path to ensure it meets safety and complexity requirements.
            </summary>
            <param name="includePath">The include path to validate (e.g., "Company.Address.Country")</param>
            <exception cref="T:System.ArgumentNullException">Thrown when includePath is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when includePath is invalid</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when include depth exceeds the maximum allowed</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresIncludeValidator.ValidateIncludePaths(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Validates multiple include paths at once for batch processing.
            </summary>
            <param name="includePaths">The collection of include paths to validate</param>
            <exception cref="T:System.ArgumentNullException">Thrown when includePaths is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresIncludeValidator.ClearValidationCache">
            <summary>
            Clears the validation cache, forcing re-validation of all paths.
            This method is useful for testing or when validation rules change.
            </summary>
        </member>
        <member name="T:Durable.Postgres.PostgresJoinBuilder">
            <summary>
            Builds SQL JOIN clauses and manages column mappings for PostgreSQL Include operations.
            Handles complex navigation property relationships including one-to-many and many-to-many scenarios.
            </summary>
        </member>
        <member name="T:Durable.Postgres.PostgresJoinBuilder.PostgresJoinResult">
            <summary>
            Represents the result of building JOIN SQL with associated metadata.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresJoinBuilder.PostgresJoinResult.SelectClause">
            <summary>
            Gets or sets the SELECT clause with all required columns and aliases.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresJoinBuilder.PostgresJoinResult.JoinClause">
            <summary>
            Gets or sets the JOIN clause containing all necessary table joins.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresJoinBuilder.PostgresJoinResult.Includes">
            <summary>
            Gets or sets the collection of include information for entity mapping.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresJoinBuilder.PostgresJoinResult.ColumnMappingsByAlias">
            <summary>
            Gets or sets the column mappings organized by table alias for efficient lookup during result mapping.
            </summary>
        </member>
        <member name="T:Durable.Postgres.PostgresJoinBuilder.PostgresColumnMapping">
            <summary>
            Represents a mapping between a database column and an entity property.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresJoinBuilder.PostgresColumnMapping.ColumnName">
            <summary>
            Gets or sets the database column name.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresJoinBuilder.PostgresColumnMapping.Alias">
            <summary>
            Gets or sets the SQL alias for the column in SELECT statements.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresJoinBuilder.PostgresColumnMapping.Property">
            <summary>
            Gets or sets the property that this column maps to.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresJoinBuilder.PostgresColumnMapping.TableAlias">
            <summary>
            Gets or sets the table alias that owns this column.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresJoinBuilder.#ctor(Durable.ISanitizer)">
            <summary>
            Initializes a new instance of the PostgresJoinBuilder class.
            </summary>
            <param name="sanitizer">The sanitizer to use for SQL identifiers and values</param>
            <exception cref="T:System.ArgumentNullException">Thrown when sanitizer is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresJoinBuilder.BuildJoinSql``1(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Builds SQL JOIN clauses and column mappings for the specified include paths.
            </summary>
            <typeparam name="T">The base entity type being queried</typeparam>
            <param name="baseTableName">The name of the base table</param>
            <param name="includePaths">The navigation property paths to include</param>
            <returns>A PostgresJoinResult containing all necessary SQL and mapping information</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when baseTableName is null</exception>
        </member>
        <member name="T:Durable.Postgres.PostgresOrderByClause">
            <summary>
            Represents an ORDER BY clause in a PostgreSQL query.
            Provides ordering direction and column information for query building.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresOrderByClause.Column">
            <summary>
            Gets or sets the column name or expression to order by.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresOrderByClause.Direction">
            <summary>
            Gets or sets the ordering direction (ASC or DESC).
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresOrderByClause.#ctor">
            <summary>
            Initializes a new instance of the PostgresOrderByClause.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresOrderByClause.#ctor(System.String,Durable.Postgres.OrderDirection)">
            <summary>
            Initializes a new instance of the PostgresOrderByClause with the specified column and direction.
            </summary>
            <param name="column">The column name or expression to order by</param>
            <param name="direction">The ordering direction</param>
            <exception cref="T:System.ArgumentNullException">Thrown when column is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when column is empty or whitespace</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresOrderByClause.ToString">
            <summary>
            Returns the SQL representation of this ORDER BY clause using PostgreSQL identifier quoting.
            </summary>
            <returns>The SQL ORDER BY clause string</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresOrderByClause.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current PostgresOrderByClause.
            </summary>
            <param name="obj">The object to compare with the current object</param>
            <returns>True if the specified object is equal to the current object; otherwise, false</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresOrderByClause.GetHashCode">
            <summary>
            Returns the hash code for this PostgresOrderByClause.
            </summary>
            <returns>A hash code for the current object</returns>
        </member>
        <member name="T:Durable.Postgres.OrderDirection">
            <summary>
            Specifies the direction of ordering for ORDER BY clauses.
            </summary>
        </member>
        <member name="F:Durable.Postgres.OrderDirection.Ascending">
            <summary>
            Ascending order (smallest to largest).
            </summary>
        </member>
        <member name="F:Durable.Postgres.OrderDirection.Descending">
            <summary>
            Descending order (largest to smallest).
            </summary>
        </member>
        <member name="T:Durable.Postgres.PostgresProjectedQueryBuilder`2">
            <summary>
            Provides query building functionality for projected queries that transform entities from TEntity to TResult.
            This class handles SELECT operations with projection and supports ordering, pagination, and result transformation.
            </summary>
            <typeparam name="TEntity">The source entity type being queried from the database.</typeparam>
            <typeparam name="TResult">The projected result type that entities will be transformed into.</typeparam>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.#ctor(Durable.Postgres.PostgresRepository{`0},System.Linq.Expressions.Expression{System.Func{`0,`1}},Durable.Postgres.PostgresQueryBuilder{`0},Durable.ITransaction)">
            <summary>
            Initializes a new instance of the PostgresProjectedQueryBuilder class.
            </summary>
            <param name="repository">The repository instance for database operations.</param>
            <param name="selector">The projection expression that transforms TEntity to TResult.</param>
            <param name="sourceQueryBuilder">The source query builder to copy state from.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when repository or selector is null.</exception>
        </member>
        <member name="P:Durable.Postgres.PostgresProjectedQueryBuilder`2.Query">
            <summary>
            Gets the current SQL query being built.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.BuildSql">
            <summary>
            Builds the SQL query string for the projected query.
            </summary>
            <returns>The complete SQL query string.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.Where(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Applies a WHERE clause to the projected query.
            </summary>
            <param name="predicate">The predicate expression to filter results.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as WHERE clauses on projected queries are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Orders the query results by the specified key selector in ascending order.
            </summary>
            <typeparam name="TKey">The type of the key used for ordering.</typeparam>
            <param name="keySelector">The expression that selects the key for ordering.</param>
            <returns>The query builder instance for method chaining.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Orders the query results by the specified key selector in descending order.
            </summary>
            <typeparam name="TKey">The type of the key used for ordering.</typeparam>
            <param name="keySelector">The expression that selects the key for ordering.</param>
            <returns>The query builder instance for method chaining.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.ThenBy``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Performs a subsequent ordering of the query results by the specified key selector in ascending order.
            </summary>
            <typeparam name="TKey">The type of the key used for ordering.</typeparam>
            <param name="keySelector">The expression that selects the key for additional ordering.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when called without a preceding OrderBy or OrderByDescending.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Performs a subsequent ordering of the query results by the specified key selector in descending order.
            </summary>
            <typeparam name="TKey">The type of the key used for ordering.</typeparam>
            <param name="keySelector">The expression that selects the key for additional ordering.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when called without a preceding OrderBy or OrderByDescending.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.Skip(System.Int32)">
            <summary>
            Skips the specified number of results in the query.
            </summary>
            <param name="count">The number of results to skip.</param>
            <returns>The query builder instance for method chaining.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.Take(System.Int32)">
            <summary>
            Limits the query to return only the specified number of results.
            </summary>
            <param name="count">The maximum number of results to return.</param>
            <returns>The query builder instance for method chaining.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.Distinct">
            <summary>
            Ensures that the query returns only distinct results.
            </summary>
            <returns>The query builder instance for method chaining.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.Select``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Applies an additional projection to the query results.
            </summary>
            <typeparam name="TNewResult">The type of the new projection result.</typeparam>
            <param name="selector">The projection expression.</param>
            <returns>A new query builder for the projected type.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as chaining Select operations is not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.Include``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Includes related data in the query results.
            </summary>
            <typeparam name="TProperty">The type of the navigation property.</typeparam>
            <param name="navigationProperty">The navigation property to include.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Include on projected queries is not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.ThenInclude``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Includes related data in the query results using a nested navigation.
            </summary>
            <typeparam name="TPreviousProperty">The type of the previous navigation property.</typeparam>
            <typeparam name="TProperty">The type of the navigation property to include.</typeparam>
            <param name="navigationProperty">The navigation property to include.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as ThenInclude on projected queries is not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Groups query results by the specified key selector expression.
            </summary>
            <typeparam name="TKey">The type of the grouping key.</typeparam>
            <param name="keySelector">The expression that selects the grouping key.</param>
            <returns>A grouped query builder for aggregate operations.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as GroupBy on projected queries is not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.Having(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Adds a HAVING clause to the query.
            </summary>
            <param name="predicate">The HAVING condition.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Having on projected queries is not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.Union(Durable.IQueryBuilder{`1})">
            <summary>
            Performs a UNION operation with another query.
            </summary>
            <param name="other">The other query to union with.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Union operations are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.UnionAll(Durable.IQueryBuilder{`1})">
            <summary>
            Performs a UNION ALL operation with another query.
            </summary>
            <param name="other">The other query to union with.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Union operations are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.Intersect(Durable.IQueryBuilder{`1})">
            <summary>
            Performs an INTERSECT operation with another query.
            </summary>
            <param name="other">The other query to intersect with.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Intersect operations are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.Except(Durable.IQueryBuilder{`1})">
            <summary>
            Performs an EXCEPT operation with another query.
            </summary>
            <param name="other">The other query to except with.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Except operations are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.WhereIn``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},Durable.IQueryBuilder{``0})">
            <summary>
            Adds a WHERE IN clause to the query.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The key selector expression.</param>
            <param name="subquery">The subquery to check against.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as WhereIn operations are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.WhereNotIn``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},Durable.IQueryBuilder{``0})">
            <summary>
            Adds a WHERE NOT IN clause to the query.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The key selector expression.</param>
            <param name="subquery">The subquery to check against.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as WhereNotIn operations are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.WhereInRaw``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.String)">
            <summary>
            Adds a WHERE IN clause with raw SQL to the query.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The key selector expression.</param>
            <param name="rawSql">The raw SQL to check against.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as WhereInRaw operations are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.WhereNotInRaw``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.String)">
            <summary>
            Adds a WHERE NOT IN clause with raw SQL to the query.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The key selector expression.</param>
            <param name="rawSql">The raw SQL to check against.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as WhereNotInRaw operations are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.WhereExists``1(Durable.IQueryBuilder{``0})">
            <summary>
            Adds a WHERE EXISTS clause to the query.
            </summary>
            <typeparam name="TOther">The type of the other query.</typeparam>
            <param name="subquery">The subquery to check for existence.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as WhereExists operations are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.WhereNotExists``1(Durable.IQueryBuilder{``0})">
            <summary>
            Adds a WHERE NOT EXISTS clause to the query.
            </summary>
            <typeparam name="TOther">The type of the other query.</typeparam>
            <param name="subquery">The subquery to check for non-existence.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as WhereNotExists operations are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.WithWindowFunction(System.String,System.String,System.String)">
            <summary>
            Adds a window function to the query.
            </summary>
            <param name="functionName">The window function expression.</param>
            <param name="partitionBy">The PARTITION BY clause.</param>
            <param name="orderBy">The ORDER BY clause within the window.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as window functions are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.WithCte(System.String,System.String)">
            <summary>
            Adds a Common Table Expression (CTE) to the query.
            </summary>
            <param name="name">The name of the CTE.</param>
            <param name="query">The CTE query definition.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as CTEs are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.WithRecursiveCte(System.String,System.String,System.String)">
            <summary>
            Adds a recursive Common Table Expression (CTE) to the query.
            </summary>
            <param name="name">The name of the recursive CTE.</param>
            <param name="anchor">The anchor query for the recursive CTE.</param>
            <param name="recursive">The recursive query definition.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as recursive CTEs are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.WhereRaw(System.String,System.Object[])">
            <summary>
            Adds a raw WHERE clause to the query.
            </summary>
            <param name="whereClause">The raw WHERE clause.</param>
            <param name="parameters">The parameters for the WHERE clause.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as raw WHERE clauses are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.SelectRaw(System.String)">
            <summary>
            Adds a raw SELECT clause to the query.
            </summary>
            <param name="selectClause">The raw SELECT clause.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as raw SELECT clauses are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.FromRaw(System.String)">
            <summary>
            Adds a raw FROM clause to the query.
            </summary>
            <param name="fromClause">The raw FROM clause.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as raw FROM clauses are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.JoinRaw(System.String)">
            <summary>
            Adds a raw JOIN clause to the query.
            </summary>
            <param name="joinClause">The raw JOIN clause.</param>
            <returns>The query builder instance for method chaining.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as raw JOIN clauses are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.SelectCase">
            <summary>
            Creates a CASE statement builder for conditional logic.
            </summary>
            <returns>A CASE statement builder.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as CASE statements are not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.Execute">
            <summary>
            Executes the projected query and returns the results.
            </summary>
            <returns>The projected query results.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when query execution fails.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the projected query and returns the results.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with projected query results.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when query execution fails.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.ExecuteAsyncEnumerable(System.Threading.CancellationToken)">
            <summary>
            Executes the projected query as an async enumerable for streaming results.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>An async enumerable of projected results.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when query execution fails.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.ExecuteWithQuery">
            <summary>
            Executes the projected query and returns results with query information.
            </summary>
            <returns>A durable result containing the projected data and query information.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.ExecuteWithQueryAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the projected query and returns results with query information.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with durable result.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.ExecuteAsyncEnumerableWithQuery(System.Threading.CancellationToken)">
            <summary>
            Executes the projected query as an async enumerable with query information.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>An async durable result for streaming projected data.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.Count">
            <summary>
            Counts the number of entities matching the query.
            </summary>
            <returns>The count of matching entities.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Count operations are not supported on projected queries.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously counts the number of entities matching the query.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with the count of matching entities.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Count operations are not supported on projected queries.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.Sum``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Calculates the sum of a numeric property for entities matching the query.
            </summary>
            <typeparam name="TProperty">The type of the property to sum.</typeparam>
            <param name="selector">The expression to select the property to sum.</param>
            <returns>The sum of the property values.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Sum operations are not supported on projected queries.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.SumAsync``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the sum of a numeric property for entities matching the query.
            </summary>
            <typeparam name="TProperty">The type of the property to sum.</typeparam>
            <param name="selector">The expression to select the property to sum.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with the sum of the property values.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Sum operations are not supported on projected queries.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.Average``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Calculates the average of a numeric property for entities matching the query.
            </summary>
            <typeparam name="TProperty">The type of the property to average.</typeparam>
            <param name="selector">The expression to select the property to average.</param>
            <returns>The average of the property values.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Average operations are not supported on projected queries.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.AverageAsync``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the average of a numeric property for entities matching the query.
            </summary>
            <typeparam name="TProperty">The type of the property to average.</typeparam>
            <param name="selector">The expression to select the property to average.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with the average of the property values.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Average operations are not supported on projected queries.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.Min``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Finds the minimum value of a property for entities matching the query.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="selector">The expression to select the property.</param>
            <returns>The minimum property value.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Min operations are not supported on projected queries.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously finds the minimum value of a property for entities matching the query.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="selector">The expression to select the property.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with the minimum property value.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Min operations are not supported on projected queries.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.Max``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Finds the maximum value of a property for entities matching the query.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="selector">The expression to select the property.</param>
            <returns>The maximum property value.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Max operations are not supported on projected queries.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously finds the maximum value of a property for entities matching the query.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="selector">The expression to select the property.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with the maximum property value.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Max operations are not supported on projected queries.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.Delete">
            <summary>
            Deletes all entities matching the query.
            </summary>
            <returns>The number of entities deleted.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Delete operations are not supported on projected queries.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresProjectedQueryBuilder`2.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes all entities matching the query.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with the number of entities deleted.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown as Delete operations are not supported on projected queries.</exception>
        </member>
        <member name="T:Durable.Postgres.PostgresQueryBuilder`1">
            <summary>
            PostgreSQL-specific implementation of IQueryBuilder that provides fluent query building capabilities for PostgreSQL databases.
            Supports advanced features like CTEs, window functions, set operations, and includes.
            </summary>
            <typeparam name="TEntity">The entity type being queried</typeparam>
        </member>
        <member name="P:Durable.Postgres.PostgresQueryBuilder`1.Query">
            <summary>
            Gets the SQL query that will be or was executed.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.#ctor(Durable.Postgres.PostgresRepository{`0},Durable.ITransaction)">
            <summary>
            Initializes a new instance of the PostgresQueryBuilder class.
            </summary>
            <param name="repository">The PostgreSQL repository instance for data access operations</param>
            <param name="transaction">Optional transaction to execute queries within. Default is null</param>
            <exception cref="T:System.ArgumentNullException">Thrown when repository is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds a WHERE clause condition to the query using a lambda expression.
            </summary>
            <param name="predicate">Lambda expression representing the WHERE condition</param>
            <returns>The current query builder instance for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds an ORDER BY clause to sort results in ascending order by the specified property.
            </summary>
            <typeparam name="TKey">The type of the property to sort by</typeparam>
            <param name="keySelector">Lambda expression selecting the property to sort by</param>
            <returns>The current query builder instance for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when keySelector is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds an ORDER BY clause to sort results in descending order by the specified property.
            </summary>
            <typeparam name="TKey">The type of the property to sort by</typeparam>
            <param name="keySelector">Lambda expression selecting the property to sort by</param>
            <returns>The current query builder instance for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when keySelector is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.ThenBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Performs a subsequent ordering of the query results in ascending order.
            </summary>
            <typeparam name="TKey">The type of the ordering key.</typeparam>
            <param name="keySelector">The expression to extract the ordering key.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Performs a subsequent ordering of the query results in descending order.
            </summary>
            <typeparam name="TKey">The type of the ordering key.</typeparam>
            <param name="keySelector">The expression to extract the ordering key.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.Skip(System.Int32)">
            <summary>
            Skips the specified number of elements in the query results.
            </summary>
            <param name="count">The number of elements to skip.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.Take(System.Int32)">
            <summary>
            Takes only the specified number of elements from the query results.
            </summary>
            <param name="count">The number of elements to take.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.Distinct">
            <summary>
            Returns distinct elements from the query results.
            </summary>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Projects each element of the query into a new form.
            </summary>
            <typeparam name="TResult">The type of the result after projection.</typeparam>
            <param name="selector">The projection expression.</param>
            <returns>A new query builder for the projected type.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Includes related data in the query results.
            </summary>
            <typeparam name="TProperty">The type of the navigation property.</typeparam>
            <param name="navigationProperty">The navigation property to include.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.ThenInclude``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Includes additional related data based on a previously included navigation property.
            </summary>
            <typeparam name="TPreviousProperty">The type of the previously included property.</typeparam>
            <typeparam name="TProperty">The type of the navigation property to include.</typeparam>
            <param name="navigationProperty">The navigation property to include.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Groups the query results by the specified key selector.
            </summary>
            <typeparam name="TKey">The type of the grouping key.</typeparam>
            <param name="keySelector">The expression to extract the grouping key.</param>
            <returns>A grouped query builder for further operations.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when keySelector is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.Having(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds a HAVING clause to filter grouped results.
            </summary>
            <param name="predicate">The condition to apply to grouped results.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.Union(Durable.IQueryBuilder{`0})">
            <summary>
            Performs a UNION operation with another query, combining results and removing duplicates.
            </summary>
            <param name="other">The other query builder to union with.</param>
            <returns>The current query builder for method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when other is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.UnionAll(Durable.IQueryBuilder{`0})">
            <summary>
            Performs a UNION ALL operation with another query, combining results including duplicates.
            </summary>
            <param name="other">The other query builder to union with.</param>
            <returns>The current query builder for method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when other is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.Intersect(Durable.IQueryBuilder{`0})">
            <summary>
            Performs an INTERSECT operation with another query, returning only common results.
            PostgreSQL natively supports INTERSECT operations.
            </summary>
            <param name="other">The other query builder to intersect with.</param>
            <returns>The current query builder for method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when other is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.Except(Durable.IQueryBuilder{`0})">
            <summary>
            Performs an EXCEPT operation with another query, returning results not in the other query.
            PostgreSQL natively supports EXCEPT operations.
            </summary>
            <param name="other">The other query builder to except with.</param>
            <returns>The current query builder for method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when other is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.WhereIn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Durable.IQueryBuilder{``0})">
            <summary>
            Adds a WHERE IN clause using a subquery.
            </summary>
            <typeparam name="TKey">The type of the key to match.</typeparam>
            <param name="keySelector">The expression to extract the key from the main query.</param>
            <param name="subquery">The subquery to check membership against.</param>
            <returns>The current query builder for method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when keySelector or subquery is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.WhereNotIn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Durable.IQueryBuilder{``0})">
            <summary>
            Adds a WHERE NOT IN clause using a subquery.
            </summary>
            <typeparam name="TKey">The type of the key to match.</typeparam>
            <param name="keySelector">The expression to extract the key from the main query.</param>
            <param name="subquery">The subquery to check membership against.</param>
            <returns>The current query builder for method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when keySelector or subquery is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.WhereInRaw``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Adds a WHERE IN clause using raw SQL for the subquery.
            </summary>
            <typeparam name="TKey">The type of the key to match.</typeparam>
            <param name="keySelector">The expression to extract the key from the main query.</param>
            <param name="subquerySql">The raw SQL subquery string.</param>
            <returns>The current query builder for method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when keySelector is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when subquerySql is null, empty, or whitespace</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.WhereNotInRaw``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Adds a WHERE NOT IN clause using raw SQL for the subquery.
            </summary>
            <typeparam name="TKey">The type of the key to match.</typeparam>
            <param name="keySelector">The expression to extract the key from the main query.</param>
            <param name="subquerySql">The raw SQL subquery string.</param>
            <returns>The current query builder for method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when keySelector is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when subquerySql is null, empty, or whitespace</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.WhereExists``1(Durable.IQueryBuilder{``0})">
            <summary>
            Adds a WHERE EXISTS clause using a subquery.
            </summary>
            <typeparam name="TOther">The type of the subquery entity.</typeparam>
            <param name="subquery">The subquery to check for existence.</param>
            <returns>The current query builder for method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when subquery is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.WhereNotExists``1(Durable.IQueryBuilder{``0})">
            <summary>
            Adds a WHERE NOT EXISTS clause using a subquery.
            </summary>
            <typeparam name="TOther">The type of the subquery entity.</typeparam>
            <param name="subquery">The subquery to check for non-existence.</param>
            <returns>The current query builder for method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when subquery is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.WithWindowFunction(System.String,System.String,System.String)">
            <summary>
            Adds a window function to the query.
            PostgreSQL has excellent support for window functions with sophisticated frame specifications.
            </summary>
            <param name="functionName">The name of the window function.</param>
            <param name="partitionBy">Optional PARTITION BY clause.</param>
            <param name="orderBy">Optional ORDER BY clause for the window.</param>
            <returns>A windowed query builder for further window operations.</returns>
            <exception cref="T:System.ArgumentException">Thrown when functionName is null or empty</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.WithCte(System.String,System.String)">
            <summary>
            Adds a Common Table Expression (CTE) to the query.
            PostgreSQL has excellent support for CTEs including recursive CTEs.
            </summary>
            <param name="cteName">The name of the CTE.</param>
            <param name="cteQuery">The SQL query for the CTE.</param>
            <returns>The current query builder for method chaining.</returns>
            <exception cref="T:System.ArgumentException">Thrown when cteName or cteQuery is null or empty</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.WithRecursiveCte(System.String,System.String,System.String)">
            <summary>
            Adds a recursive Common Table Expression (CTE) to the query.
            PostgreSQL has excellent support for recursive CTEs for hierarchical data processing.
            </summary>
            <param name="cteName">The name of the recursive CTE.</param>
            <param name="anchorQuery">The anchor query for the recursive CTE.</param>
            <param name="recursiveQuery">The recursive query for the CTE.</param>
            <returns>The current query builder for method chaining.</returns>
            <exception cref="T:System.ArgumentException">Thrown when cteName, anchorQuery, or recursiveQuery is null or empty</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.WhereRaw(System.String,System.Object[])">
            <summary>
            Adds a raw SQL WHERE clause with optional parameters.
            </summary>
            <param name="sql">The raw SQL condition.</param>
            <param name="parameters">Optional parameters for the SQL.</param>
            <returns>The current query builder for method chaining.</returns>
            <exception cref="T:System.ArgumentException">Thrown when sql is empty or whitespace</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.SelectRaw(System.String)">
            <summary>
            Adds a raw SQL SELECT clause.
            </summary>
            <param name="sql">The raw SQL select statement.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.SelectCase">
            <summary>
            Begins building a CASE expression for conditional logic in the SELECT clause.
            </summary>
            <returns>A case expression builder for constructing WHEN/THEN/ELSE logic</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.FromRaw(System.String)">
            <summary>
            Specifies a raw SQL FROM clause.
            </summary>
            <param name="sql">The raw SQL from statement.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.JoinRaw(System.String)">
            <summary>
            Adds a raw SQL JOIN clause.
            </summary>
            <param name="sql">The raw SQL join statement.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.Execute">
            <summary>
            Executes the query and returns the results.
            </summary>
            <returns>The query results as an enumerable sequence.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the query and returns the results.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with query results.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.ExecuteAsyncEnumerable(System.Threading.CancellationToken)">
            <summary>
            Executes the query and returns results as an asynchronous enumerable stream.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>The query results as an asynchronous enumerable sequence.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.ExecuteWithQuery">
            <summary>
            Executes the query and returns both the results and the executed SQL query.
            </summary>
            <returns>A durable result containing both query and results.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.ExecuteWithQueryAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the query and returns both the results and the executed SQL query.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with durable result.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.ExecuteAsyncEnumerableWithQuery(System.Threading.CancellationToken)">
            <summary>
            Executes the query as an asynchronous enumerable and exposes the executed SQL query.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>An asynchronous durable result containing both query and streaming results.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.BuildSql">
            <summary>
            Builds and returns the SQL query string for debugging purposes.
            </summary>
            <returns>The SQL query string.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.Count">
            <summary>
            Counts the number of entities matching the query.
            </summary>
            <returns>The count of matching entities.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously counts the number of entities matching the query.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with the count of matching entities.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.Sum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Calculates the sum of a numeric property for entities matching the query.
            </summary>
            <typeparam name="TProperty">The type of the property to sum.</typeparam>
            <param name="selector">The expression to select the property to sum.</param>
            <returns>The sum of the property values.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.SumAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the sum of a numeric property for entities matching the query.
            </summary>
            <typeparam name="TProperty">The type of the property to sum.</typeparam>
            <param name="selector">The expression to select the property to sum.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with the sum of the property values.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.Average``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Calculates the average of a numeric property for entities matching the query.
            </summary>
            <typeparam name="TProperty">The type of the property to average.</typeparam>
            <param name="selector">The expression to select the property to average.</param>
            <returns>The average of the property values.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.AverageAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the average of a numeric property for entities matching the query.
            </summary>
            <typeparam name="TProperty">The type of the property to average.</typeparam>
            <param name="selector">The expression to select the property to average.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with the average of the property values.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Finds the minimum value of a property for entities matching the query.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="selector">The expression to select the property.</param>
            <returns>The minimum property value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously finds the minimum value of a property for entities matching the query.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="selector">The expression to select the property.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with the minimum property value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Finds the maximum value of a property for entities matching the query.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="selector">The expression to select the property.</param>
            <returns>The maximum property value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously finds the maximum value of a property for entities matching the query.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="selector">The expression to select the property.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with the maximum property value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.Delete">
            <summary>
            Deletes all entities matching the query.
            </summary>
            <returns>The number of entities deleted.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes all entities matching the query.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with the number of entities deleted.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.BuildSql(System.Boolean)">
            <summary>
            Internal method to build the SQL query with options.
            </summary>
            <param name="includeGroupBy">Whether to include GROUP BY clauses</param>
            <returns>The constructed SQL query string</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.GetIncludePaths">
            <summary>
            Gets the current include paths for navigation property loading.
            Used by PostgresGroupedQueryBuilder for entity fetching after group filtering.
            </summary>
            <returns>A list of include paths</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.ExecuteWithoutGroupBy">
            <summary>
            Executes the query without GROUP BY clauses for grouped query operations.
            Used by PostgresGroupedQueryBuilder for entity fetching after group filtering.
            </summary>
            <returns>An enumerable of query results</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.ExecuteWithoutGroupByAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the query without GROUP BY clauses for grouped query operations.
            Used by PostgresGroupedQueryBuilder for entity fetching after group filtering.
            </summary>
            <param name="token">Cancellation token</param>
            <returns>An enumerable of query results</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.AddWindowFunction(Durable.WindowFunction)">
            <summary>
            Adds a window function to the query.
            Used by PostgresWindowedQueryBuilder to register window functions.
            </summary>
            <param name="windowFunction">The window function to add</param>
            <exception cref="T:System.ArgumentNullException">Thrown when windowFunction is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresQueryBuilder`1.AddCaseExpression(System.String)">
            <summary>
            Adds a CASE expression to the query.
            Used by PostgresCaseExpressionBuilder to register CASE expressions.
            </summary>
            <param name="caseExpressionSql">The complete CASE expression SQL string to add</param>
            <exception cref="T:System.ArgumentNullException">Thrown when caseExpressionSql is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when caseExpressionSql is empty or whitespace</exception>
        </member>
        <member name="T:Durable.Postgres.PostgresRepository`1">
            <summary>
            PostgreSQL Repository Implementation with Full Transaction Support and Connection Pooling.
            Provides comprehensive data access operations for entities with support for optimistic concurrency,
            batch operations, SQL capture, and advanced querying capabilities.
            </summary>
            <typeparam name="T">The entity type that this repository manages. Must be a class with a parameterless constructor.</typeparam>
        </member>
        <member name="P:Durable.Postgres.PostgresRepository`1.LastExecutedSql">
            <summary>
            Gets the last SQL statement that was executed by this repository instance.
            Returns null if no SQL has been executed or SQL capture is disabled.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresRepository`1.LastExecutedSqlWithParameters">
            <summary>
            Gets the last SQL statement with parameter values substituted that was executed by this repository instance.
            This provides a fully executable SQL statement with actual parameter values for debugging purposes.
            Returns null if no SQL has been executed or SQL capture is disabled.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresRepository`1.CaptureSql">
            <summary>
            Gets or sets whether SQL statements should be captured and stored.
            Default value is false for performance reasons.
            This property is thread-safe and can be safely accessed from multiple threads.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresRepository`1.IncludeQueryInResults">
            <summary>
            Gets or sets whether query results should automatically include the executed SQL statement.
            When true, repository operations will return IDurableResult objects containing both results and SQL.
            When false, repository operations return standard result types without SQL information.
            Default value is false for performance and backward compatibility.
            This property is thread-safe and can be safely accessed from multiple threads.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresRepository`1.MaxRowsPerBatch">
            <summary>
            Gets the maximum number of rows to include in a single multi-row INSERT statement.
            PostgreSQL can handle large batches efficiently, default is 1000 rows.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresRepository`1.MaxParametersPerStatement">
            <summary>
            Gets the maximum number of parameters per INSERT statement.
            PostgreSQL has a high limit for parameters, default is 65535.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresRepository`1.EnablePreparedStatementReuse">
            <summary>
            Gets whether to use prepared statement reuse for batch operations.
            PostgreSQL benefits from prepared statement reuse.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresRepository`1.EnableMultiRowInsert">
            <summary>
            Gets whether to use multi-row INSERT syntax when possible.
            PostgreSQL has excellent support for multi-row INSERT statements.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresRepository`1.Settings">
            <summary>
            Gets the repository settings used to configure the connection
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.#ctor(System.String,Durable.IBatchInsertConfiguration,Durable.IDataTypeConverter,Durable.IConcurrencyConflictResolver{`0})">
            <summary>
            Initializes a new instance of the PostgresRepository with a connection string and optional configuration.
            Creates an internal PostgresConnectionFactory for connection management.
            </summary>
            <param name="connectionString">The PostgreSQL connection string used to connect to the database.</param>
            <param name="batchConfig">Optional batch insert configuration settings. Uses default settings if null.</param>
            <param name="dataTypeConverter">Optional data type converter for custom type handling. Uses default converter if null.</param>
            <param name="conflictResolver">Optional concurrency conflict resolver. Uses default resolver with ThrowException strategy if null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when connectionString is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the entity type T lacks required attributes (Entity, primary key).</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.#ctor(Durable.Postgres.PostgresRepositorySettings,Durable.IBatchInsertConfiguration,Durable.IDataTypeConverter,Durable.IConcurrencyConflictResolver{`0})">
            <summary>
            Initializes a new instance of the PostgresRepository with repository settings and optional configuration.
            Creates an internal PostgresConnectionFactory using the connection string built from settings.
            </summary>
            <param name="settings">The PostgreSQL repository settings to use for configuration.</param>
            <param name="batchConfig">Optional batch insert configuration settings. Uses default settings if null.</param>
            <param name="dataTypeConverter">Optional data type converter for custom type handling. Uses default converter if null.</param>
            <param name="conflictResolver">Optional concurrency conflict resolver. Uses default resolver with ThrowException strategy if null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when settings is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the entity type T lacks required attributes (Entity, primary key), or when settings are invalid.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.#ctor(Durable.IConnectionFactory,Durable.IBatchInsertConfiguration,Durable.IDataTypeConverter,Durable.IConcurrencyConflictResolver{`0})">
            <summary>
            Initializes a new instance of the PostgresRepository with a provided connection factory and optional configuration.
            Allows for shared connection pooling and factory management across multiple repository instances.
            Note: When using this constructor, the Settings property will be null as no connection string is directly provided.
            </summary>
            <param name="connectionFactory">The connection factory to use for database connections.</param>
            <param name="batchConfig">Optional batch insert configuration settings. Uses default settings if null.</param>
            <param name="dataTypeConverter">Optional data type converter for custom type handling. Uses default converter if null.</param>
            <param name="conflictResolver">Optional concurrency conflict resolver. Uses default resolver with ThrowException strategy if null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when connectionFactory is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the entity type T lacks required attributes (Entity, primary key).</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ReadFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Returns the first entity that matches the specified predicate, or throws an exception if no entity is found.
            </summary>
            <param name="predicate">Optional expression to filter entities. If null, returns the first entity in the table.</param>
            <param name="transaction">Optional transaction context for the operation.</param>
            <returns>The first entity that matches the predicate.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when no entities match the predicate.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ReadFirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Returns the first entity that matches the specified predicate, or default if no entity is found.
            </summary>
            <param name="predicate">Optional expression to filter entities. If null, returns the first entity in the table.</param>
            <param name="transaction">Optional transaction context for the operation.</param>
            <returns>The first entity that matches the predicate, or default(T) if no entity is found.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ReadSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Returns the only entity that matches the specified predicate, and throws an exception if there is not exactly one entity.
            </summary>
            <param name="predicate">Expression to filter entities. Cannot be null.</param>
            <param name="transaction">Optional transaction context for the operation.</param>
            <returns>The single entity that matches the predicate.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when zero or more than one entity matches the predicate.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ReadSingleOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Returns the only entity that matches the specified predicate, or default if no such entity exists; this method throws an exception if more than one entity matches the predicate.
            </summary>
            <param name="predicate">Expression to filter entities. Cannot be null.</param>
            <param name="transaction">Optional transaction context for the operation.</param>
            <returns>The single entity that matches the predicate, or default(T) if no entity is found.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when more than one entity matches the predicate.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ReadMany(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Reads multiple entities that match the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities. If null, returns all entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>A collection of entities that match the predicate.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ReadAll(Durable.ITransaction)">
            <summary>
            Reads all entities from the database.
            </summary>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>A collection of all entities.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ReadById(System.Object,Durable.ITransaction)">
            <summary>
            Reads an entity by its identifier.
            </summary>
            <param name="id">The identifier of the entity to read.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The entity with the specified identifier.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ReadFirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the first entity that matches the specified predicate, or throws an exception if no entity is found.
            </summary>
            <param name="predicate">Optional expression to filter entities. If null, returns the first entity in the table.</param>
            <param name="transaction">Optional transaction context for the operation.</param>
            <param name="token">Cancellation token to support operation cancellation.</param>
            <returns>A task that represents the asynchronous operation containing the first entity that matches the predicate.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when no entities match the predicate.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ReadFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the first entity that matches the specified predicate, or default if no entity is found.
            </summary>
            <param name="predicate">Optional expression to filter entities. If null, returns the first entity in the table.</param>
            <param name="transaction">Optional transaction context for the operation.</param>
            <param name="token">Cancellation token to support operation cancellation.</param>
            <returns>A task that represents the asynchronous operation containing the first entity that matches the predicate, or default(T) if no entity is found.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ReadSingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the only entity that matches the specified predicate, and throws an exception if there is not exactly one entity.
            </summary>
            <param name="predicate">Expression to filter entities. Cannot be null.</param>
            <param name="transaction">Optional transaction context for the operation.</param>
            <param name="token">Cancellation token to support operation cancellation.</param>
            <returns>A task that represents the asynchronous operation containing the single entity that matches the predicate.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when zero or more than one entity matches the predicate.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ReadSingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the only entity that matches the specified predicate, or default if no such entity exists; this method throws an exception if more than one entity matches the predicate.
            </summary>
            <param name="predicate">Expression to filter entities. Cannot be null.</param>
            <param name="transaction">Optional transaction context for the operation.</param>
            <param name="token">Cancellation token to support operation cancellation.</param>
            <returns>A task that represents the asynchronous operation containing the single entity that matches the predicate, or default(T) if no entity is found.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when more than one entity matches the predicate.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ReadManyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads multiple entities that match the specified predicate.
            </summary>
            <param name="predicate">Optional predicate to filter entities. If null, returns all entities.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>An async enumerable of entities that match the predicate.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ReadAllAsync(Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads all entities from the database.
            </summary>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>An async enumerable of all entities.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ReadByIdAsync(System.Object,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads an entity by its identifier.
            </summary>
            <param name="id">The primary key value of the entity to read.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>The entity with the specified identifier, or null if not found.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when id is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Determines whether any entity matches the specified predicate.
            </summary>
            <param name="predicate">Expression to filter entities. Cannot be null.</param>
            <param name="transaction">Optional transaction context for the operation.</param>
            <returns>True if any entity matches the predicate; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate is null.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ExistsById(System.Object,Durable.ITransaction)">
            <summary>
            Determines whether an entity with the specified primary key exists.
            </summary>
            <param name="id">The primary key value to search for. Cannot be null.</param>
            <param name="transaction">Optional transaction context for the operation.</param>
            <returns>True if an entity with the specified primary key exists; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when id is null.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously determines whether any entity matches the specified predicate.
            </summary>
            <param name="predicate">The predicate to test entities against.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>True if any entity matches the predicate, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ExistsByIdAsync(System.Object,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously determines whether an entity with the specified primary key exists.
            </summary>
            <param name="id">The primary key value to search for. Cannot be null.</param>
            <param name="transaction">Optional transaction context for the operation.</param>
            <param name="token">Cancellation token to support operation cancellation.</param>
            <returns>A task that represents the asynchronous operation containing true if an entity with the specified primary key exists; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when id is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Counts the number of entities that match the specified predicate.
            </summary>
            <param name="predicate">Optional predicate to filter entities. If null, counts all entities.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <returns>The number of entities that match the predicate.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously counts the number of entities that match the specified predicate.
            </summary>
            <param name="predicate">Optional predicate to filter entities. If null, counts all entities.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>The number of entities that match the predicate.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Finds the maximum value of the specified property among entities that match the predicate.
            </summary>
            <typeparam name="TResult">The type of the property to find the maximum value for.</typeparam>
            <param name="selector">Expression selecting the property to find the maximum value for.</param>
            <param name="predicate">Optional predicate to filter entities. If null, considers all entities.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <returns>The maximum value of the selected property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when SQL execution fails.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Finds the minimum value of the specified property among entities that match the predicate.
            </summary>
            <typeparam name="TResult">The type of the property to find the minimum value for.</typeparam>
            <param name="selector">Expression selecting the property to find the minimum value for.</param>
            <param name="predicate">Optional predicate to filter entities. If null, considers all entities.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <returns>The minimum value of the selected property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when SQL execution fails.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Calculates the average value of the specified decimal property among entities that match the predicate.
            </summary>
            <param name="selector">Expression selecting the decimal property to calculate the average for.</param>
            <param name="predicate">Optional predicate to filter entities. If null, considers all entities.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <returns>The average value of the selected property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when SQL execution fails.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Calculates the sum of the specified decimal property among entities that match the predicate.
            </summary>
            <param name="selector">Expression selecting the decimal property to calculate the sum for.</param>
            <param name="predicate">Optional predicate to filter entities. If null, considers all entities.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <returns>The sum of the selected property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when SQL execution fails.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously finds the maximum value of the specified property among entities that match the predicate.
            </summary>
            <typeparam name="TResult">The type of the property to find the maximum value for.</typeparam>
            <param name="selector">Expression selecting the property to find the maximum value for.</param>
            <param name="predicate">Optional predicate to filter entities. If null, considers all entities.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>The maximum value of the selected property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when SQL execution fails.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously finds the minimum value of the specified property among entities that match the predicate.
            </summary>
            <typeparam name="TResult">The type of the property to find the minimum value for.</typeparam>
            <param name="selector">Expression selecting the property to find the minimum value for.</param>
            <param name="predicate">Optional predicate to filter entities. If null, considers all entities.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>The minimum value of the selected property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when SQL execution fails.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the average value of the specified decimal property among entities that match the predicate.
            </summary>
            <param name="selector">Expression selecting the decimal property to calculate the average for.</param>
            <param name="predicate">Optional predicate to filter entities. If null, considers all entities.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>The average value of the selected property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when SQL execution fails.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the sum of the specified decimal property among entities that match the predicate.
            </summary>
            <param name="selector">Expression selecting the decimal property to calculate the sum for.</param>
            <param name="predicate">Optional predicate to filter entities. If null, considers all entities.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>The sum of the selected property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when selector is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when SQL execution fails.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.Create(`0,Durable.ITransaction)">
            <summary>
            Creates a new entity in the database.
            </summary>
            <param name="entity">The entity to create.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <returns>The created entity with any auto-generated values populated.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when entity is null.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.CreateMany(System.Collections.Generic.IEnumerable{`0},Durable.ITransaction)">
            <summary>
            Creates multiple entities in the database.
            </summary>
            <param name="entities">The collection of entities to create.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <returns>The created entities with any auto-generated values populated.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when entities is null.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.CreateAsync(`0,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a new entity in the database.
            </summary>
            <param name="entity">The entity to create.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>The created entity with any auto-generated values populated.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when entity is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.CreateManyAsync(System.Collections.Generic.IEnumerable{`0},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates multiple entities in the database.
            </summary>
            <param name="entities">The collection of entities to create.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>The created entities with any auto-generated values populated.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when entities is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.Update(`0,Durable.ITransaction)">
            <summary>
            Updates an existing entity in the database.
            </summary>
            <param name="entity">The entity to update.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <returns>The updated entity.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when entity is null.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.UpdateMany(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{`0},Durable.ITransaction)">
            <summary>
            Updates multiple entities that match the specified predicate by applying an update action to each.
            </summary>
            <param name="predicate">The predicate to filter entities to update.</param>
            <param name="updateAction">The action to apply to each entity before updating.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <returns>The number of entities that were updated.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate or updateAction is null.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.UpdateField``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,Durable.ITransaction)">
            <summary>
            Updates a specific field for all entities that match the specified predicate.
            </summary>
            <typeparam name="TField">The type of the field to update.</typeparam>
            <param name="predicate">The predicate to filter entities to update.</param>
            <param name="field">Expression selecting the field to update.</param>
            <param name="value">The new value to set for the field.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <returns>The number of entities that were updated.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate or field is null.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.UpdateAsync(`0,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates an existing entity in the database.
            </summary>
            <param name="entity">The entity to update.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>The updated entity.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when entity is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when entity has null primary key or no rows were affected.</exception>
            <exception cref="T:Durable.OptimisticConcurrencyException">Thrown when version-based concurrency conflict occurs.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.UpdateManyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,System.Threading.Tasks.Task},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates multiple entities that match the specified predicate by applying an async update action to each.
            </summary>
            <param name="predicate">The predicate to filter entities to update.</param>
            <param name="updateAction">The async action to apply to each entity before updating.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>The number of entities that were updated.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate or updateAction is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.UpdateFieldAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a specific field for all entities that match the specified predicate.
            </summary>
            <typeparam name="TField">The type of the field to update.</typeparam>
            <param name="predicate">The predicate to filter entities to update.</param>
            <param name="field">Expression selecting the field to update.</param>
            <param name="value">The new value to set for the field.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>The number of entities that were updated.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate or field is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.BatchUpdate(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},Durable.ITransaction)">
            <summary>
            Performs a batch update operation using an expression to define the update logic.
            </summary>
            <param name="predicate">The predicate to filter entities to update.</param>
            <param name="updateExpression">Expression defining how to update the entity (e.g., x => new Entity { Name = "NewName", Status = x.Status }).</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <returns>The number of entities that were updated.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate or updateExpression is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when updateExpression format is not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.BatchDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Performs a batch delete operation for entities matching the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities to delete.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <returns>The number of entities that were deleted.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate is null.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.BatchUpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs a batch update operation using an expression to define the update logic.
            </summary>
            <param name="predicate">The predicate to filter entities to update.</param>
            <param name="updateExpression">Expression defining how to update the entity (e.g., x => new Entity { Name = "NewName", Status = x.Status }).</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>The number of entities that were updated.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate or updateExpression is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when updateExpression format is not supported.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.BatchDeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs a batch delete operation for entities matching the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities to delete.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>The number of entities that were deleted.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.Delete(`0,Durable.ITransaction)">
            <summary>
            Deletes an entity from the database.
            </summary>
            <param name="entity">The entity to delete.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <returns>True if the entity was deleted, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when entity is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the entity has a null primary key.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.DeleteById(System.Object,Durable.ITransaction)">
            <summary>
            Deletes an entity by its identifier.
            </summary>
            <param name="id">The identifier of the entity to delete.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <returns>True if the entity was deleted, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when id is null.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.DeleteMany(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Deletes multiple entities that match the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities to delete.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <returns>The number of entities deleted.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate is null.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.DeleteAll(Durable.ITransaction)">
            <summary>
            Deletes all entities from the database.
            </summary>
            <param name="transaction">Optional transaction to execute within.</param>
            <returns>The number of entities deleted.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.DeleteAsync(`0,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes an entity from the database.
            </summary>
            <param name="entity">The entity to delete.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>True if the entity was deleted, false if no rows were affected.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when entity is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when entity has null primary key.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.DeleteByIdAsync(System.Object,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes an entity by its identifier.
            </summary>
            <param name="id">The primary key value of the entity to delete.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>True if the entity was deleted, false if no rows were affected.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when id is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.DeleteManyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes multiple entities that match the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities to delete.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>The number of entities that were deleted.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when predicate is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.DeleteAllAsync(Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes all entities from the database.
            </summary>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token for the async operation.</param>
            <returns>The number of entities that were deleted.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.Upsert(`0,Durable.ITransaction)">
            <summary>
            Inserts a new entity or updates an existing entity if it already exists in the repository.
            Uses PostgreSQL's INSERT ... ON CONFLICT DO UPDATE syntax for atomic upsert operations.
            </summary>
            <param name="entity">The entity to insert or update. Cannot be null.</param>
            <param name="transaction">Optional transaction context for the operation. If null, the operation runs in its own transaction.</param>
            <returns>The entity after the upsert operation, with any generated values populated</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when entity is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the upsert operation fails</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.UpsertMany(System.Collections.Generic.IEnumerable{`0},Durable.ITransaction)">
            <summary>
            Inserts or updates multiple entities depending on whether they already exist in the repository.
            Uses PostgreSQL's INSERT ... ON CONFLICT DO UPDATE syntax within a transaction for consistency.
            </summary>
            <param name="entities">The collection of entities to insert or update. Cannot be null.</param>
            <param name="transaction">Optional transaction context for the operation. If null, a new transaction is created for the operation.</param>
            <returns>The entities after the upsert operation, with any generated values populated</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when entities is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the upsert operation fails</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.UpsertAsync(`0,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts a new entity or updates an existing entity if it already exists in the repository.
            Uses PostgreSQL's INSERT ... ON CONFLICT DO UPDATE syntax for atomic upsert operations.
            </summary>
            <param name="entity">The entity to insert or update. Cannot be null.</param>
            <param name="transaction">Optional transaction context for the operation. If null, the operation runs in its own transaction.</param>
            <param name="token">Cancellation token to support operation cancellation.</param>
            <returns>A task that represents the asynchronous operation containing the entity after the upsert operation, with any generated values populated</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when entity is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the upsert operation fails</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.UpsertManyAsync(System.Collections.Generic.IEnumerable{`0},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts or updates multiple entities depending on whether they already exist in the repository.
            Uses PostgreSQL's INSERT ... ON CONFLICT DO UPDATE syntax within a transaction for consistency.
            </summary>
            <param name="entities">The collection of entities to insert or update. Cannot be null.</param>
            <param name="transaction">Optional transaction context for the operation. If null, a new transaction is created for the operation.</param>
            <param name="token">Cancellation token to support operation cancellation.</param>
            <returns>A task that represents the asynchronous operation containing the entities after the upsert operation, with any generated values populated</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when entities is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the upsert operation fails</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.FromSql(System.String,Durable.ITransaction,System.Object[])">
            <summary>
            Executes a raw SQL query and returns the results as entities of type T.
            </summary>
            <param name="sql">The raw SQL query to execute.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="parameters">Parameters for the SQL query.</param>
            <returns>An enumerable collection of entities returned by the query.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when sql is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when query execution fails.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.FromSql``1(System.String,Durable.ITransaction,System.Object[])">
            <summary>
            Executes a raw SQL query and returns the results as entities of the specified type.
            </summary>
            <typeparam name="TResult">The type to map the query results to. Must have a parameterless constructor.</typeparam>
            <param name="sql">The raw SQL query to execute.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="parameters">Parameters for the SQL query.</param>
            <returns>An enumerable collection of entities of the specified type returned by the query.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when sql is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when query execution fails.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ExecuteSql(System.String,Durable.ITransaction,System.Object[])">
            <summary>
            Executes a raw SQL command and returns the number of rows affected.
            </summary>
            <param name="sql">The raw SQL command to execute.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="parameters">Parameters for the SQL command.</param>
            <returns>The number of rows affected by the command.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when sql is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when command execution fails.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.FromSqlAsync(System.String,Durable.ITransaction,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Asynchronously executes a raw SQL query and returns the results as an async enumerable of entities of type T.
            </summary>
            <param name="sql">The raw SQL query to execute.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token to cancel the operation.</param>
            <param name="parameters">Parameters for the SQL query.</param>
            <returns>An async enumerable collection of entities returned by the query.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when sql is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when query execution fails.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.FromSqlAsync``1(System.String,Durable.ITransaction,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Asynchronously executes a raw SQL query and returns the results as an async enumerable of entities of the specified type.
            </summary>
            <typeparam name="TResult">The type to map the query results to. Must have a parameterless constructor.</typeparam>
            <param name="sql">The raw SQL query to execute.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token to cancel the operation.</param>
            <param name="parameters">Parameters for the SQL query.</param>
            <returns>An async enumerable collection of entities of the specified type returned by the query.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when sql is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when query execution fails.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ExecuteSqlAsync(System.String,Durable.ITransaction,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Asynchronously executes a raw SQL command and returns the number of rows affected.
            </summary>
            <param name="sql">The raw SQL command to execute.</param>
            <param name="transaction">Optional transaction to execute within.</param>
            <param name="token">Cancellation token to cancel the operation.</param>
            <param name="parameters">Parameters for the SQL command.</param>
            <returns>A task that represents the asynchronous operation containing the number of rows affected by the command.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when sql is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when command execution fails.</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.Query(Durable.ITransaction)">
            <summary>
            Creates a query builder for building and executing complex queries.
            </summary>
            <param name="transaction">Optional transaction to execute within.</param>
            <returns>A query builder instance for the entity type.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.BeginTransaction">
            <summary>
            Begins a new database transaction.
            </summary>
            <returns>A new transaction instance.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.BeginTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously begins a new database transaction.
            </summary>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with a new transaction instance.</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.Dispose">
            <summary>
            Disposes the repository and its resources. If this instance owns the connection factory, it will also be disposed.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.GetConnection">
            <summary>
            Gets a connection from the connection factory.
            Note: The caller is responsible for disposing the connection.
            </summary>
            <returns>A PostgreSQL connection</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.GetConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a connection from the connection factory.
            Note: The caller is responsible for disposing the connection.
            </summary>
            <param name="cancellationToken">Cancellation token for the async operation</param>
            <returns>A PostgreSQL connection</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.GetPrimaryKeyValue(`0)">
            <summary>
            Gets the primary key value from an entity instance.
            </summary>
            <param name="entity">The entity to extract the primary key from</param>
            <returns>The primary key value</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when entity is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.GetEntityName">
            <summary>
            Gets the name of the entity/table for this repository.
            </summary>
            <returns>The entity name or table name</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.GetColumnMappings">
            <summary>
            Gets the column-to-property mappings for this entity type.
            </summary>
            <returns>A dictionary mapping column names to PropertyInfo objects</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.GetForeignKeys">
            <summary>
            Gets the foreign key relationships for this entity type.
            </summary>
            <returns>A dictionary mapping properties to their foreign key attributes</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.GetNavigationProperties">
            <summary>
            Gets the navigation properties for this entity type.
            </summary>
            <returns>A dictionary mapping properties to their navigation property attributes</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.GetVersionColumnInfo">
            <summary>
            Gets the version column information for optimistic concurrency control.
            </summary>
            <returns>Version column information or null if not available</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.GetDefaultValueProviders">
            <summary>
            Gets the default value providers for properties with DefaultValueAttribute.
            </summary>
            <returns>A dictionary mapping PropertyInfo to (DefaultValueAttribute, IDefaultValueProvider)</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.MapReaderToType``1(System.Data.IDataReader)">
            <summary>
            Maps a database reader to a specific result type.
            </summary>
            <typeparam name="TResult">The type to map to</typeparam>
            <param name="reader">The database reader containing the data</param>
            <returns>A mapped instance of the result type</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.InitializeTable(System.Type,Durable.ITransaction)">
            <inheritdoc/>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.InitializeTableAsync(System.Type,Durable.ITransaction,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.InitializeTables(System.Collections.Generic.IEnumerable{System.Type},Durable.ITransaction)">
            <inheritdoc/>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.InitializeTablesAsync(System.Collections.Generic.IEnumerable{System.Type},Durable.ITransaction,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ValidateTable(System.Type,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <inheritdoc/>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.ValidateTables(System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <inheritdoc/>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.CreateIndexes(System.Type,Durable.ITransaction)">
            <inheritdoc/>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.CreateIndexesAsync(System.Type,Durable.ITransaction,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.DropIndex(System.String,Durable.ITransaction)">
            <inheritdoc/>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.DropIndexAsync(System.String,Durable.ITransaction,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.GetIndexes(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.GetIndexesAsync(System.Type,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.CreateDatabaseIfNotExists">
            <inheritdoc/>
        </member>
        <member name="M:Durable.Postgres.PostgresRepository`1.CreateDatabaseIfNotExistsAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Durable.Postgres.PostgresRepositorySettings">
            <summary>
            Connection settings for PostgreSQL repositories
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresRepositorySettings.Type">
            <summary>
            The type of repository
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresRepositorySettings.ConnectionTimeout">
            <summary>
            The connection timeout in seconds. Default: null (uses PostgreSQL default of 15 seconds)
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresRepositorySettings.CommandTimeout">
            <summary>
            The command timeout in seconds. Default: null (uses PostgreSQL default of 30 seconds)
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresRepositorySettings.MinPoolSize">
            <summary>
            The minimum pool size. Default: null (uses PostgreSQL default of 0)
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresRepositorySettings.MaxPoolSize">
            <summary>
            The maximum pool size. Default: null (uses PostgreSQL default of 100)
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresRepositorySettings.Pooling">
            <summary>
            Whether to use connection pooling. Default: null (uses PostgreSQL default of true)
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresRepositorySettings.SslMode">
            <summary>
            The SSL mode. Default: null (uses PostgreSQL default)
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresRepositorySettings.#ctor">
            <summary>
            Initializes a new instance of the PostgresRepositorySettings class
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresRepositorySettings.Parse(System.String)">
            <summary>
            Parses a PostgreSQL connection string and returns a PostgresRepositorySettings instance
            </summary>
            <param name="connectionString">The connection string to parse</param>
            <returns>A PostgresRepositorySettings instance</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when connectionString is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when connectionString is empty or whitespace, or when the connection string is invalid</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepositorySettings.BuildConnectionString">
            <summary>
            Builds a PostgreSQL connection string from the current settings
            </summary>
            <returns>A PostgreSQL connection string</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when required properties (Hostname, Database) are null or empty</exception>
        </member>
        <member name="T:Durable.Postgres.PostgresRepositoryTransaction">
            <summary>
            PostgreSQL-specific implementation of ITransaction for managing database transactions with savepoint support.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresRepositoryTransaction.Connection">
            <summary>
            Gets the database connection associated with this transaction.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresRepositoryTransaction.Transaction">
            <summary>
            Gets the underlying database transaction.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresRepositoryTransaction.#ctor(Npgsql.NpgsqlConnection,Npgsql.NpgsqlTransaction,Durable.IConnectionFactory)">
            <summary>
            Initializes a new instance of the PostgresRepositoryTransaction class.
            </summary>
            <param name="connection">The PostgreSQL connection for this transaction</param>
            <param name="transaction">The PostgreSQL transaction instance</param>
            <param name="connectionFactory">The connection factory for returning connections</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any parameter is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepositoryTransaction.Commit">
            <summary>
            Commits the transaction, making all changes permanent.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown when the transaction has been disposed</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepositoryTransaction.CommitAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously commits the transaction, making all changes permanent.
            </summary>
            <param name="token">A cancellation token that can be used to cancel the operation</param>
            <returns>A task that represents the asynchronous commit operation</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the transaction has been disposed</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepositoryTransaction.Rollback">
            <summary>
            Rolls back the transaction, undoing all changes made within the transaction.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown when the transaction has been disposed</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepositoryTransaction.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously rolls back the transaction, undoing all changes made within the transaction.
            </summary>
            <param name="token">A cancellation token that can be used to cancel the operation</param>
            <returns>A task that represents the asynchronous rollback operation</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the transaction has been disposed</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepositoryTransaction.CreateSavepoint(System.String)">
            <summary>
            Creates a savepoint within the transaction.
            </summary>
            <param name="name">The optional name for the savepoint. If null, a name will be generated.</param>
            <returns>An ISavepoint representing the created savepoint</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the transaction has been disposed</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the connection is not open</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepositoryTransaction.CreateSavepointAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a savepoint within the transaction.
            </summary>
            <param name="name">The optional name for the savepoint. If null, a name will be generated.</param>
            <param name="token">A cancellation token that can be used to cancel the operation</param>
            <returns>A task that returns an ISavepoint representing the created savepoint</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the transaction has been disposed</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the connection is not open</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresRepositoryTransaction.Dispose">
            <summary>
            Disposes of the transaction and returns the connection to the connection factory.
            </summary>
        </member>
        <member name="T:Durable.Postgres.PostgresSanitizer">
            <summary>
            PostgreSQL-specific implementation of ISanitizer that provides secure sanitization
            of values to prevent SQL injection attacks.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresSanitizer.SanitizeString(System.String)">
            <summary>
            Sanitizes a string value for safe insertion into SQL queries.
            Uses proper PostgreSQL escaping to prevent injection attacks.
            </summary>
            <param name="value">The string value to sanitize</param>
            <returns>A sanitized string safe for SQL insertion</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresSanitizer.SanitizeLikeValue(System.String)">
            <summary>
            Sanitizes a string value for use in LIKE operations.
            Handles both SQL injection prevention and LIKE special characters.
            </summary>
            <param name="value">The string value to sanitize for LIKE operations</param>
            <returns>A sanitized string safe for LIKE operations</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresSanitizer.SanitizeIdentifier(System.String)">
            <summary>
            Sanitizes an identifier (table name, column name, etc.) for safe insertion into SQL.
            Uses PostgreSQL double quote notation for identifiers that might contain special characters.
            </summary>
            <param name="identifier">The identifier to sanitize</param>
            <returns>A sanitized identifier safe for SQL insertion</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresSanitizer.RequiresSanitization(System.Object)">
            <summary>
            Determines if a value requires sanitization based on its type.
            Safe types like Guid, numeric types, etc. don't need string sanitization.
            </summary>
            <param name="value">The value to check</param>
            <returns>True if the value needs sanitization, false otherwise</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresSanitizer.FormatValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Formats a value for safe SQL insertion, applying sanitization as needed.
            This is the main method that should be used for formatting any value.
            Handles PostgreSQL-specific types including arrays, JSON, UUID, timestamps, and geometric types.
            </summary>
            <param name="value">The value to format</param>
            <param name="propertyInfo">Optional property information for attribute-based formatting hints.</param>
            <returns>A safely formatted value for SQL insertion</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresSanitizer.FormatArray(System.Array)">
            <summary>
            Formats a PostgreSQL array for SQL insertion.
            Supports multi-dimensional arrays and proper PostgreSQL array literal syntax.
            </summary>
            <param name="array">The array to format</param>
            <returns>A PostgreSQL array literal string</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresSanitizer.FormatJson(System.Object,System.Boolean)">
            <summary>
            Formats a JSON object or string for PostgreSQL insertion.
            </summary>
            <param name="jsonValue">The JSON value to format</param>
            <param name="isJsonB">Whether to format as JSONB (true) or JSON (false)</param>
            <returns>A formatted JSON value for SQL insertion</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresSanitizer.FormatGuid(System.Guid)">
            <summary>
            Formats a GUID for PostgreSQL UUID type.
            </summary>
            <param name="guid">The GUID to format</param>
            <returns>A formatted UUID string</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresSanitizer.FormatDateTime(System.DateTime)">
            <summary>
            Formats a DateTime for PostgreSQL timestamp insertion.
            </summary>
            <param name="dateTime">The DateTime to format</param>
            <returns>A formatted timestamp string</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresSanitizer.FormatDateTimeOffset(System.DateTimeOffset)">
            <summary>
            Formats a DateTimeOffset for PostgreSQL timestamptz insertion.
            </summary>
            <param name="dateTimeOffset">The DateTimeOffset to format</param>
            <returns>A formatted timestamptz string</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresSanitizer.FormatNpgsqlType(System.Object)">
            <summary>
            Formats PostgreSQL-specific NpgsqlTypes for SQL insertion.
            </summary>
            <param name="value">The NpgsqlTypes value to format</param>
            <returns>A formatted value string</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresSanitizer.IsReservedWord(System.String)">
            <summary>
            Checks if the given identifier is a PostgreSQL reserved word that requires quoting.
            </summary>
            <param name="identifier">The identifier to check (should be lowercase)</param>
            <returns>True if the identifier is a reserved word</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresSanitizer.FormatByteArray(System.Byte[])">
            <summary>
            Formats a byte array for PostgreSQL bytea insertion.
            </summary>
            <param name="bytes">The byte array to format</param>
            <returns>A formatted bytea literal for PostgreSQL</returns>
        </member>
        <member name="T:Durable.Postgres.PostgresSavepoint">
            <summary>
            PostgreSQL-specific implementation of ISavepoint for managing transaction savepoints.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresSavepoint.Name">
            <summary>
            Gets the name of the savepoint.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresSavepoint.#ctor(Npgsql.NpgsqlConnection,Npgsql.NpgsqlTransaction,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the PostgresSavepoint class.
            Creates the savepoint immediately using PostgreSQL SAVEPOINT syntax.
            </summary>
            <param name="connection">The PostgreSQL connection associated with the savepoint</param>
            <param name="transaction">The PostgreSQL transaction associated with the savepoint</param>
            <param name="name">The name of the savepoint</param>
            <param name="createImmediately">Whether to create the savepoint immediately via SQL</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any parameter is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when name is null or empty</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresSavepoint.Rollback">
            <summary>
            Rolls back the transaction to this savepoint.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown when the savepoint has been disposed</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the connection is not open</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresSavepoint.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously rolls back the transaction to this savepoint.
            </summary>
            <param name="token">A cancellation token that can be used to cancel the operation</param>
            <returns>A task that represents the asynchronous rollback operation</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the savepoint has been disposed</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the connection is not open</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresSavepoint.Release">
            <summary>
            Releases the savepoint, removing it from the transaction.
            Once released, the savepoint can no longer be used for rollback.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown when the savepoint has been disposed</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the connection is not open</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresSavepoint.ReleaseAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously releases the savepoint, removing it from the transaction.
            Once released, the savepoint can no longer be used for rollback.
            </summary>
            <param name="token">A cancellation token that can be used to cancel the operation</param>
            <returns>A task that represents the asynchronous release operation</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the savepoint has been disposed</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the connection is not open</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresSavepoint.Dispose">
            <summary>
            Disposes of the savepoint, automatically releasing it if it hasn't been released already.
            </summary>
        </member>
        <member name="T:Durable.Postgres.PostgresSchemaBuilder">
            <summary>
            Helper class for building PostgreSQL schema (CREATE TABLE) SQL from entity metadata
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresSchemaBuilder.#ctor(Durable.ISanitizer,Durable.IDataTypeConverter)">
            <summary>
            Initializes a new instance of the PostgresSchemaBuilder class
            </summary>
            <param name="sanitizer">The sanitizer for SQL identifiers</param>
            <param name="dataTypeConverter">The data type converter for SQL type mapping</param>
        </member>
        <member name="M:Durable.Postgres.PostgresSchemaBuilder.BuildCreateTableSql(System.Type)">
            <summary>
            Builds a CREATE TABLE statement for the specified entity type
            </summary>
            <param name="entityType">The entity type</param>
            <returns>The CREATE TABLE SQL statement</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresSchemaBuilder.BuildColumnDefinition(System.Reflection.PropertyInfo,Durable.PropertyAttribute,System.Boolean@)">
            <summary>
            Builds a column definition for a property
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresSchemaBuilder.BuildForeignKeyConstraint(System.String,Durable.ForeignKeyAttribute)">
            <summary>
            Builds a foreign key constraint
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresSchemaBuilder.GetTableColumns(System.String,System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets the column information from the database for schema validation
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresSchemaBuilder.TableExists(System.String,System.String,System.Data.Common.DbConnection)">
            <summary>
            Checks if a table exists in the database
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresSchemaBuilder.BuildCreateIndexSql(System.Type)">
            <summary>
            Builds CREATE INDEX SQL statements for the specified entity type
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresSchemaBuilder.GetExistingIndexes(System.String,System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets existing indexes for a table from the database
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresSchemaBuilder.IndexExists(System.String,System.String,System.String,System.Data.Common.DbConnection)">
            <summary>
            Checks if an index exists in the database
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresSchemaBuilder.DatabaseExists(System.String,System.Data.Common.DbConnection)">
            <summary>
            Checks if a database exists
            </summary>
        </member>
        <member name="T:Durable.Postgres.IndexPropertyInfo">
            <summary>
            Represents a property with its associated index attribute
            </summary>
        </member>
        <member name="T:Durable.Postgres.ColumnInfo">
            <summary>
            Represents column information from the database
            </summary>
        </member>
        <member name="T:Durable.Postgres.IndexInfo">
            <summary>
            Represents index information from the database
            </summary>
        </member>
        <member name="T:Durable.Postgres.PostgresSelectMapping">
            <summary>
            Maps database columns to entity properties for projection queries in PostgreSQL.
            Handles SELECT clause mapping and data type conversions.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresSelectMapping.TargetProperty">
            <summary>
            Gets or sets the target property to map the column value to.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresSelectMapping.SourceColumn">
            <summary>
            Gets or sets the source column name in the database result set.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresSelectMapping.TargetPropertyName">
            <summary>
            Gets or sets the target property name on the result object.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresSelectMapping.RequiresConversion">
            <summary>
            Gets or sets whether this mapping requires type conversion.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresSelectMapping.SourceType">
            <summary>
            Gets or sets the expected source type from the database.
            </summary>
        </member>
        <member name="P:Durable.Postgres.PostgresSelectMapping.TargetType">
            <summary>
            Gets or sets the target type for the property.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresSelectMapping.#ctor">
            <summary>
            Initializes a new instance of the PostgresSelectMapping.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresSelectMapping.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of the PostgresSelectMapping with the specified property and column.
            </summary>
            <param name="targetProperty">The target property to map to</param>
            <param name="sourceColumn">The source column name</param>
            <exception cref="T:System.ArgumentNullException">Thrown when targetProperty is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when sourceColumn is null or empty</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresSelectMapping.FromColumnMappings(System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates a collection of select mappings from a dictionary of column mappings.
            </summary>
            <param name="columnMappings">Dictionary mapping column names to properties</param>
            <returns>A collection of PostgresSelectMapping objects</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when columnMappings is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresSelectMapping.ForResultType``1">
            <summary>
            Creates select mappings for a specific result type.
            </summary>
            <typeparam name="TResult">The result type to create mappings for</typeparam>
            <returns>A collection of PostgresSelectMapping objects</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresSelectMapping.ApplyMapping(System.Object,System.Object,Durable.IDataTypeConverter)">
            <summary>
            Applies this mapping to set a property value from a database column value.
            </summary>
            <param name="target">The target object to set the property on</param>
            <param name="columnValue">The value from the database column</param>
            <param name="converter">Optional data type converter for type conversions</param>
            <exception cref="T:System.ArgumentNullException">Thrown when target is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresSelectMapping.ToString">
            <summary>
            Returns a string representation of this mapping.
            </summary>
            <returns>A string describing the mapping</returns>
        </member>
        <member name="T:Durable.Postgres.PostgresStringExtensions">
            <summary>
            Extension methods for string to provide PostgreSQL connection factory creation.
            Provides consistency with SQLite and MySQL implementations for connection string handling.
            </summary>
        </member>
        <member name="M:Durable.Postgres.PostgresStringExtensions.CreatePostgresFactory(System.String,System.Action{Durable.ConnectionPoolOptions})">
            <summary>
            Creates a PostgreSQL connection factory from a connection string.
            Provides a consistent API similar to SQLite's and MySQL's string extension methods.
            </summary>
            <param name="connectionString">The PostgreSQL connection string</param>
            <param name="configureOptions">Optional action to configure connection pool options</param>
            <returns>A configured PostgreSQL connection factory</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when connectionString is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when connectionString is empty or whitespace</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresStringExtensions.CreateFactory(System.String)">
            <summary>
            Creates a PostgreSQL connection factory from a connection string with default pooling options.
            </summary>
            <param name="connectionString">The PostgreSQL connection string</param>
            <returns>A PostgreSQL connection factory with default configuration</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when connectionString is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when connectionString is empty or whitespace</exception>
        </member>
        <member name="T:Durable.Postgres.PostgresWindowedQueryBuilder`1">
            <summary>
            Provides window function support for PostgreSQL queries, enabling advanced analytical operations like ROW_NUMBER, RANK, and aggregate functions with window clauses.
            Supports PostgreSQL's full window function syntax including frames, partitioning, and ordering with double-quoted identifiers.
            </summary>
            <typeparam name="TEntity">The entity type for the query. Must be a class with a parameterless constructor.</typeparam>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.#ctor(Durable.Postgres.PostgresQueryBuilder{`0},Durable.Postgres.PostgresRepository{`0},Durable.ITransaction,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the PostgresWindowedQueryBuilder class.
            </summary>
            <param name="queryBuilder">The base query builder to extend with window functions</param>
            <param name="repository">The repository instance for database operations</param>
            <param name="transaction">Optional transaction to execute within</param>
            <param name="functionName">The name of the window function to use</param>
            <param name="partitionBy">Optional PARTITION BY clause for the window function</param>
            <param name="orderBy">Optional ORDER BY clause for the window function</param>
            <exception cref="T:System.ArgumentNullException">Thrown when queryBuilder or repository is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.RowNumber(System.String)">
            <summary>
            Adds a ROW_NUMBER() window function to the query.
            </summary>
            <param name="alias">The alias for the row number column</param>
            <returns>The current query builder for method chaining</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.Rank(System.String)">
            <summary>
            Adds a RANK() window function to the query.
            </summary>
            <param name="alias">The alias for the rank column</param>
            <returns>The current query builder for method chaining</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.DenseRank(System.String)">
            <summary>
            Adds a DENSE_RANK() window function to the query.
            </summary>
            <param name="alias">The alias for the dense rank column</param>
            <returns>The current query builder for method chaining</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.Lead``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Object,System.String)">
            <summary>
            Adds a LEAD() window function to access data from a subsequent row.
            PostgreSQL natively supports LEAD with excellent performance.
            </summary>
            <typeparam name="TKey">The type of the column value</typeparam>
            <param name="column">The column to access from the subsequent row</param>
            <param name="offset">The number of rows to look ahead</param>
            <param name="defaultValue">The default value to return if no subsequent row is found</param>
            <param name="alias">The alias for the lead column</param>
            <returns>The current query builder for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when column is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.Lag``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Object,System.String)">
            <summary>
            Adds a LAG() window function to access data from a previous row.
            PostgreSQL natively supports LAG with excellent performance.
            </summary>
            <typeparam name="TKey">The type of the column value</typeparam>
            <param name="column">The column to access from the previous row</param>
            <param name="offset">The number of rows to look back</param>
            <param name="defaultValue">The default value to return if no previous row is found</param>
            <param name="alias">The alias for the lag column</param>
            <returns>The current query builder for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when column is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.FirstValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Adds a FIRST_VALUE() window function to get the first value in the window frame.
            PostgreSQL supports FIRST_VALUE with sophisticated frame specifications.
            </summary>
            <typeparam name="TKey">The type of the column value</typeparam>
            <param name="column">The column to get the first value from</param>
            <param name="alias">The alias for the first value column</param>
            <returns>The current query builder for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when column is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.LastValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Adds a LAST_VALUE() window function to get the last value in the window frame.
            PostgreSQL supports LAST_VALUE with sophisticated frame specifications.
            </summary>
            <typeparam name="TKey">The type of the column value</typeparam>
            <param name="column">The column to get the last value from</param>
            <param name="alias">The alias for the last value column</param>
            <returns>The current query builder for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when column is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.NthValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.String)">
            <summary>
            Adds a NTH_VALUE() window function to get the nth value in the window frame.
            PostgreSQL supports NTH_VALUE with excellent analytical capabilities.
            </summary>
            <typeparam name="TKey">The type of the column value</typeparam>
            <param name="column">The column to get the nth value from</param>
            <param name="n">The position of the value to retrieve (1-based)</param>
            <param name="alias">The alias for the nth value column</param>
            <returns>The current query builder for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when column is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when n is less than 1</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.Sum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Adds a SUM() window function to calculate the sum of values in the window frame.
            PostgreSQL supports window aggregate functions with excellent performance.
            </summary>
            <typeparam name="TKey">The type of the column value</typeparam>
            <param name="column">The column to sum</param>
            <param name="alias">The alias for the sum column</param>
            <returns>The current query builder for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when column is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.Avg``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Adds an AVG() window function to calculate the average of values in the window frame.
            PostgreSQL supports window aggregate functions with excellent performance.
            </summary>
            <typeparam name="TKey">The type of the column value</typeparam>
            <param name="column">The column to average</param>
            <param name="alias">The alias for the average column</param>
            <returns>The current query builder for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when column is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.Count(System.String)">
            <summary>
            Adds a COUNT() window function to count rows in the window frame.
            PostgreSQL supports window aggregate functions with excellent performance.
            </summary>
            <param name="alias">The alias for the count column</param>
            <returns>The current query builder for method chaining</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Adds a MIN() window function to find the minimum value in the window frame.
            PostgreSQL supports window aggregate functions with excellent performance.
            </summary>
            <typeparam name="TKey">The type of the column value</typeparam>
            <param name="column">The column to find the minimum value from</param>
            <param name="alias">The alias for the minimum column</param>
            <returns>The current query builder for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when column is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Adds a MAX() window function to find the maximum value in the window frame.
            PostgreSQL supports window aggregate functions with excellent performance.
            </summary>
            <typeparam name="TKey">The type of the column value</typeparam>
            <param name="column">The column to find the maximum value from</param>
            <param name="alias">The alias for the maximum column</param>
            <returns>The current query builder for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when column is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.PartitionBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Partitions the result set by the specified key selector for the window function.
            PostgreSQL uses double-quoted identifiers for optimal compatibility.
            </summary>
            <typeparam name="TKey">The type of the partition key</typeparam>
            <param name="keySelector">The expression to partition by</param>
            <returns>The current query builder for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when keySelector is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Orders the window frame by the specified key selector in ascending order.
            PostgreSQL uses double-quoted identifiers for optimal compatibility.
            </summary>
            <typeparam name="TKey">The type of the order key</typeparam>
            <param name="keySelector">The expression to order by</param>
            <returns>The current query builder for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when keySelector is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Orders the window frame by the specified key selector in descending order.
            PostgreSQL uses double-quoted identifiers for optimal compatibility.
            </summary>
            <typeparam name="TKey">The type of the order key</typeparam>
            <param name="keySelector">The expression to order by</param>
            <returns>The current query builder for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when keySelector is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.Rows(System.Int32,System.Int32)">
            <summary>
            Specifies a ROWS window frame with the given preceding and following row counts.
            PostgreSQL has excellent support for frame specifications.
            </summary>
            <param name="preceding">The number of preceding rows to include</param>
            <param name="following">The number of following rows to include</param>
            <returns>The current query builder for method chaining</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.RowsUnboundedPreceding">
            <summary>
            Specifies a ROWS window frame from unbounded preceding to current row.
            PostgreSQL has excellent support for unbounded frame specifications.
            </summary>
            <returns>The current query builder for method chaining</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.RowsUnboundedFollowing">
            <summary>
            Specifies a ROWS window frame from current row to unbounded following.
            PostgreSQL has excellent support for unbounded frame specifications.
            </summary>
            <returns>The current query builder for method chaining</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.RowsBetween(System.String,System.String)">
            <summary>
            Specifies a ROWS window frame between the given start and end boundaries.
            PostgreSQL has sophisticated window frame boundary parsing.
            </summary>
            <param name="start">The start boundary of the window frame</param>
            <param name="end">The end boundary of the window frame</param>
            <returns>The current query builder for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when start or end is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.Range(System.Int32,System.Int32)">
            <summary>
            Specifies a RANGE window frame with the given preceding and following value ranges.
            PostgreSQL has excellent support for RANGE frames.
            </summary>
            <param name="preceding">The preceding value range to include</param>
            <param name="following">The following value range to include</param>
            <returns>The current query builder for method chaining</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.RangeUnboundedPreceding">
            <summary>
            Specifies a RANGE window frame from unbounded preceding to current row.
            PostgreSQL has excellent support for unbounded RANGE frames.
            </summary>
            <returns>The current query builder for method chaining</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.RangeUnboundedFollowing">
            <summary>
            Specifies a RANGE window frame from current row to unbounded following.
            PostgreSQL has excellent support for unbounded RANGE frames.
            </summary>
            <returns>The current query builder for method chaining</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.RangeBetween(System.String,System.String)">
            <summary>
            Specifies a RANGE window frame between the given start and end boundaries.
            PostgreSQL has sophisticated window frame boundary parsing.
            </summary>
            <param name="start">The start boundary of the window frame</param>
            <param name="end">The end boundary of the window frame</param>
            <returns>The current query builder for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when start or end is null</exception>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.EndWindow">
            <summary>
            Ends the window function configuration and returns to the regular query builder.
            </summary>
            <returns>The regular query builder for continued query construction</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.Execute">
            <summary>
            Executes the windowed query synchronously and returns the results.
            </summary>
            <returns>An enumerable collection of entities with window function results</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the windowed query asynchronously and returns the results.
            </summary>
            <param name="token">Cancellation token to cancel the operation</param>
            <returns>A task that represents the asynchronous operation containing an enumerable collection of entities with window function results</returns>
        </member>
        <member name="M:Durable.Postgres.PostgresWindowedQueryBuilder`1.ExecuteAsyncEnumerable(System.Threading.CancellationToken)">
            <summary>
            Executes the windowed query asynchronously and returns the results as an async enumerable for streaming.
            </summary>
            <param name="token">Cancellation token to cancel the operation</param>
            <returns>An async enumerable collection of entities with window function results that can be consumed with await foreach</returns>
        </member>
    </members>
</doc>
