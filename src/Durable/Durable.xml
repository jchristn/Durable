<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Durable</name>
    </assembly>
    <members>
        <member name="T:Durable.AsyncDurableResult`1">
            <summary>
            Represents an asynchronous durable result containing a query and its corresponding async enumerable result.
            </summary>
            <typeparam name="T">The type of items in the result enumerable.</typeparam>
        </member>
        <member name="P:Durable.AsyncDurableResult`1.Query">
            <summary>
            Gets the query string associated with this result.
            </summary>
        </member>
        <member name="P:Durable.AsyncDurableResult`1.Result">
            <summary>
            Gets the asynchronous enumerable result containing items of type T.
            </summary>
        </member>
        <member name="M:Durable.AsyncDurableResult`1.#ctor(System.String,System.Collections.Generic.IAsyncEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.AsyncDurableResult`1"/> class.
            </summary>
            <param name="query">The query string associated with this result.</param>
            <param name="result">The asynchronous enumerable result containing items of type T.</param>
        </member>
        <member name="T:Durable.AsyncEnumerableHelper">
            <summary>
            Helper class to provide empty async enumerables.
            </summary>
        </member>
        <member name="M:Durable.AsyncEnumerableHelper.Empty``1">
            <summary>
            Returns an empty async enumerable of the specified type.
            </summary>
            <typeparam name="T">The type of elements in the async enumerable.</typeparam>
            <returns>An empty async enumerable.</returns>
        </member>
        <member name="T:Durable.BatchInsertConfiguration">
            <summary>
            Default implementation of batch insert configuration with sensible defaults.
            </summary>
        </member>
        <member name="P:Durable.BatchInsertConfiguration.MaxRowsPerBatch">
            <summary>
            Gets or sets the maximum number of rows to include in a single multi-row INSERT statement.
            Default is 500 rows per batch, which provides good performance without hitting parameter limits.
            </summary>
        </member>
        <member name="P:Durable.BatchInsertConfiguration.MaxParametersPerStatement">
            <summary>
            Gets or sets the maximum number of parameters per INSERT statement.
            Default is 900 to stay well under SQLite's default limit of 999 parameters.
            </summary>
        </member>
        <member name="P:Durable.BatchInsertConfiguration.EnablePreparedStatementReuse">
            <summary>
            Gets or sets whether to use prepared statement reuse for batch operations.
            Default is true for better performance.
            </summary>
        </member>
        <member name="P:Durable.BatchInsertConfiguration.EnableMultiRowInsert">
            <summary>
            Gets or sets whether to use multi-row INSERT syntax when possible.
            Default is true for better performance.
            </summary>
        </member>
        <member name="P:Durable.BatchInsertConfiguration.Default">
            <summary>
            Creates a new instance with default values optimized for SQLite.
            </summary>
        </member>
        <member name="P:Durable.BatchInsertConfiguration.SmallBatch">
            <summary>
            Creates a configuration optimized for small batches (fewer database round trips).
            </summary>
        </member>
        <member name="P:Durable.BatchInsertConfiguration.LargeBatch">
            <summary>
            Creates a configuration optimized for large batches (maximum throughput).
            </summary>
        </member>
        <member name="P:Durable.BatchInsertConfiguration.Compatible">
            <summary>
            Creates a configuration that disables optimizations (fallback to original behavior).
            </summary>
        </member>
        <member name="T:Durable.CaseExpression">
            <summary>
            Represents a SQL CASE expression that can be used to build conditional SQL statements.
            </summary>
        </member>
        <member name="P:Durable.CaseExpression.WhenClauses">
            <summary>
            Gets or sets the list of WHEN clauses that define the conditions and their corresponding results.
            </summary>
        </member>
        <member name="P:Durable.CaseExpression.ElseResult">
            <summary>
            Gets or sets the ELSE result that will be used when none of the WHEN conditions are met.
            </summary>
        </member>
        <member name="P:Durable.CaseExpression.Alias">
            <summary>
            Gets or sets the alias to be used for the CASE expression in the SQL statement.
            </summary>
        </member>
        <member name="M:Durable.CaseExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.CaseExpression"/> class.
            </summary>
        </member>
        <member name="M:Durable.CaseExpression.BuildSql">
            <summary>
            Builds and returns the SQL representation of the CASE expression.
            </summary>
            <returns>A string containing the complete SQL CASE expression.</returns>
        </member>
        <member name="T:Durable.ConcurrencyConflictException">
            <summary>
            Represents an exception that is thrown when a concurrency conflict occurs during data operations.
            </summary>
        </member>
        <member name="P:Durable.ConcurrencyConflictException.CurrentEntity">
            <summary>
            Gets or sets the current entity state in the data store at the time of the conflict.
            </summary>
        </member>
        <member name="P:Durable.ConcurrencyConflictException.IncomingEntity">
            <summary>
            Gets or sets the incoming entity that was attempting to be saved when the conflict occurred.
            </summary>
        </member>
        <member name="P:Durable.ConcurrencyConflictException.OriginalEntity">
            <summary>
            Gets or sets the original entity state that was used as the baseline for the update operation.
            </summary>
        </member>
        <member name="M:Durable.ConcurrencyConflictException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.ConcurrencyConflictException"/> class.
            </summary>
        </member>
        <member name="M:Durable.ConcurrencyConflictException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.ConcurrencyConflictException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Durable.ConcurrencyConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.ConcurrencyConflictException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Durable.ConcurrencyConflictException.#ctor(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.ConcurrencyConflictException"/> class with a specified error message and the entities involved in the conflict.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="currentEntity">The current entity state in the data store.</param>
            <param name="incomingEntity">The incoming entity that was attempting to be saved.</param>
            <param name="originalEntity">The original entity state used as baseline for the update.</param>
        </member>
        <member name="T:Durable.ConcurrencyConflictResolvers.ClientWinsResolver`1">
            <summary>
            A concurrency conflict resolver that always chooses the incoming (client-side) entity as the winner.
            This resolver implements a "client wins" strategy where the client's version always takes precedence over the current database version.
            </summary>
            <typeparam name="T">The type of entity being resolved. Must be a reference type.</typeparam>
        </member>
        <member name="P:Durable.ConcurrencyConflictResolvers.ClientWinsResolver`1.DefaultStrategy">
            <summary>
            Gets or sets the default conflict resolution strategy used by this resolver.
            </summary>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.ClientWinsResolver`1.ResolveConflict(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Resolves a concurrency conflict by returning the incoming entity (client wins).
            </summary>
            <param name="currentEntity">The current entity state in the data store.</param>
            <param name="incomingEntity">The incoming entity from the client.</param>
            <param name="originalEntity">The original entity state used as baseline for the update.</param>
            <param name="strategy">The conflict resolution strategy to apply.</param>
            <returns>The incoming entity as the resolved conflict winner.</returns>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.ClientWinsResolver`1.ResolveConflictAsync(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Asynchronously resolves a concurrency conflict by returning the incoming entity (client wins).
            </summary>
            <param name="currentEntity">The current entity state in the data store.</param>
            <param name="incomingEntity">The incoming entity from the client.</param>
            <param name="originalEntity">The original entity state used as baseline for the update.</param>
            <param name="strategy">The conflict resolution strategy to apply.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the incoming entity as the resolved conflict winner.</returns>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.ClientWinsResolver`1.TryResolveConflict(`0,`0,`0,Durable.ConflictResolutionStrategy,`0@)">
            <summary>
            Attempts to resolve a concurrency conflict by returning the incoming entity (client wins).
            This method always succeeds for the ClientWinsResolver.
            </summary>
            <param name="currentEntity">The current entity state in the data store.</param>
            <param name="incomingEntity">The incoming entity from the client.</param>
            <param name="originalEntity">The original entity state used as baseline for the update.</param>
            <param name="strategy">The conflict resolution strategy to apply.</param>
            <param name="resolvedEntity">When this method returns, contains the resolved entity (always the incoming entity).</param>
            <returns>Always returns true, indicating successful conflict resolution.</returns>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.ClientWinsResolver`1.TryResolveConflictAsync(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Asynchronously attempts to resolve a concurrency conflict by returning the incoming entity (client wins).
            This method always succeeds for the ClientWinsResolver.
            </summary>
            <param name="currentEntity">The current entity state in the data store.</param>
            <param name="incomingEntity">The incoming entity from the client.</param>
            <param name="originalEntity">The original entity state used as baseline for the update.</param>
            <param name="strategy">The conflict resolution strategy to apply.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a successful resolution result with the incoming entity.</returns>
        </member>
        <member name="T:Durable.ConcurrencyConflictResolvers.DatabaseWinsResolver`1">
            <summary>
            A concurrency conflict resolver that always chooses the current database entity as the winner.
            This resolver implements a "database wins" strategy where the database's current version always takes precedence over the incoming client version.
            </summary>
            <typeparam name="T">The type of entity being resolved. Must be a reference type.</typeparam>
        </member>
        <member name="P:Durable.ConcurrencyConflictResolvers.DatabaseWinsResolver`1.DefaultStrategy">
            <summary>
            Gets or sets the default conflict resolution strategy used by this resolver.
            </summary>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.DatabaseWinsResolver`1.ResolveConflict(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Resolves a concurrency conflict by returning the current database entity (database wins).
            </summary>
            <param name="currentEntity">The current entity state in the data store.</param>
            <param name="incomingEntity">The incoming entity from the client.</param>
            <param name="originalEntity">The original entity state used as baseline for the update.</param>
            <param name="strategy">The conflict resolution strategy to apply.</param>
            <returns>The current database entity as the resolved conflict winner.</returns>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.DatabaseWinsResolver`1.ResolveConflictAsync(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Asynchronously resolves a concurrency conflict by returning the current database entity (database wins).
            </summary>
            <param name="currentEntity">The current entity state in the data store.</param>
            <param name="incomingEntity">The incoming entity from the client.</param>
            <param name="originalEntity">The original entity state used as baseline for the update.</param>
            <param name="strategy">The conflict resolution strategy to apply.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the current database entity as the resolved conflict winner.</returns>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.DatabaseWinsResolver`1.TryResolveConflict(`0,`0,`0,Durable.ConflictResolutionStrategy,`0@)">
            <summary>
            Attempts to resolve a concurrency conflict by returning the current database entity (database wins).
            This method always succeeds for the DatabaseWinsResolver.
            </summary>
            <param name="currentEntity">The current entity state in the data store.</param>
            <param name="incomingEntity">The incoming entity from the client.</param>
            <param name="originalEntity">The original entity state used as baseline for the update.</param>
            <param name="strategy">The conflict resolution strategy to apply.</param>
            <param name="resolvedEntity">When this method returns, contains the resolved entity (always the current database entity).</param>
            <returns>Always returns true, indicating successful conflict resolution.</returns>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.DatabaseWinsResolver`1.TryResolveConflictAsync(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Asynchronously attempts to resolve a concurrency conflict by returning the current database entity (database wins).
            This method always succeeds for the DatabaseWinsResolver.
            </summary>
            <param name="currentEntity">The current entity state in the data store.</param>
            <param name="incomingEntity">The incoming entity from the client.</param>
            <param name="originalEntity">The original entity state used as baseline for the update.</param>
            <param name="strategy">The conflict resolution strategy to apply.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a successful resolution result with the current database entity.</returns>
        </member>
        <member name="T:Durable.ConcurrencyConflictResolvers.DefaultConflictResolver`1">
            <summary>
            A default concurrency conflict resolver that delegates to specialized resolvers based on the conflict resolution strategy.
            This resolver acts as a factory and dispatcher, routing conflict resolution to the appropriate strategy-specific resolver.
            </summary>
            <typeparam name="T">The type of entity being resolved. Must be a reference type with a parameterless constructor.</typeparam>
        </member>
        <member name="P:Durable.ConcurrencyConflictResolvers.DefaultConflictResolver`1.DefaultStrategy">
            <summary>
            Gets or sets the default conflict resolution strategy to use when the strategy is set to Custom.
            </summary>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.DefaultConflictResolver`1.#ctor(Durable.ConflictResolutionStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.ConcurrencyConflictResolvers.DefaultConflictResolver`1"/> class with the specified default strategy.
            </summary>
            <param name="defaultStrategy">The default conflict resolution strategy to use. Defaults to ThrowException.</param>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.DefaultConflictResolver`1.ResolveConflict(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Resolves a concurrency conflict by delegating to the appropriate strategy-specific resolver.
            </summary>
            <param name="currentEntity">The current entity state in the data store.</param>
            <param name="incomingEntity">The incoming entity from the client.</param>
            <param name="originalEntity">The original entity state used as baseline for the update.</param>
            <param name="strategy">The conflict resolution strategy to apply.</param>
            <returns>The resolved entity according to the specified strategy.</returns>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.DefaultConflictResolver`1.ResolveConflictAsync(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Asynchronously resolves a concurrency conflict by delegating to the appropriate strategy-specific resolver.
            </summary>
            <param name="currentEntity">The current entity state in the data store.</param>
            <param name="incomingEntity">The incoming entity from the client.</param>
            <param name="originalEntity">The original entity state used as baseline for the update.</param>
            <param name="strategy">The conflict resolution strategy to apply.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the resolved entity according to the specified strategy.</returns>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.DefaultConflictResolver`1.TryResolveConflict(`0,`0,`0,Durable.ConflictResolutionStrategy,`0@)">
            <summary>
            Attempts to resolve a concurrency conflict by delegating to the appropriate strategy-specific resolver.
            </summary>
            <param name="currentEntity">The current entity state in the data store.</param>
            <param name="incomingEntity">The incoming entity from the client.</param>
            <param name="originalEntity">The original entity state used as baseline for the update.</param>
            <param name="strategy">The conflict resolution strategy to apply.</param>
            <param name="resolvedEntity">When this method returns, contains the resolved entity if the resolution was successful.</param>
            <returns>True if the conflict was successfully resolved; otherwise, false.</returns>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.DefaultConflictResolver`1.TryResolveConflictAsync(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Asynchronously attempts to resolve a concurrency conflict by delegating to the appropriate strategy-specific resolver.
            </summary>
            <param name="currentEntity">The current entity state in the data store.</param>
            <param name="incomingEntity">The incoming entity from the client.</param>
            <param name="originalEntity">The original entity state used as baseline for the update.</param>
            <param name="strategy">The conflict resolution strategy to apply.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the conflict resolution result.</returns>
        </member>
        <member name="T:Durable.ConcurrencyConflictResolvers.ImprovedMergeChangesResolver`1">
            <summary>
            An advanced concurrency conflict resolver that merges changes from different sources based on configurable conflict behavior.
            Provides enhanced comparison capabilities including array and collection comparison.
            </summary>
            <typeparam name="T">The entity type that must be a reference type with a parameterless constructor</typeparam>
        </member>
        <member name="P:Durable.ConcurrencyConflictResolvers.ImprovedMergeChangesResolver`1.DefaultStrategy">
            <summary>
            Gets or sets the default strategy used for conflict resolution. Defaults to MergeChanges.
            </summary>
        </member>
        <member name="T:Durable.ConcurrencyConflictResolvers.ImprovedMergeChangesResolver`1.ConflictBehavior">
            <summary>
            Defines the behavior when conflicts are detected between current and incoming changes.
            </summary>
        </member>
        <member name="F:Durable.ConcurrencyConflictResolvers.ImprovedMergeChangesResolver`1.ConflictBehavior.IncomingWins">
            <summary>
            The incoming value takes precedence in conflicts.
            </summary>
        </member>
        <member name="F:Durable.ConcurrencyConflictResolvers.ImprovedMergeChangesResolver`1.ConflictBehavior.CurrentWins">
            <summary>
            The current value takes precedence in conflicts.
            </summary>
        </member>
        <member name="F:Durable.ConcurrencyConflictResolvers.ImprovedMergeChangesResolver`1.ConflictBehavior.ThrowException">
            <summary>
            Throws an exception when conflicts are detected.
            </summary>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.ImprovedMergeChangesResolver`1.#ctor(Durable.ConcurrencyConflictResolvers.ImprovedMergeChangesResolver{`0}.ConflictBehavior,System.String[])">
            <summary>
            Initializes a new instance of the ImprovedMergeChangesResolver with specified conflict behavior and ignored properties.
            </summary>
            <param name="conflictBehavior">The behavior to use when conflicts are detected. Defaults to IncomingWins.</param>
            <param name="ignoredProperties">Properties to ignore during merge operations.</param>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.ImprovedMergeChangesResolver`1.ResolveConflict(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Resolves conflicts between current and incoming entities by merging changes based on the original entity state.
            </summary>
            <param name="currentEntity">The current entity state</param>
            <param name="incomingEntity">The incoming entity state</param>
            <param name="originalEntity">The original entity state used as baseline for change detection</param>
            <param name="strategy">The conflict resolution strategy to use</param>
            <returns>A merged entity with resolved conflicts</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the entity parameters are null</exception>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.ImprovedMergeChangesResolver`1.ResolveConflictAsync(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Asynchronously resolves conflicts between current and incoming entities.
            </summary>
            <param name="currentEntity">The current entity state</param>
            <param name="incomingEntity">The incoming entity state</param>
            <param name="originalEntity">The original entity state used as baseline for change detection</param>
            <param name="strategy">The conflict resolution strategy to use</param>
            <returns>A task containing the merged entity with resolved conflicts</returns>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.ImprovedMergeChangesResolver`1.TryResolveConflict(`0,`0,`0,Durable.ConflictResolutionStrategy,`0@)">
            <summary>
            Attempts to resolve conflicts between entities without throwing exceptions.
            </summary>
            <param name="currentEntity">The current entity state</param>
            <param name="incomingEntity">The incoming entity state</param>
            <param name="originalEntity">The original entity state used as baseline for change detection</param>
            <param name="strategy">The conflict resolution strategy to use</param>
            <param name="resolvedEntity">The resolved entity if successful, null otherwise</param>
            <returns>True if conflict resolution succeeded, false otherwise</returns>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.ImprovedMergeChangesResolver`1.TryResolveConflictAsync(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Asynchronously attempts to resolve conflicts between entities without throwing exceptions.
            </summary>
            <param name="currentEntity">The current entity state</param>
            <param name="incomingEntity">The incoming entity state</param>
            <param name="originalEntity">The original entity state used as baseline for change detection</param>
            <param name="strategy">The conflict resolution strategy to use</param>
            <returns>A task containing the result of the conflict resolution attempt</returns>
        </member>
        <member name="T:Durable.ConcurrencyConflictResolvers.MergeChangesResolver`1">
            <summary>
            A concurrency conflict resolver that merges changes from different sources.
            When conflicts occur, incoming changes take precedence over current changes.
            </summary>
            <typeparam name="T">The entity type that must be a reference type with a parameterless constructor</typeparam>
        </member>
        <member name="P:Durable.ConcurrencyConflictResolvers.MergeChangesResolver`1.DefaultStrategy">
            <summary>
            Gets or sets the default strategy used for conflict resolution. Defaults to MergeChanges.
            </summary>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.MergeChangesResolver`1.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the MergeChangesResolver with specified properties to ignore during merge operations.
            </summary>
            <param name="ignoredProperties">Properties to ignore during merge operations</param>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.MergeChangesResolver`1.ResolveConflict(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Resolves conflicts between current and incoming entities by merging changes based on the original entity state.
            When both current and incoming have changes to the same property, incoming changes take precedence.
            </summary>
            <param name="currentEntity">The current entity state</param>
            <param name="incomingEntity">The incoming entity state</param>
            <param name="originalEntity">The original entity state used as baseline for change detection</param>
            <param name="strategy">The conflict resolution strategy to use</param>
            <returns>A merged entity with resolved conflicts</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the entity parameters are null</exception>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.MergeChangesResolver`1.ResolveConflictAsync(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Asynchronously resolves conflicts between current and incoming entities.
            </summary>
            <param name="currentEntity">The current entity state</param>
            <param name="incomingEntity">The incoming entity state</param>
            <param name="originalEntity">The original entity state used as baseline for change detection</param>
            <param name="strategy">The conflict resolution strategy to use</param>
            <returns>A task containing the merged entity with resolved conflicts</returns>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.MergeChangesResolver`1.TryResolveConflict(`0,`0,`0,Durable.ConflictResolutionStrategy,`0@)">
            <summary>
            Attempts to resolve conflicts between entities without throwing exceptions.
            </summary>
            <param name="currentEntity">The current entity state</param>
            <param name="incomingEntity">The incoming entity state</param>
            <param name="originalEntity">The original entity state used as baseline for change detection</param>
            <param name="strategy">The conflict resolution strategy to use</param>
            <param name="resolvedEntity">The resolved entity if successful, null otherwise</param>
            <returns>True if conflict resolution succeeded, false otherwise</returns>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.MergeChangesResolver`1.TryResolveConflictAsync(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Asynchronously attempts to resolve conflicts between entities without throwing exceptions.
            </summary>
            <param name="currentEntity">The current entity state</param>
            <param name="incomingEntity">The incoming entity state</param>
            <param name="originalEntity">The original entity state used as baseline for change detection</param>
            <param name="strategy">The conflict resolution strategy to use</param>
            <returns>A task containing the result of the conflict resolution attempt</returns>
        </member>
        <member name="T:Durable.ConcurrencyConflictResolvers.ThrowExceptionResolver`1">
            <summary>
            A concurrency conflict resolver that throws exceptions when conflicts are detected.
            This resolver never attempts to merge or resolve conflicts automatically.
            </summary>
            <typeparam name="T">The entity type that must be a reference type</typeparam>
        </member>
        <member name="P:Durable.ConcurrencyConflictResolvers.ThrowExceptionResolver`1.DefaultStrategy">
            <summary>
            Gets or sets the default strategy used for conflict resolution. Always set to ThrowException.
            </summary>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.ThrowExceptionResolver`1.ResolveConflict(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Throws a ConcurrencyConflictException when called, as this resolver does not attempt to resolve conflicts.
            </summary>
            <param name="currentEntity">The current entity state</param>
            <param name="incomingEntity">The incoming entity state</param>
            <param name="originalEntity">The original entity state</param>
            <param name="strategy">The conflict resolution strategy (ignored)</param>
            <returns>Never returns normally, always throws an exception</returns>
            <exception cref="T:Durable.ConcurrencyConflictException">Always thrown when conflicts are detected</exception>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.ThrowExceptionResolver`1.ResolveConflictAsync(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Throws a ConcurrencyConflictException when called, as this resolver does not attempt to resolve conflicts.
            </summary>
            <param name="currentEntity">The current entity state</param>
            <param name="incomingEntity">The incoming entity state</param>
            <param name="originalEntity">The original entity state</param>
            <param name="strategy">The conflict resolution strategy (ignored)</param>
            <returns>Never returns normally, always throws an exception</returns>
            <exception cref="T:Durable.ConcurrencyConflictException">Always thrown when conflicts are detected</exception>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.ThrowExceptionResolver`1.TryResolveConflict(`0,`0,`0,Durable.ConflictResolutionStrategy,`0@)">
            <summary>
            Attempts to resolve conflicts but always returns false as this resolver does not resolve conflicts.
            </summary>
            <param name="currentEntity">The current entity state</param>
            <param name="incomingEntity">The incoming entity state</param>
            <param name="originalEntity">The original entity state</param>
            <param name="strategy">The conflict resolution strategy (ignored)</param>
            <param name="resolvedEntity">Always set to null</param>
            <returns>Always returns false</returns>
        </member>
        <member name="M:Durable.ConcurrencyConflictResolvers.ThrowExceptionResolver`1.TryResolveConflictAsync(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Asynchronously attempts to resolve conflicts but always returns a failure result.
            </summary>
            <param name="currentEntity">The current entity state</param>
            <param name="incomingEntity">The incoming entity state</param>
            <param name="originalEntity">The original entity state</param>
            <param name="strategy">The conflict resolution strategy (ignored)</param>
            <returns>A task containing a failure result with Success set to false</returns>
        </member>
        <member name="T:Durable.ConfigurationSettingResult">
            <summary>
            Represents the result of resolving a configuration setting.
            </summary>
        </member>
        <member name="P:Durable.ConfigurationSettingResult.EffectiveSetting">
            <summary>
            Gets or sets the effective setting value.
            </summary>
        </member>
        <member name="P:Durable.ConfigurationSettingResult.Source">
            <summary>
            Gets or sets the source of the effective setting (e.g., "Instance", "ThreadLocal", "Global").
            </summary>
        </member>
        <member name="M:Durable.ConfigurationSettingResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.ConfigurationSettingResult"/> class.
            </summary>
        </member>
        <member name="M:Durable.ConfigurationSettingResult.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.ConfigurationSettingResult"/> class.
            </summary>
            <param name="effectiveSetting">The effective setting value.</param>
            <param name="source">The source of the setting.</param>
        </member>
        <member name="T:Durable.ConflictResolutionStrategy">
            <summary>
            Defines strategies for resolving conflicts during concurrent operations.
            </summary>
        </member>
        <member name="F:Durable.ConflictResolutionStrategy.ThrowException">
            <summary>
            Throws an exception when a conflict is detected.
            </summary>
        </member>
        <member name="F:Durable.ConflictResolutionStrategy.ClientWins">
            <summary>
            Client changes take precedence over database values.
            </summary>
        </member>
        <member name="F:Durable.ConflictResolutionStrategy.DatabaseWins">
            <summary>
            Database values take precedence over client changes.
            </summary>
        </member>
        <member name="F:Durable.ConflictResolutionStrategy.MergeChanges">
            <summary>
            Attempts to merge changes from both client and database.
            </summary>
        </member>
        <member name="F:Durable.ConflictResolutionStrategy.Custom">
            <summary>
            Uses a custom conflict resolution strategy.
            </summary>
        </member>
        <member name="T:Durable.ConnectionCommandResult`2">
            <summary>
            Represents the result of retrieving a database connection and command.
            </summary>
            <typeparam name="TConnection">The type of database connection.</typeparam>
            <typeparam name="TCommand">The type of database command.</typeparam>
        </member>
        <member name="P:Durable.ConnectionCommandResult`2.Connection">
            <summary>
            Gets or sets the database connection.
            </summary>
        </member>
        <member name="P:Durable.ConnectionCommandResult`2.Command">
            <summary>
            Gets or sets the database command.
            </summary>
        </member>
        <member name="P:Durable.ConnectionCommandResult`2.ShouldReturnToPool">
            <summary>
            Gets or sets a value indicating whether the connection should be returned to the pool when disposed.
            </summary>
        </member>
        <member name="M:Durable.ConnectionCommandResult`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.ConnectionCommandResult`2"/> class.
            </summary>
        </member>
        <member name="M:Durable.ConnectionCommandResult`2.#ctor(`0,`1,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.ConnectionCommandResult`2"/> class.
            </summary>
            <param name="connection">The database connection.</param>
            <param name="command">The database command.</param>
            <param name="shouldReturnToPool">Whether the connection should be returned to the pool.</param>
        </member>
        <member name="T:Durable.ConnectionPool">
            <summary>
            Provides a thread-safe connection pool for database connections with automatic cleanup and connection validation.
            </summary>
        </member>
        <member name="M:Durable.ConnectionPool.#ctor(System.Func{System.Data.Common.DbConnection},Durable.ConnectionPoolOptions)">
            <summary>
            Initializes a new instance of the ConnectionPool class.
            </summary>
            <param name="connectionFactory">Factory function to create new database connections.</param>
            <param name="options">Configuration options for the connection pool. If null, default options are used.</param>
        </member>
        <member name="M:Durable.ConnectionPool.GetConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves a database connection from the pool.
            </summary>
            <param name="cancellationToken">Token to cancel the operation.</param>
            <returns>A database connection from the pool.</returns>
            <exception cref="T:System.TimeoutException">Thrown when no connection becomes available within the timeout period.</exception>
        </member>
        <member name="M:Durable.ConnectionPool.GetConnection">
            <summary>
            Synchronously retrieves a database connection from the pool.
            </summary>
            <returns>A database connection from the pool.</returns>
            <exception cref="T:System.TimeoutException">Thrown when no connection becomes available within the timeout period.</exception>
        </member>
        <member name="M:Durable.ConnectionPool.ReturnConnectionAsync(System.Data.Common.DbConnection)">
            <summary>
            Asynchronously returns a database connection to the pool.
            </summary>
            <param name="connection">The connection to return to the pool.</param>
        </member>
        <member name="M:Durable.ConnectionPool.ReturnConnection(System.Data.Common.DbConnection)">
            <summary>
            Synchronously returns a database connection to the pool.
            </summary>
            <param name="connection">The connection to return to the pool.</param>
        </member>
        <member name="M:Durable.ConnectionPool.Dispose">
            <summary>
            Releases all resources used by the ConnectionPool.
            </summary>
        </member>
        <member name="T:Durable.ConnectionPoolOptions">
            <summary>
            Configuration options for database connection pools.
            </summary>
        </member>
        <member name="P:Durable.ConnectionPoolOptions.MinPoolSize">
            <summary>
            Gets or sets the minimum number of connections to maintain in the pool. Default is 5.
            </summary>
        </member>
        <member name="P:Durable.ConnectionPoolOptions.MaxPoolSize">
            <summary>
            Gets or sets the maximum number of connections allowed in the pool. Default is 100.
            </summary>
        </member>
        <member name="P:Durable.ConnectionPoolOptions.ConnectionTimeout">
            <summary>
            Gets or sets the maximum time to wait for a connection from the pool. Default is 30 seconds.
            </summary>
        </member>
        <member name="P:Durable.ConnectionPoolOptions.IdleTimeout">
            <summary>
            Gets or sets the maximum time a connection can remain idle before being removed. Default is 10 minutes.
            </summary>
        </member>
        <member name="P:Durable.ConnectionPoolOptions.ValidateConnections">
            <summary>
            Gets or sets whether connections should be validated before use. Default is true.
            </summary>
        </member>
        <member name="T:Durable.CteDefinition">
            <summary>
            Represents a Common Table Expression (CTE) definition for SQL queries.
            </summary>
        </member>
        <member name="P:Durable.CteDefinition.Name">
            <summary>
            Gets or sets the name of the CTE.
            </summary>
        </member>
        <member name="P:Durable.CteDefinition.Query">
            <summary>
            Gets or sets the SQL query for non-recursive CTEs.
            </summary>
        </member>
        <member name="P:Durable.CteDefinition.IsRecursive">
            <summary>
            Gets or sets a value indicating whether this CTE is recursive.
            </summary>
        </member>
        <member name="P:Durable.CteDefinition.AnchorQuery">
            <summary>
            Gets or sets the anchor query for recursive CTEs.
            </summary>
        </member>
        <member name="P:Durable.CteDefinition.RecursiveQuery">
            <summary>
            Gets or sets the recursive query for recursive CTEs.
            </summary>
        </member>
        <member name="M:Durable.CteDefinition.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the CteDefinition class for a non-recursive CTE.
            </summary>
            <param name="name">The name of the CTE.</param>
            <param name="query">The SQL query for the CTE.</param>
        </member>
        <member name="M:Durable.CteDefinition.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the CteDefinition class for a recursive CTE.
            </summary>
            <param name="name">The name of the CTE.</param>
            <param name="anchorQuery">The anchor query for the recursive CTE.</param>
            <param name="recursiveQuery">The recursive query for the recursive CTE.</param>
        </member>
        <member name="T:Durable.DataTypeConverter">
            <summary>
            Provides type conversion functionality between .NET types and database storage formats.
            </summary>
        </member>
        <member name="M:Durable.DataTypeConverter.ConvertToDatabase(System.Object,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Converts a .NET object to its database storage representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The target database type.</param>
            <param name="propertyInfo">Optional property information for attribute-based conversion hints.</param>
            <returns>The database-compatible representation of the value.</returns>
        </member>
        <member name="M:Durable.DataTypeConverter.ConvertFromDatabase(System.Object,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Converts a database value to its .NET type representation.
            </summary>
            <param name="value">The database value to convert.</param>
            <param name="targetType">The target .NET type.</param>
            <param name="propertyInfo">Optional property information for attribute-based conversion hints.</param>
            <returns>The .NET object representation of the database value.</returns>
        </member>
        <member name="M:Durable.DataTypeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether the converter can handle the specified type.
            </summary>
            <param name="type">The type to check for conversion support.</param>
            <returns>True if the type can be converted; otherwise, false.</returns>
        </member>
        <member name="M:Durable.DataTypeConverter.GetDatabaseTypeString(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Gets the appropriate database type string for the specified .NET type.
            </summary>
            <param name="type">The .NET type.</param>
            <param name="propertyInfo">Optional property information for attribute-based type mapping hints.</param>
            <returns>The database type string (e.g., "TEXT", "INTEGER", "REAL").</returns>
        </member>
        <member name="T:Durable.DurableConfiguration">
            <summary>
            Provides global and thread-local configuration settings for Durable ORM behavior.
            Supports hierarchical configuration where thread-local settings override global settings.
            </summary>
        </member>
        <member name="P:Durable.DurableConfiguration.GlobalIncludeQuery">
            <summary>
            Gets or sets the global default for whether repository operations should include executed SQL in results.
            This setting applies to all repository instances unless overridden by thread-local or instance-level configuration.
            Default value is false for performance and backward compatibility.
            </summary>
        </member>
        <member name="P:Durable.DurableConfiguration.ThreadLocalIncludeQuery">
            <summary>
            Gets or sets a thread-local override for SQL inclusion in results.
            When set to a non-null value, this overrides the GlobalIncludeQuery setting for the current thread.
            When null, the GlobalIncludeQuery setting is used.
            This allows temporary per-thread behavior changes without affecting other threads.
            </summary>
        </member>
        <member name="P:Durable.DurableConfiguration.ShouldIncludeQuery">
            <summary>
            Gets the effective SQL inclusion setting for the current thread.
            Returns the thread-local override if set, otherwise returns the global setting.
            This is the computed value that should be used by repository implementations.
            </summary>
        </member>
        <member name="M:Durable.DurableConfiguration.ResolveIncludeQuerySetting(System.Nullable{System.Boolean})">
            <summary>
            Resolves the effective SQL inclusion setting using explicit configuration hierarchy.
            Precedence order (highest to lowest):
            1. Instance-level configuration (repository.IncludeQueryInResults)
            2. Thread-local configuration (ThreadLocalIncludeQuery)
            3. Global configuration (GlobalIncludeQuery)
            </summary>
            <param name="instanceLevelSetting">The instance-level setting from the repository, or null if not configured</param>
            <returns>A ConfigurationSettingResult object containing the effective setting and the source of that setting for debugging</returns>
            <exception cref="T:System.ArgumentException">This method cannot throw exceptions as all inputs are valid</exception>
        </member>
        <member name="T:Durable.DurableResult`1">
            <summary>
            Represents the result of a database query operation containing both the query and its results.
            </summary>
            <typeparam name="T">The type of objects in the result set.</typeparam>
        </member>
        <member name="P:Durable.DurableResult`1.Query">
            <summary>
            Gets the SQL query that was executed.
            </summary>
        </member>
        <member name="P:Durable.DurableResult`1.Result">
            <summary>
            Gets the collection of results returned by the query.
            </summary>
        </member>
        <member name="M:Durable.DurableResult`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the DurableResult class.
            </summary>
            <param name="query">The SQL query that was executed.</param>
            <param name="result">The collection of results returned by the query.</param>
        </member>
        <member name="T:Durable.EntityAttribute">
            <summary>
            Specifies the database table name for an entity class.
            </summary>
        </member>
        <member name="P:Durable.EntityAttribute.Name">
            <summary>
            Gets the name of the database table associated with the entity.
            </summary>
        </member>
        <member name="M:Durable.EntityAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the EntityAttribute class.
            </summary>
            <param name="name">The name of the database table.</param>
        </member>
        <member name="T:Durable.ExpressionExtensions">
            <summary>
            Provides extension methods for various expression operations and value comparisons.
            </summary>
        </member>
        <member name="M:Durable.ExpressionExtensions.Between``1(``0,``0,``0)">
            <summary>
            Determines whether a value falls between two bounds (inclusive).
            </summary>
            <typeparam name="T">The type of the values being compared.</typeparam>
            <param name="value">The value to check.</param>
            <param name="min">The minimum bound.</param>
            <param name="max">The maximum bound.</param>
            <returns>true if the value is between min and max (inclusive); otherwise, false.</returns>
        </member>
        <member name="M:Durable.ExpressionExtensions.Between(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether an integer value falls between two bounds (inclusive).
            </summary>
            <param name="value">The integer value to check.</param>
            <param name="min">The minimum bound.</param>
            <param name="max">The maximum bound.</param>
            <returns>true if the value is between min and max (inclusive); otherwise, false.</returns>
        </member>
        <member name="M:Durable.ExpressionExtensions.Between(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Determines whether a decimal value falls between two bounds (inclusive).
            </summary>
            <param name="value">The decimal value to check.</param>
            <param name="min">The minimum bound.</param>
            <param name="max">The maximum bound.</param>
            <returns>true if the value is between min and max (inclusive); otherwise, false.</returns>
        </member>
        <member name="M:Durable.ExpressionExtensions.Between(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether a double value falls between two bounds (inclusive).
            </summary>
            <param name="value">The double value to check.</param>
            <param name="min">The minimum bound.</param>
            <param name="max">The maximum bound.</param>
            <returns>true if the value is between min and max (inclusive); otherwise, false.</returns>
        </member>
        <member name="M:Durable.ExpressionExtensions.Between(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether a float value falls between two bounds (inclusive).
            </summary>
            <param name="value">The float value to check.</param>
            <param name="min">The minimum bound.</param>
            <param name="max">The maximum bound.</param>
            <returns>true if the value is between min and max (inclusive); otherwise, false.</returns>
        </member>
        <member name="M:Durable.ExpressionExtensions.Between(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Determines whether a DateTime value falls between two bounds (inclusive).
            </summary>
            <param name="value">The DateTime value to check.</param>
            <param name="min">The minimum bound.</param>
            <param name="max">The maximum bound.</param>
            <returns>true if the value is between min and max (inclusive); otherwise, false.</returns>
        </member>
        <member name="M:Durable.ExpressionExtensions.Between(System.DateTimeOffset,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Determines whether a DateTimeOffset value falls between two bounds (inclusive).
            </summary>
            <param name="value">The DateTimeOffset value to check.</param>
            <param name="min">The minimum bound.</param>
            <param name="max">The maximum bound.</param>
            <returns>true if the value is between min and max (inclusive); otherwise, false.</returns>
        </member>
        <member name="M:Durable.ExpressionExtensions.In``1(``0,``0[])">
            <summary>
            Determines whether a value exists in the specified array of values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="value">The value to search for.</param>
            <param name="values">The array of values to search in.</param>
            <returns>true if the value is found in the array; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when values is null.</exception>
        </member>
        <member name="M:Durable.ExpressionExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a value exists in the specified collection of values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="value">The value to search for.</param>
            <param name="values">The collection of values to search in.</param>
            <returns>true if the value is found in the collection; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when values is null.</exception>
        </member>
        <member name="M:Durable.ExpressionExtensions.NotIn``1(``0,``0[])">
            <summary>
            Determines whether a value does not exist in the specified array of values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="value">The value to search for.</param>
            <param name="values">The array of values to search in.</param>
            <returns>true if the value is not found in the array; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when values is null.</exception>
        </member>
        <member name="M:Durable.ExpressionExtensions.NotIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a value does not exist in the specified collection of values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="value">The value to search for.</param>
            <param name="values">The collection of values to search in.</param>
            <returns>true if the value is not found in the collection; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when values is null.</exception>
        </member>
        <member name="M:Durable.ExpressionExtensions.IsNull``1(System.Nullable{``0})">
            <summary>
            Determines whether a nullable value type is null.
            </summary>
            <typeparam name="T">The underlying value type.</typeparam>
            <param name="value">The nullable value to check.</param>
            <returns>true if the value is null; otherwise, false.</returns>
        </member>
        <member name="M:Durable.ExpressionExtensions.IsNotNull``1(System.Nullable{``0})">
            <summary>
            Determines whether a nullable value type is not null.
            </summary>
            <typeparam name="T">The underlying value type.</typeparam>
            <param name="value">The nullable value to check.</param>
            <returns>true if the value is not null; otherwise, false.</returns>
        </member>
        <member name="M:Durable.ExpressionExtensions.IsNull(System.String)">
            <summary>
            Determines whether a string is null.
            </summary>
            <param name="value">The string to check.</param>
            <returns>true if the string is null; otherwise, false.</returns>
        </member>
        <member name="M:Durable.ExpressionExtensions.IsNotNull(System.String)">
            <summary>
            Determines whether a string is not null.
            </summary>
            <param name="value">The string to check.</param>
            <returns>true if the string is not null; otherwise, false.</returns>
        </member>
        <member name="M:Durable.ExpressionExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Determines whether a string is null or empty.
            </summary>
            <param name="value">The string to check.</param>
            <returns>true if the string is null or empty; otherwise, false.</returns>
        </member>
        <member name="M:Durable.ExpressionExtensions.IsNotNullOrEmpty(System.String)">
            <summary>
            Determines whether a string is not null or empty.
            </summary>
            <param name="value">The string to check.</param>
            <returns>true if the string is not null or empty; otherwise, false.</returns>
        </member>
        <member name="M:Durable.ExpressionExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Determines whether a string is null, empty, or consists only of white-space characters.
            </summary>
            <param name="value">The string to check.</param>
            <returns>true if the string is null, empty, or contains only white-space characters; otherwise, false.</returns>
        </member>
        <member name="M:Durable.ExpressionExtensions.IsNotNullOrWhiteSpace(System.String)">
            <summary>
            Determines whether a string is not null, empty, or consists only of white-space characters.
            </summary>
            <param name="value">The string to check.</param>
            <returns>true if the string is not null, empty, or contains only white-space characters; otherwise, false.</returns>
        </member>
        <member name="T:Durable.Flags">
            <summary>
            Defines flags that can be applied to entity properties to specify their database characteristics.
            </summary>
        </member>
        <member name="F:Durable.Flags.None">
            <summary>
            No flags applied.
            </summary>
        </member>
        <member name="F:Durable.Flags.PrimaryKey">
            <summary>
            Indicates that the property is a primary key.
            </summary>
        </member>
        <member name="F:Durable.Flags.String">
            <summary>
            Indicates that the property is a string type.
            </summary>
        </member>
        <member name="F:Durable.Flags.AutoIncrement">
            <summary>
            Indicates that the property value should auto-increment.
            </summary>
        </member>
        <member name="T:Durable.ForeignKeyAttribute">
            <summary>
            Specifies that a property represents a foreign key relationship to another entity.
            </summary>
        </member>
        <member name="P:Durable.ForeignKeyAttribute.ReferencedType">
            <summary>
            Gets the type of the entity that this foreign key references.
            </summary>
        </member>
        <member name="P:Durable.ForeignKeyAttribute.ReferencedProperty">
            <summary>
            Gets the name of the property in the referenced entity that this foreign key points to.
            </summary>
        </member>
        <member name="M:Durable.ForeignKeyAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the ForeignKeyAttribute class.
            </summary>
            <param name="referencedType">The type of the entity that this foreign key references.</param>
            <param name="referencedProperty">The name of the property in the referenced entity that this foreign key points to.</param>
        </member>
        <member name="T:Durable.IAsyncDurableResult`1">
            <summary>
            Represents the result of an asynchronous durable query operation.
            </summary>
            <typeparam name="T">The type of objects returned in the result.</typeparam>
        </member>
        <member name="P:Durable.IAsyncDurableResult`1.Query">
            <summary>
            Gets the SQL query string that was executed.
            </summary>
        </member>
        <member name="P:Durable.IAsyncDurableResult`1.Result">
            <summary>
            Gets the asynchronous enumerable result set containing the query results.
            </summary>
        </member>
        <member name="T:Durable.IBatchInsertConfiguration">
            <summary>
            Configuration interface for batch insert optimizations.
            Repository implementations can optionally implement this to customize batch behavior.
            </summary>
        </member>
        <member name="P:Durable.IBatchInsertConfiguration.MaxRowsPerBatch">
            <summary>
            Gets the maximum number of rows to include in a single multi-row INSERT statement.
            Default is typically 500-1000 depending on the database provider.
            </summary>
        </member>
        <member name="P:Durable.IBatchInsertConfiguration.MaxParametersPerStatement">
            <summary>
            Gets the maximum number of parameters per INSERT statement.
            Some databases have limits (e.g., SQLite has a default limit of 999 parameters).
            </summary>
        </member>
        <member name="P:Durable.IBatchInsertConfiguration.EnablePreparedStatementReuse">
            <summary>
            Gets whether to use prepared statement reuse for batch operations.
            When true, the same prepared statement is reused across batches.
            </summary>
        </member>
        <member name="P:Durable.IBatchInsertConfiguration.EnableMultiRowInsert">
            <summary>
            Gets whether to use multi-row INSERT syntax when possible.
            When false, falls back to individual INSERT statements in a transaction.
            </summary>
        </member>
        <member name="T:Durable.ICaseExpressionBuilder`1">
            <summary>
            Provides a fluent interface for building SQL CASE expressions in queries.
            </summary>
            <typeparam name="T">The entity type being queried.</typeparam>
        </member>
        <member name="M:Durable.ICaseExpressionBuilder`1.When(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)">
            <summary>
            Adds a WHEN condition to the CASE expression using a strongly-typed expression.
            </summary>
            <param name="condition">The condition expression to evaluate.</param>
            <param name="result">The value to return when the condition is true.</param>
            <returns>The case expression builder for method chaining.</returns>
        </member>
        <member name="M:Durable.ICaseExpressionBuilder`1.WhenRaw(System.String,System.Object)">
            <summary>
            Adds a WHEN condition to the CASE expression using raw SQL.
            </summary>
            <param name="condition">The raw SQL condition string.</param>
            <param name="result">The value to return when the condition is true.</param>
            <returns>The case expression builder for method chaining.</returns>
        </member>
        <member name="M:Durable.ICaseExpressionBuilder`1.Else(System.Object)">
            <summary>
            Adds an ELSE clause to the CASE expression for the default value.
            </summary>
            <param name="result">The default value to return when no conditions match.</param>
            <returns>The case expression builder for method chaining.</returns>
        </member>
        <member name="M:Durable.ICaseExpressionBuilder`1.EndCase(System.String)">
            <summary>
            Completes the CASE expression and returns it as a query builder column with the specified alias.
            </summary>
            <param name="alias">The column alias for the CASE expression result.</param>
            <returns>The query builder for continued query construction.</returns>
        </member>
        <member name="T:Durable.IChangeTracker`1">
            <summary>
            Provides change tracking functionality for entities to detect modifications.
            </summary>
            <typeparam name="T">The entity type to track changes for.</typeparam>
        </member>
        <member name="M:Durable.IChangeTracker`1.TrackEntity(`0)">
            <summary>
            Starts tracking changes for the specified entity.
            </summary>
            <param name="entity">The entity to begin tracking.</param>
        </member>
        <member name="M:Durable.IChangeTracker`1.GetOriginalValues(`0)">
            <summary>
            Gets the original values of a tracked entity before any modifications were made.
            </summary>
            <param name="entity">The entity to get original values for.</param>
            <returns>The original values of the entity, or null if the entity is not being tracked.</returns>
        </member>
        <member name="M:Durable.IChangeTracker`1.HasChanges(`0)">
            <summary>
            Determines whether the specified entity has any pending changes.
            </summary>
            <param name="entity">The entity to check for changes.</param>
            <returns>True if the entity has changes; otherwise, false.</returns>
        </member>
        <member name="M:Durable.IChangeTracker`1.StopTracking(`0)">
            <summary>
            Stops tracking changes for the specified entity.
            </summary>
            <param name="entity">The entity to stop tracking.</param>
        </member>
        <member name="M:Durable.IChangeTracker`1.Clear">
            <summary>
            Clears all tracked entities from the change tracker.
            </summary>
        </member>
        <member name="T:Durable.IConcurrencyConflictResolver`1">
            <summary>
            Provides methods for resolving conflicts that occur during concurrent entity operations.
            </summary>
            <typeparam name="T">The entity type for which conflicts are resolved.</typeparam>
        </member>
        <member name="P:Durable.IConcurrencyConflictResolver`1.DefaultStrategy">
            <summary>
            Gets or sets the default strategy to use when resolving conflicts.
            </summary>
        </member>
        <member name="M:Durable.IConcurrencyConflictResolver`1.ResolveConflict(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Resolves a concurrency conflict between entities using the specified strategy.
            </summary>
            <param name="currentEntity">The current state of the entity in the database.</param>
            <param name="incomingEntity">The entity with changes to be applied.</param>
            <param name="originalEntity">The original state of the entity when it was first loaded.</param>
            <param name="strategy">The strategy to use for conflict resolution.</param>
            <returns>The resolved entity after applying the conflict resolution strategy.</returns>
        </member>
        <member name="M:Durable.IConcurrencyConflictResolver`1.ResolveConflictAsync(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Asynchronously resolves a concurrency conflict between entities using the specified strategy.
            </summary>
            <param name="currentEntity">The current state of the entity in the database.</param>
            <param name="incomingEntity">The entity with changes to be applied.</param>
            <param name="originalEntity">The original state of the entity when it was first loaded.</param>
            <param name="strategy">The strategy to use for conflict resolution.</param>
            <returns>A task representing the asynchronous operation, containing the resolved entity.</returns>
        </member>
        <member name="M:Durable.IConcurrencyConflictResolver`1.TryResolveConflict(`0,`0,`0,Durable.ConflictResolutionStrategy,`0@)">
            <summary>
            Attempts to resolve a concurrency conflict between entities using the specified strategy.
            </summary>
            <param name="currentEntity">The current state of the entity in the database.</param>
            <param name="incomingEntity">The entity with changes to be applied.</param>
            <param name="originalEntity">The original state of the entity when it was first loaded.</param>
            <param name="strategy">The strategy to use for conflict resolution.</param>
            <param name="resolvedEntity">When this method returns, contains the resolved entity if resolution was successful; otherwise, the default value.</param>
            <returns>true if the conflict was successfully resolved; otherwise, false.</returns>
        </member>
        <member name="M:Durable.IConcurrencyConflictResolver`1.TryResolveConflictAsync(`0,`0,`0,Durable.ConflictResolutionStrategy)">
            <summary>
            Asynchronously attempts to resolve a concurrency conflict between entities using the specified strategy.
            </summary>
            <param name="currentEntity">The current state of the entity in the database.</param>
            <param name="incomingEntity">The entity with changes to be applied.</param>
            <param name="originalEntity">The original state of the entity when it was first loaded.</param>
            <param name="strategy">The strategy to use for conflict resolution.</param>
            <returns>A task representing the asynchronous operation, containing the result of the conflict resolution attempt.</returns>
        </member>
        <member name="T:Durable.IConnectionFactory">
            <summary>
            Provides a factory interface for creating and managing database connections with support for connection pooling.
            </summary>
        </member>
        <member name="M:Durable.IConnectionFactory.GetConnection">
            <summary>
            Synchronously retrieves a database connection from the factory.
            </summary>
            <returns>A database connection ready for use.</returns>
        </member>
        <member name="M:Durable.IConnectionFactory.GetConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves a database connection from the factory.
            </summary>
            <param name="cancellationToken">Token to cancel the connection retrieval operation.</param>
            <returns>A task representing the asynchronous operation, containing a database connection ready for use.</returns>
        </member>
        <member name="M:Durable.IConnectionFactory.ReturnConnection(System.Data.Common.DbConnection)">
            <summary>
            Returns a database connection to the factory for potential reuse or disposal.
            </summary>
            <param name="connection">The database connection to return to the factory.</param>
        </member>
        <member name="M:Durable.IConnectionFactory.ReturnConnectionAsync(System.Data.Common.DbConnection)">
            <summary>
            Asynchronously returns a database connection to the factory for potential reuse or disposal.
            </summary>
            <param name="connection">The database connection to return to the factory.</param>
            <returns>A task representing the asynchronous return operation.</returns>
        </member>
        <member name="T:Durable.IDataTypeConverter">
            <summary>
            Provides type conversion functionality between .NET types and database storage formats.
            </summary>
        </member>
        <member name="M:Durable.IDataTypeConverter.ConvertToDatabase(System.Object,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Converts a .NET object to its database storage representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The target database type.</param>
            <param name="propertyInfo">Optional property information for attribute-based conversion hints.</param>
            <returns>The database-compatible representation of the value.</returns>
        </member>
        <member name="M:Durable.IDataTypeConverter.ConvertFromDatabase(System.Object,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Converts a database value to its .NET type representation.
            </summary>
            <param name="value">The database value to convert.</param>
            <param name="targetType">The target .NET type.</param>
            <param name="propertyInfo">Optional property information for attribute-based conversion hints.</param>
            <returns>The .NET object representation of the database value.</returns>
        </member>
        <member name="M:Durable.IDataTypeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether the converter can handle the specified type.
            </summary>
            <param name="type">The type to check for conversion support.</param>
            <returns>True if the type can be converted; otherwise, false.</returns>
        </member>
        <member name="M:Durable.IDataTypeConverter.GetDatabaseTypeString(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Gets the appropriate database type string for the specified .NET type.
            </summary>
            <param name="type">The .NET type.</param>
            <param name="propertyInfo">Optional property information for attribute-based type mapping hints.</param>
            <returns>The database type string (e.g., "TEXT", "INTEGER", "REAL").</returns>
        </member>
        <member name="T:Durable.IDurableResult`1">
            <summary>
            Represents a query result that includes both the executed query and its results.
            </summary>
            <typeparam name="T">The type of entities in the result.</typeparam>
        </member>
        <member name="P:Durable.IDurableResult`1.Query">
            <summary>
            Gets the SQL query that was executed.
            </summary>
        </member>
        <member name="P:Durable.IDurableResult`1.Result">
            <summary>
            Gets the results of the query execution.
            </summary>
        </member>
        <member name="T:Durable.IGroupedQueryBuilder`2">
            <summary>
            Provides methods for building and executing grouped queries with aggregate operations.
            </summary>
            <typeparam name="T">The entity type being queried.</typeparam>
            <typeparam name="TKey">The type of the grouping key.</typeparam>
        </member>
        <member name="M:Durable.IGroupedQueryBuilder`2.Having(System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{`1,`0},System.Boolean}})">
            <summary>
            Adds a HAVING clause to filter grouped results.
            </summary>
            <param name="predicate">The condition to apply to the grouped results.</param>
            <returns>The current grouped query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IGroupedQueryBuilder`2.Select``1(System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{`1,`0},``0}})">
            <summary>
            Specifies a custom selection for the grouped query results.
            </summary>
            <typeparam name="TResult">The type of the result after selection.</typeparam>
            <param name="selector">The selection expression to apply to each group.</param>
            <returns>The current grouped query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IGroupedQueryBuilder`2.Execute">
            <summary>
            Executes the grouped query and returns the results.
            </summary>
            <returns>The grouped query results.</returns>
        </member>
        <member name="M:Durable.IGroupedQueryBuilder`2.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the grouped query and returns the results.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with grouped query results.</returns>
        </member>
        <member name="M:Durable.IGroupedQueryBuilder`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns the count of items in each group, optionally filtered by a predicate.
            </summary>
            <param name="predicate">Optional predicate to filter items before counting.</param>
            <returns>The count of items.</returns>
        </member>
        <member name="M:Durable.IGroupedQueryBuilder`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the count of items in each group, optionally filtered by a predicate.
            </summary>
            <param name="predicate">Optional predicate to filter items before counting.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with the count of items.</returns>
        </member>
        <member name="M:Durable.IGroupedQueryBuilder`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Calculates the sum of a numeric property for items in each group.
            </summary>
            <param name="selector">The property selector for the sum calculation.</param>
            <returns>The sum of the selected property.</returns>
        </member>
        <member name="M:Durable.IGroupedQueryBuilder`2.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the sum of a numeric property for items in each group.
            </summary>
            <param name="selector">The property selector for the sum calculation.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with the sum of the selected property.</returns>
        </member>
        <member name="M:Durable.IGroupedQueryBuilder`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Calculates the average of a numeric property for items in each group.
            </summary>
            <param name="selector">The property selector for the average calculation.</param>
            <returns>The average of the selected property.</returns>
        </member>
        <member name="M:Durable.IGroupedQueryBuilder`2.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the average of a numeric property for items in each group.
            </summary>
            <param name="selector">The property selector for the average calculation.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with the average of the selected property.</returns>
        </member>
        <member name="M:Durable.IGroupedQueryBuilder`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Finds the maximum value of a property for items in each group.
            </summary>
            <typeparam name="TResult">The type of the property being compared.</typeparam>
            <param name="selector">The property selector for finding the maximum.</param>
            <returns>The maximum value of the selected property.</returns>
        </member>
        <member name="M:Durable.IGroupedQueryBuilder`2.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously finds the maximum value of a property for items in each group.
            </summary>
            <typeparam name="TResult">The type of the property being compared.</typeparam>
            <param name="selector">The property selector for finding the maximum.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with the maximum value of the selected property.</returns>
        </member>
        <member name="M:Durable.IGroupedQueryBuilder`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Finds the minimum value of a property for items in each group.
            </summary>
            <typeparam name="TResult">The type of the property being compared.</typeparam>
            <param name="selector">The property selector for finding the minimum.</param>
            <returns>The minimum value of the selected property.</returns>
        </member>
        <member name="M:Durable.IGroupedQueryBuilder`2.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously finds the minimum value of a property for items in each group.
            </summary>
            <typeparam name="TResult">The type of the property being compared.</typeparam>
            <param name="selector">The property selector for finding the minimum.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with the minimum value of the selected property.</returns>
        </member>
        <member name="T:Durable.InverseNavigationPropertyAttribute">
            <summary>
            Specifies the inverse navigation property for a relationship in the entity framework.
            </summary>
        </member>
        <member name="P:Durable.InverseNavigationPropertyAttribute.InverseForeignKeyProperty">
            <summary>
            Gets the name of the foreign key property on the inverse side of the relationship.
            </summary>
        </member>
        <member name="M:Durable.InverseNavigationPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.InverseNavigationPropertyAttribute"/> class.
            </summary>
            <param name="inverseForeignKeyProperty">The name of the foreign key property on the inverse side of the relationship.</param>
        </member>
        <member name="T:Durable.IQueryBuilder`1">
            <summary>
            Provides methods for building and executing LINQ-style queries with fluent syntax.
            </summary>
            <typeparam name="T">The entity type being queried.</typeparam>
        </member>
        <member name="M:Durable.IQueryBuilder`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds a WHERE clause to filter query results.
            </summary>
            <param name="predicate">The condition to apply to the query.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Orders the query results in ascending order by the specified key.
            </summary>
            <typeparam name="TKey">The type of the ordering key.</typeparam>
            <param name="keySelector">The expression to extract the ordering key.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Orders the query results in descending order by the specified key.
            </summary>
            <typeparam name="TKey">The type of the ordering key.</typeparam>
            <param name="keySelector">The expression to extract the ordering key.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.ThenBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Performs a subsequent ordering of the query results in ascending order.
            </summary>
            <typeparam name="TKey">The type of the ordering key.</typeparam>
            <param name="keySelector">The expression to extract the ordering key.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Performs a subsequent ordering of the query results in descending order.
            </summary>
            <typeparam name="TKey">The type of the ordering key.</typeparam>
            <param name="keySelector">The expression to extract the ordering key.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.Skip(System.Int32)">
            <summary>
            Skips the specified number of elements in the query results.
            </summary>
            <param name="count">The number of elements to skip.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.Take(System.Int32)">
            <summary>
            Takes only the specified number of elements from the query results.
            </summary>
            <param name="count">The number of elements to take.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.Distinct">
            <summary>
            Returns distinct elements from the query results.
            </summary>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Projects each element of the query into a new form.
            </summary>
            <typeparam name="TResult">The type of the result after projection.</typeparam>
            <param name="selector">The projection expression.</param>
            <returns>A new query builder for the projected type.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Includes related data in the query results.
            </summary>
            <typeparam name="TProperty">The type of the navigation property.</typeparam>
            <param name="navigationProperty">The navigation property to include.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.ThenInclude``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Includes additional related data based on a previously included navigation property.
            </summary>
            <typeparam name="TPreviousProperty">The type of the previously included property.</typeparam>
            <typeparam name="TProperty">The type of the navigation property to include.</typeparam>
            <param name="navigationProperty">The navigation property to include.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Groups the query results by the specified key selector.
            </summary>
            <typeparam name="TKey">The type of the grouping key.</typeparam>
            <param name="keySelector">The expression to extract the grouping key.</param>
            <returns>A grouped query builder for further operations.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.Having(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds a HAVING clause to filter grouped results.
            </summary>
            <param name="predicate">The condition to apply to grouped results.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.Union(Durable.IQueryBuilder{`0})">
            <summary>
            Performs a UNION operation with another query, combining results and removing duplicates.
            </summary>
            <param name="other">The other query builder to union with.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.UnionAll(Durable.IQueryBuilder{`0})">
            <summary>
            Performs a UNION ALL operation with another query, combining results including duplicates.
            </summary>
            <param name="other">The other query builder to union with.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.Intersect(Durable.IQueryBuilder{`0})">
            <summary>
            Performs an INTERSECT operation with another query, returning only common results.
            </summary>
            <param name="other">The other query builder to intersect with.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.Except(Durable.IQueryBuilder{`0})">
            <summary>
            Performs an EXCEPT operation with another query, returning results not in the other query.
            </summary>
            <param name="other">The other query builder to except with.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.WhereIn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Durable.IQueryBuilder{``0})">
            <summary>
            Adds a WHERE IN clause using a subquery.
            </summary>
            <typeparam name="TKey">The type of the key to match.</typeparam>
            <param name="keySelector">The expression to extract the key from the main query.</param>
            <param name="subquery">The subquery to check membership against.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.WhereNotIn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Durable.IQueryBuilder{``0})">
            <summary>
            Adds a WHERE NOT IN clause using a subquery.
            </summary>
            <typeparam name="TKey">The type of the key to match.</typeparam>
            <param name="keySelector">The expression to extract the key from the main query.</param>
            <param name="subquery">The subquery to check membership against.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.WhereInRaw``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Adds a WHERE IN clause using raw SQL for the subquery.
            </summary>
            <typeparam name="TKey">The type of the key to match.</typeparam>
            <param name="keySelector">The expression to extract the key from the main query.</param>
            <param name="subquerySql">The raw SQL subquery string.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.WhereNotInRaw``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Adds a WHERE NOT IN clause using raw SQL for the subquery.
            </summary>
            <typeparam name="TKey">The type of the key to match.</typeparam>
            <param name="keySelector">The expression to extract the key from the main query.</param>
            <param name="subquerySql">The raw SQL subquery string.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.WhereExists``1(Durable.IQueryBuilder{``0})">
            <summary>
            Adds a WHERE EXISTS clause using a subquery.
            </summary>
            <typeparam name="TOther">The type of the subquery entity.</typeparam>
            <param name="subquery">The subquery to check for existence.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.WhereNotExists``1(Durable.IQueryBuilder{``0})">
            <summary>
            Adds a WHERE NOT EXISTS clause using a subquery.
            </summary>
            <typeparam name="TOther">The type of the subquery entity.</typeparam>
            <param name="subquery">The subquery to check for non-existence.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.WithWindowFunction(System.String,System.String,System.String)">
            <summary>
            Adds a window function to the query.
            </summary>
            <param name="functionName">The name of the window function.</param>
            <param name="partitionBy">Optional PARTITION BY clause.</param>
            <param name="orderBy">Optional ORDER BY clause for the window.</param>
            <returns>A windowed query builder for further window operations.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.WithCte(System.String,System.String)">
            <summary>
            Adds a Common Table Expression (CTE) to the query.
            </summary>
            <param name="cteName">The name of the CTE.</param>
            <param name="cteQuery">The SQL query for the CTE.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.WithRecursiveCte(System.String,System.String,System.String)">
            <summary>
            Adds a recursive Common Table Expression (CTE) to the query.
            </summary>
            <param name="cteName">The name of the recursive CTE.</param>
            <param name="anchorQuery">The anchor query for the recursive CTE.</param>
            <param name="recursiveQuery">The recursive query for the CTE.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.WhereRaw(System.String,System.Object[])">
            <summary>
            Adds a raw SQL WHERE clause with optional parameters.
            </summary>
            <param name="sql">The raw SQL condition.</param>
            <param name="parameters">Optional parameters for the SQL.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.SelectRaw(System.String)">
            <summary>
            Adds a raw SQL SELECT clause.
            </summary>
            <param name="sql">The raw SQL select statement.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.FromRaw(System.String)">
            <summary>
            Specifies a raw SQL FROM clause.
            </summary>
            <param name="sql">The raw SQL from statement.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.JoinRaw(System.String)">
            <summary>
            Adds a raw SQL JOIN clause.
            </summary>
            <param name="sql">The raw SQL join statement.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.SelectCase">
            <summary>
            Creates a CASE WHEN expression builder for conditional selections.
            </summary>
            <returns>A case expression builder for building conditional logic.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.Execute">
            <summary>
            Executes the query and returns the results.
            </summary>
            <returns>The query results as an enumerable sequence.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the query and returns the results.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with query results.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.ExecuteAsyncEnumerable(System.Threading.CancellationToken)">
            <summary>
            Executes the query and returns results as an asynchronous enumerable stream.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>The query results as an asynchronous enumerable sequence.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.ExecuteWithQuery">
            <summary>
            Executes the query and returns both the results and the executed SQL query.
            </summary>
            <returns>A durable result containing both query and results.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.ExecuteWithQueryAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the query and returns both the results and the executed SQL query.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation with durable result.</returns>
        </member>
        <member name="M:Durable.IQueryBuilder`1.ExecuteAsyncEnumerableWithQuery(System.Threading.CancellationToken)">
            <summary>
            Executes the query as an asynchronous enumerable and exposes the executed SQL query.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>An asynchronous durable result containing both query and streaming results.</returns>
        </member>
        <member name="P:Durable.IQueryBuilder`1.Query">
            <summary>
            Gets the SQL query that will be or was executed.
            </summary>
        </member>
        <member name="M:Durable.IQueryBuilder`1.BuildSql">
            <summary>
            Builds and returns the SQL query string for debugging purposes.
            </summary>
            <returns>The SQL query string.</returns>
        </member>
        <member name="T:Durable.IRepository`1">
            <summary>
            Repository interface with transaction support for CRUD operations on entities of type T.
            </summary>
            <typeparam name="T">The entity type that implements class constraint and has a parameterless constructor.</typeparam>
        </member>
        <member name="M:Durable.IRepository`1.ReadFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Reads the first entity that matches the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities. If null, returns the first entity.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The first entity that matches the predicate.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ReadFirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Reads the first entity that matches the specified predicate, or returns default if none found.
            </summary>
            <param name="predicate">The predicate to filter entities. If null, returns the first entity.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The first entity that matches the predicate, or default if none found.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ReadSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Reads a single entity that matches the specified predicate. Throws an exception if zero or more than one entity is found.
            </summary>
            <param name="predicate">The predicate to filter entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The single entity that matches the predicate.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ReadSingleOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Reads a single entity that matches the specified predicate, or returns default if none found. Throws an exception if more than one entity is found.
            </summary>
            <param name="predicate">The predicate to filter entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The single entity that matches the predicate, or default if none found.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ReadMany(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Reads multiple entities that match the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities. If null, returns all entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>A collection of entities that match the predicate.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ReadAll(Durable.ITransaction)">
            <summary>
            Reads all entities from the repository.
            </summary>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>A collection of all entities.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ReadById(System.Object,Durable.ITransaction)">
            <summary>
            Reads an entity by its identifier.
            </summary>
            <param name="id">The identifier of the entity to read.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The entity with the specified identifier.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ReadFirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the first entity that matches the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities. If null, returns the first entity.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the first entity that matches the predicate.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ReadFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the first entity that matches the specified predicate, or returns default if none found.
            </summary>
            <param name="predicate">The predicate to filter entities. If null, returns the first entity.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the first entity that matches the predicate, or default if none found.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ReadSingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads a single entity that matches the specified predicate. Throws an exception if zero or more than one entity is found.
            </summary>
            <param name="predicate">The predicate to filter entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the single entity that matches the predicate.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ReadSingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads a single entity that matches the specified predicate, or returns default if none found. Throws an exception if more than one entity is found.
            </summary>
            <param name="predicate">The predicate to filter entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the single entity that matches the predicate, or default if none found.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ReadManyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads multiple entities that match the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities. If null, returns all entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>An async enumerable of entities that match the predicate.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ReadAllAsync(Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads all entities from the repository.
            </summary>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>An async enumerable of all entities.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ReadByIdAsync(System.Object,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads an entity by its identifier.
            </summary>
            <param name="id">The identifier of the entity to read.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the entity that has the specified identifier.</returns>
        </member>
        <member name="M:Durable.IRepository`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Checks if any entity exists that matches the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>True if any entity matches the predicate; otherwise, false.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ExistsById(System.Object,Durable.ITransaction)">
            <summary>
            Checks if an entity exists with the specified identifier.
            </summary>
            <param name="id">The identifier to check for.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>True if an entity with the specified identifier exists; otherwise, false.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously checks if any entity exists that matches the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with a result of true if any entity matches the predicate; otherwise, false.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ExistsByIdAsync(System.Object,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously checks if an entity exists with the specified identifier.
            </summary>
            <param name="id">The identifier to check for.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with a result of true if an entity with the specified identifier exists; otherwise, false.</returns>
        </member>
        <member name="M:Durable.IRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Counts the number of entities that match the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities. If null, counts all entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The number of entities that match the predicate.</returns>
        </member>
        <member name="M:Durable.IRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously counts the number of entities that match the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities. If null, counts all entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the number of entities that match the predicate.</returns>
        </member>
        <member name="M:Durable.IRepository`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Finds the maximum value of the specified property among entities that match the predicate.
            </summary>
            <typeparam name="TResult">The type of the property to find the maximum for.</typeparam>
            <param name="selector">The property selector expression.</param>
            <param name="predicate">The predicate to filter entities. If null, considers all entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The maximum value of the specified property.</returns>
        </member>
        <member name="M:Durable.IRepository`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Finds the minimum value of the specified property among entities that match the predicate.
            </summary>
            <typeparam name="TResult">The type of the property to find the minimum for.</typeparam>
            <param name="selector">The property selector expression.</param>
            <param name="predicate">The predicate to filter entities. If null, considers all entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The minimum value of the specified property.</returns>
        </member>
        <member name="M:Durable.IRepository`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Calculates the average value of the specified decimal property among entities that match the predicate.
            </summary>
            <param name="selector">The decimal property selector expression.</param>
            <param name="predicate">The predicate to filter entities. If null, considers all entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The average value of the specified property.</returns>
        </member>
        <member name="M:Durable.IRepository`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Calculates the sum of the specified decimal property among entities that match the predicate.
            </summary>
            <param name="selector">The decimal property selector expression.</param>
            <param name="predicate">The predicate to filter entities. If null, considers all entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The sum of the specified property.</returns>
        </member>
        <member name="M:Durable.IRepository`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously finds the maximum value of the specified property among entities that match the predicate.
            </summary>
            <typeparam name="TResult">The type of the property to find the maximum for.</typeparam>
            <param name="selector">The property selector expression.</param>
            <param name="predicate">The predicate to filter entities. If null, considers all entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the maximum value of the specified property.</returns>
        </member>
        <member name="M:Durable.IRepository`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously finds the minimum value of the specified property among entities that match the predicate.
            </summary>
            <typeparam name="TResult">The type of the property to find the minimum for.</typeparam>
            <param name="selector">The property selector expression.</param>
            <param name="predicate">The predicate to filter entities. If null, considers all entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the minimum value of the specified property.</returns>
        </member>
        <member name="M:Durable.IRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the average value of the specified decimal property among entities that match the predicate.
            </summary>
            <param name="selector">The decimal property selector expression.</param>
            <param name="predicate">The predicate to filter entities. If null, considers all entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the average value of the specified property.</returns>
        </member>
        <member name="M:Durable.IRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously calculates the sum of the specified decimal property among entities that match the predicate.
            </summary>
            <param name="selector">The decimal property selector expression.</param>
            <param name="predicate">The predicate to filter entities. If null, considers all entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the sum of the specified property.</returns>
        </member>
        <member name="M:Durable.IRepository`1.Create(`0,Durable.ITransaction)">
            <summary>
            Creates a new entity in the repository.
            </summary>
            <param name="entity">The entity to create.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The created entity.</returns>
        </member>
        <member name="M:Durable.IRepository`1.CreateMany(System.Collections.Generic.IEnumerable{`0},Durable.ITransaction)">
            <summary>
            Creates multiple entities in the repository.
            </summary>
            <param name="entities">The entities to create.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The created entities.</returns>
        </member>
        <member name="M:Durable.IRepository`1.CreateAsync(`0,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a new entity in the repository.
            </summary>
            <param name="entity">The entity to create.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the created entity.</returns>
        </member>
        <member name="M:Durable.IRepository`1.CreateManyAsync(System.Collections.Generic.IEnumerable{`0},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates multiple entities in the repository.
            </summary>
            <param name="entities">The entities to create.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the created entities.</returns>
        </member>
        <member name="M:Durable.IRepository`1.Update(`0,Durable.ITransaction)">
            <summary>
            Updates an existing entity in the repository.
            </summary>
            <param name="entity">The entity to update.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The updated entity.</returns>
        </member>
        <member name="M:Durable.IRepository`1.UpdateMany(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{`0},Durable.ITransaction)">
            <summary>
            Updates multiple entities that match the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities to update.</param>
            <param name="updateAction">The action to perform on each matching entity.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The number of entities updated.</returns>
        </member>
        <member name="M:Durable.IRepository`1.UpdateField``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,Durable.ITransaction)">
            <summary>
            Updates a specific field on entities that match the specified predicate.
            </summary>
            <typeparam name="TField">The type of the field to update.</typeparam>
            <param name="predicate">The predicate to filter entities to update.</param>
            <param name="field">The field selector expression.</param>
            <param name="value">The new value for the field.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The number of entities updated.</returns>
        </member>
        <member name="M:Durable.IRepository`1.UpdateAsync(`0,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates an existing entity in the repository.
            </summary>
            <param name="entity">The entity to update.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the updated entity.</returns>
        </member>
        <member name="M:Durable.IRepository`1.UpdateManyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,System.Threading.Tasks.Task},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates multiple entities that match the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities to update.</param>
            <param name="updateAction">The async action to perform on each matching entity.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the number of entities updated.</returns>
        </member>
        <member name="M:Durable.IRepository`1.UpdateFieldAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a specific field on entities that match the specified predicate.
            </summary>
            <typeparam name="TField">The type of the field to update.</typeparam>
            <param name="predicate">The predicate to filter entities to update.</param>
            <param name="field">The field selector expression.</param>
            <param name="value">The new value for the field.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the number of entities updated.</returns>
        </member>
        <member name="M:Durable.IRepository`1.BatchUpdate(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},Durable.ITransaction)">
            <summary>
            Performs a batch update on entities that match the specified predicate using an update expression.
            </summary>
            <param name="predicate">The predicate to filter entities to update.</param>
            <param name="updateExpression">The expression defining how to update the entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The number of entities updated.</returns>
        </member>
        <member name="M:Durable.IRepository`1.BatchDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Performs a batch delete on entities that match the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities to delete.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The number of entities deleted.</returns>
        </member>
        <member name="M:Durable.IRepository`1.BatchUpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs a batch update on entities that match the specified predicate using an update expression.
            </summary>
            <param name="predicate">The predicate to filter entities to update.</param>
            <param name="updateExpression">The expression defining how to update the entities.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the number of entities updated.</returns>
        </member>
        <member name="M:Durable.IRepository`1.BatchDeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs a batch delete on entities that match the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities to delete.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the number of entities deleted.</returns>
        </member>
        <member name="M:Durable.IRepository`1.Delete(`0,Durable.ITransaction)">
            <summary>
            Deletes an entity from the repository.
            </summary>
            <param name="entity">The entity to delete.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>True if the entity was deleted; otherwise, false.</returns>
        </member>
        <member name="M:Durable.IRepository`1.DeleteById(System.Object,Durable.ITransaction)">
            <summary>
            Deletes an entity by its identifier.
            </summary>
            <param name="id">The identifier of the entity to delete.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>True if the entity was deleted; otherwise, false.</returns>
        </member>
        <member name="M:Durable.IRepository`1.DeleteMany(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Deletes multiple entities that match the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities to delete.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The number of entities deleted.</returns>
        </member>
        <member name="M:Durable.IRepository`1.DeleteAll(Durable.ITransaction)">
            <summary>
            Deletes all entities from the repository.
            </summary>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The number of entities deleted.</returns>
        </member>
        <member name="M:Durable.IRepository`1.DeleteAsync(`0,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes an entity from the repository.
            </summary>
            <param name="entity">The entity to delete.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with a result of true if the entity was deleted; otherwise, false.</returns>
        </member>
        <member name="M:Durable.IRepository`1.DeleteByIdAsync(System.Object,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes an entity by its identifier.
            </summary>
            <param name="id">The identifier of the entity to delete.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with a result of true if the entity was deleted; otherwise, false.</returns>
        </member>
        <member name="M:Durable.IRepository`1.DeleteManyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes multiple entities that match the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter entities to delete.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the number of entities deleted.</returns>
        </member>
        <member name="M:Durable.IRepository`1.DeleteAllAsync(Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes all entities from the repository.
            </summary>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the number of entities deleted.</returns>
        </member>
        <member name="M:Durable.IRepository`1.Upsert(`0,Durable.ITransaction)">
            <summary>
            Upserts an entity (inserts if new, updates if exists) in the repository.
            </summary>
            <param name="entity">The entity to upsert.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The upserted entity.</returns>
        </member>
        <member name="M:Durable.IRepository`1.UpsertMany(System.Collections.Generic.IEnumerable{`0},Durable.ITransaction)">
            <summary>
            Upserts multiple entities (inserts if new, updates if exists) in the repository.
            </summary>
            <param name="entities">The entities to upsert.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>The upserted entities.</returns>
        </member>
        <member name="M:Durable.IRepository`1.UpsertAsync(`0,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously upserts an entity (inserts if new, updates if exists) in the repository.
            </summary>
            <param name="entity">The entity to upsert.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the upserted entity.</returns>
        </member>
        <member name="M:Durable.IRepository`1.UpsertManyAsync(System.Collections.Generic.IEnumerable{`0},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously upserts multiple entities (inserts if new, updates if exists) in the repository.
            </summary>
            <param name="entities">The entities to upsert.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with the upserted entities.</returns>
        </member>
        <member name="M:Durable.IRepository`1.FromSql(System.String,Durable.ITransaction,System.Object[])">
            <summary>
            Executes a raw SQL query and maps the results to entities of type T.
            </summary>
            <param name="sql">The SQL query to execute.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="parameters">The parameters for the SQL query.</param>
            <returns>A collection of entities mapped from the SQL query results.</returns>
        </member>
        <member name="M:Durable.IRepository`1.FromSql``1(System.String,Durable.ITransaction,System.Object[])">
            <summary>
            Executes a raw SQL query and maps the results to entities of type TResult.
            </summary>
            <typeparam name="TResult">The type to map the query results to.</typeparam>
            <param name="sql">The SQL query to execute.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="parameters">The parameters for the SQL query.</param>
            <returns>A collection of entities of type TResult mapped from the SQL query results.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ExecuteSql(System.String,Durable.ITransaction,System.Object[])">
            <summary>
            Executes a raw SQL command that does not return results (INSERT, UPDATE, DELETE).
            </summary>
            <param name="sql">The SQL command to execute.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="parameters">The parameters for the SQL command.</param>
            <returns>The number of rows affected by the SQL command.</returns>
        </member>
        <member name="M:Durable.IRepository`1.FromSqlAsync(System.String,Durable.ITransaction,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Asynchronously executes a raw SQL query and maps the results to entities of type T.
            </summary>
            <param name="sql">The SQL query to execute.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <param name="parameters">The parameters for the SQL query.</param>
            <returns>An async enumerable of entities mapped from the SQL query results.</returns>
        </member>
        <member name="M:Durable.IRepository`1.FromSqlAsync``1(System.String,Durable.ITransaction,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Asynchronously executes a raw SQL query and maps the results to entities of type TResult.
            </summary>
            <typeparam name="TResult">The type to map the query results to.</typeparam>
            <param name="sql">The SQL query to execute.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <param name="parameters">The parameters for the SQL query.</param>
            <returns>An async enumerable of entities of type TResult mapped from the SQL query results.</returns>
        </member>
        <member name="M:Durable.IRepository`1.ExecuteSqlAsync(System.String,Durable.ITransaction,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Asynchronously executes a raw SQL command that does not return results (INSERT, UPDATE, DELETE).
            </summary>
            <param name="sql">The SQL command to execute.</param>
            <param name="transaction">The transaction to use for the operation.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
            <param name="parameters">The parameters for the SQL command.</param>
            <returns>A task representing the asynchronous operation with the number of rows affected by the SQL command.</returns>
        </member>
        <member name="M:Durable.IRepository`1.Query(Durable.ITransaction)">
            <summary>
            Creates an advanced query builder for constructing complex queries.
            </summary>
            <param name="transaction">The transaction to use for the operation.</param>
            <returns>A query builder instance for the entity type.</returns>
        </member>
        <member name="M:Durable.IRepository`1.BeginTransaction">
            <summary>
            Begins a new database transaction.
            </summary>
            <returns>A new transaction instance.</returns>
        </member>
        <member name="M:Durable.IRepository`1.BeginTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously begins a new database transaction.
            </summary>
            <param name="token">A cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation with a new transaction instance.</returns>
        </member>
        <member name="P:Durable.IRepository`1.Settings">
            <summary>
            Gets the repository settings used to configure the connection
            </summary>
        </member>
        <member name="T:Durable.ISanitizer">
            <summary>
            Interface for sanitizing values that will be inserted into SQL queries.
            Provides methods to safely format different types of values to prevent SQL injection.
            </summary>
        </member>
        <member name="M:Durable.ISanitizer.SanitizeString(System.String)">
            <summary>
            Sanitizes a string value for safe insertion into SQL queries.
            This method should handle SQL injection prevention for string values.
            </summary>
            <param name="value">The string value to sanitize</param>
            <returns>A sanitized string safe for SQL insertion</returns>
        </member>
        <member name="M:Durable.ISanitizer.SanitizeLikeValue(System.String)">
            <summary>
            Sanitizes a string value for use in LIKE operations.
            This method should handle SQL injection prevention and LIKE special characters.
            </summary>
            <param name="value">The string value to sanitize for LIKE operations</param>
            <returns>A sanitized string safe for LIKE operations</returns>
        </member>
        <member name="M:Durable.ISanitizer.SanitizeIdentifier(System.String)">
            <summary>
            Sanitizes an identifier (table name, column name, etc.) for safe insertion into SQL.
            This method should handle SQL injection prevention for SQL identifiers.
            </summary>
            <param name="identifier">The identifier to sanitize</param>
            <returns>A sanitized identifier safe for SQL insertion</returns>
        </member>
        <member name="M:Durable.ISanitizer.RequiresSanitization(System.Object)">
            <summary>
            Determines if a value requires sanitization based on its type.
            Values like Guid, numbers, etc. may not need string sanitization.
            </summary>
            <param name="value">The value to check</param>
            <returns>True if the value needs sanitization, false otherwise</returns>
        </member>
        <member name="M:Durable.ISanitizer.FormatValue(System.Object)">
            <summary>
            Formats a value for safe SQL insertion, applying sanitization as needed.
            This is the main method that should be used for formatting any value.
            </summary>
            <param name="value">The value to format</param>
            <returns>A safely formatted value for SQL insertion</returns>
        </member>
        <member name="T:Durable.ISavepoint">
            <summary>
            Represents a database savepoint that can be released or rolled back within a transaction.
            </summary>
        </member>
        <member name="P:Durable.ISavepoint.Name">
            <summary>
            Gets the name of the savepoint.
            </summary>
        </member>
        <member name="M:Durable.ISavepoint.Release">
            <summary>
            Releases the savepoint, making it no longer available for rollback.
            </summary>
        </member>
        <member name="M:Durable.ISavepoint.Rollback">
            <summary>
            Rolls back the transaction to this savepoint, undoing all changes made after the savepoint was created.
            </summary>
        </member>
        <member name="M:Durable.ISavepoint.ReleaseAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously releases the savepoint, making it no longer available for rollback.
            </summary>
            <param name="token">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous release operation.</returns>
        </member>
        <member name="M:Durable.ISavepoint.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously rolls back the transaction to this savepoint, undoing all changes made after the savepoint was created.
            </summary>
            <param name="token">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous rollback operation.</returns>
        </member>
        <member name="T:Durable.ISqlCapture">
            <summary>
            Provides the ability to capture and expose the last executed SQL statement.
            This interface is optional and can be implemented by repositories that support SQL tracking.
            </summary>
        </member>
        <member name="P:Durable.ISqlCapture.LastExecutedSql">
            <summary>
            Gets the last SQL statement that was executed by this repository instance.
            Returns null if no SQL has been executed or SQL capture is disabled.
            </summary>
        </member>
        <member name="P:Durable.ISqlCapture.LastExecutedSqlWithParameters">
            <summary>
            Gets the last SQL statement with parameter values substituted that was executed by this repository instance.
            This provides a fully executable SQL statement with actual parameter values for debugging purposes.
            Returns null if no SQL has been executed or SQL capture is disabled.
            </summary>
        </member>
        <member name="P:Durable.ISqlCapture.CaptureSql">
            <summary>
            Gets or sets whether SQL statements should be captured and stored.
            Default value is false for performance reasons.
            </summary>
        </member>
        <member name="T:Durable.ISqlTrackingConfiguration">
            <summary>
            Provides configuration options for SQL tracking behavior on repository instances.
            This interface is optional and allows repositories to expose per-instance SQL tracking settings.
            </summary>
        </member>
        <member name="P:Durable.ISqlTrackingConfiguration.IncludeQueryInResults">
            <summary>
            Gets or sets whether query results should automatically include the executed SQL statement.
            When true, repository operations will return IDurableResult objects containing both results and SQL.
            When false, repository operations return standard result types without SQL information.
            Default value is false for performance and backward compatibility.
            </summary>
        </member>
        <member name="T:Durable.ITransaction">
            <summary>
            Represents a database transaction that can be committed or rolled back.
            </summary>
        </member>
        <member name="P:Durable.ITransaction.Connection">
            <summary>
            Gets the database connection associated with this transaction.
            </summary>
        </member>
        <member name="P:Durable.ITransaction.Transaction">
            <summary>
            Gets the underlying database transaction.
            </summary>
        </member>
        <member name="M:Durable.ITransaction.Commit">
            <summary>
            Commits the transaction, making all changes permanent.
            </summary>
        </member>
        <member name="M:Durable.ITransaction.Rollback">
            <summary>
            Rolls back the transaction, undoing all changes made within the transaction.
            </summary>
        </member>
        <member name="M:Durable.ITransaction.CommitAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously commits the transaction, making all changes permanent.
            </summary>
            <param name="token">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous commit operation.</returns>
        </member>
        <member name="M:Durable.ITransaction.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously rolls back the transaction, undoing all changes made within the transaction.
            </summary>
            <param name="token">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous rollback operation.</returns>
        </member>
        <member name="M:Durable.ITransaction.CreateSavepoint(System.String)">
            <summary>
            Creates a savepoint within the transaction.
            </summary>
            <param name="name">The optional name for the savepoint. If null, a name will be generated.</param>
            <returns>An <see cref="T:Durable.ISavepoint"/> representing the created savepoint.</returns>
        </member>
        <member name="M:Durable.ITransaction.CreateSavepointAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a savepoint within the transaction.
            </summary>
            <param name="name">The optional name for the savepoint. If null, a name will be generated.</param>
            <param name="token">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that returns an <see cref="T:Durable.ISavepoint"/> representing the created savepoint.</returns>
        </member>
        <member name="T:Durable.ITransactionScope">
            <summary>
            Represents a transaction scope that manages the lifecycle of a transaction.
            </summary>
        </member>
        <member name="P:Durable.ITransactionScope.Transaction">
            <summary>
            Gets the transaction associated with this scope.
            </summary>
        </member>
        <member name="P:Durable.ITransactionScope.IsCompleted">
            <summary>
            Gets a value indicating whether the transaction scope has been completed.
            </summary>
        </member>
        <member name="M:Durable.ITransactionScope.Complete">
            <summary>
            Marks the transaction scope as complete, indicating that the transaction should be committed.
            </summary>
        </member>
        <member name="M:Durable.ITransactionScope.CompleteAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously marks the transaction scope as complete, indicating that the transaction should be committed.
            </summary>
            <param name="token">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous complete operation.</returns>
        </member>
        <member name="T:Durable.IWindowedQueryBuilder`1">
            <summary>
            Provides methods for building windowed queries with window functions.
            </summary>
            <typeparam name="T">The entity type being queried.</typeparam>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.RowNumber(System.String)">
            <summary>
            Adds a ROW_NUMBER() window function to the query.
            </summary>
            <param name="alias">The alias for the row number column.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.Rank(System.String)">
            <summary>
            Adds a RANK() window function to the query.
            </summary>
            <param name="alias">The alias for the rank column.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.DenseRank(System.String)">
            <summary>
            Adds a DENSE_RANK() window function to the query.
            </summary>
            <param name="alias">The alias for the dense rank column.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.Lead``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Object,System.String)">
            <summary>
            Adds a LEAD() window function to access data from a subsequent row.
            </summary>
            <typeparam name="TKey">The type of the column value.</typeparam>
            <param name="column">The column to access from the subsequent row.</param>
            <param name="offset">The number of rows to look ahead.</param>
            <param name="defaultValue">The default value to return if no subsequent row is found.</param>
            <param name="alias">The alias for the lead column.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.Lag``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Object,System.String)">
            <summary>
            Adds a LAG() window function to access data from a previous row.
            </summary>
            <typeparam name="TKey">The type of the column value.</typeparam>
            <param name="column">The column to access from the previous row.</param>
            <param name="offset">The number of rows to look back.</param>
            <param name="defaultValue">The default value to return if no previous row is found.</param>
            <param name="alias">The alias for the lag column.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.FirstValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Adds a FIRST_VALUE() window function to get the first value in the window frame.
            </summary>
            <typeparam name="TKey">The type of the column value.</typeparam>
            <param name="column">The column to get the first value from.</param>
            <param name="alias">The alias for the first value column.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.LastValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Adds a LAST_VALUE() window function to get the last value in the window frame.
            </summary>
            <typeparam name="TKey">The type of the column value.</typeparam>
            <param name="column">The column to get the last value from.</param>
            <param name="alias">The alias for the last value column.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.NthValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.String)">
            <summary>
            Adds a NTH_VALUE() window function to get the nth value in the window frame.
            </summary>
            <typeparam name="TKey">The type of the column value.</typeparam>
            <param name="column">The column to get the nth value from.</param>
            <param name="n">The position of the value to retrieve (1-based).</param>
            <param name="alias">The alias for the nth value column.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.Sum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Adds a SUM() window function to calculate the sum of values in the window frame.
            </summary>
            <typeparam name="TKey">The type of the column value.</typeparam>
            <param name="column">The column to sum.</param>
            <param name="alias">The alias for the sum column.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.Avg``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Adds an AVG() window function to calculate the average of values in the window frame.
            </summary>
            <typeparam name="TKey">The type of the column value.</typeparam>
            <param name="column">The column to average.</param>
            <param name="alias">The alias for the average column.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.Count(System.String)">
            <summary>
            Adds a COUNT() window function to count rows in the window frame.
            </summary>
            <param name="alias">The alias for the count column.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Adds a MIN() window function to find the minimum value in the window frame.
            </summary>
            <typeparam name="TKey">The type of the column value.</typeparam>
            <param name="column">The column to find the minimum value from.</param>
            <param name="alias">The alias for the minimum column.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Adds a MAX() window function to find the maximum value in the window frame.
            </summary>
            <typeparam name="TKey">The type of the column value.</typeparam>
            <param name="column">The column to find the maximum value from.</param>
            <param name="alias">The alias for the maximum column.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.PartitionBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Partitions the result set by the specified key selector for the window function.
            </summary>
            <typeparam name="TKey">The type of the partition key.</typeparam>
            <param name="keySelector">The expression to partition by.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Orders the window frame by the specified key selector in ascending order.
            </summary>
            <typeparam name="TKey">The type of the order key.</typeparam>
            <param name="keySelector">The expression to order by.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Orders the window frame by the specified key selector in descending order.
            </summary>
            <typeparam name="TKey">The type of the order key.</typeparam>
            <param name="keySelector">The expression to order by.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.Rows(System.Int32,System.Int32)">
            <summary>
            Specifies a ROWS window frame with the given preceding and following row counts.
            </summary>
            <param name="preceding">The number of preceding rows to include.</param>
            <param name="following">The number of following rows to include.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.RowsUnboundedPreceding">
            <summary>
            Specifies a ROWS window frame from unbounded preceding to current row.
            </summary>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.RowsUnboundedFollowing">
            <summary>
            Specifies a ROWS window frame from current row to unbounded following.
            </summary>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.RowsBetween(System.String,System.String)">
            <summary>
            Specifies a ROWS window frame between the given start and end boundaries.
            </summary>
            <param name="start">The start boundary of the window frame.</param>
            <param name="end">The end boundary of the window frame.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.Range(System.Int32,System.Int32)">
            <summary>
            Specifies a RANGE window frame with the given preceding and following value ranges.
            </summary>
            <param name="preceding">The preceding value range to include.</param>
            <param name="following">The following value range to include.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.RangeUnboundedPreceding">
            <summary>
            Specifies a RANGE window frame from unbounded preceding to current row.
            </summary>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.RangeUnboundedFollowing">
            <summary>
            Specifies a RANGE window frame from current row to unbounded following.
            </summary>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.RangeBetween(System.String,System.String)">
            <summary>
            Specifies a RANGE window frame between the given start and end boundaries.
            </summary>
            <param name="start">The start boundary of the window frame.</param>
            <param name="end">The end boundary of the window frame.</param>
            <returns>The current query builder for method chaining.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.EndWindow">
            <summary>
            Ends the window function configuration and returns to the regular query builder.
            </summary>
            <returns>The regular query builder for continued query construction.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.Execute">
            <summary>
            Executes the windowed query and returns the results.
            </summary>
            <returns>An enumerable collection of query results.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the windowed query and returns the results.
            </summary>
            <param name="token">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that returns an enumerable collection of query results.</returns>
        </member>
        <member name="M:Durable.IWindowedQueryBuilder`1.ExecuteAsyncEnumerable(System.Threading.CancellationToken)">
            <summary>
            Executes the windowed query and returns the results as an async enumerable.
            </summary>
            <param name="token">A cancellation token that can be used to cancel the operation.</param>
            <returns>An async enumerable collection of query results.</returns>
        </member>
        <member name="T:Durable.ManyToManyNavigationPropertyAttribute">
            <summary>
            Attribute to mark a property as a many-to-many navigation property with junction entity configuration.
            </summary>
        </member>
        <member name="P:Durable.ManyToManyNavigationPropertyAttribute.JunctionEntityType">
            <summary>
            Gets the type of the junction entity that connects the two entities in the many-to-many relationship.
            </summary>
        </member>
        <member name="P:Durable.ManyToManyNavigationPropertyAttribute.ThisEntityForeignKeyProperty">
            <summary>
            Gets the foreign key property name in the junction entity that references this entity.
            </summary>
        </member>
        <member name="P:Durable.ManyToManyNavigationPropertyAttribute.RelatedEntityForeignKeyProperty">
            <summary>
            Gets the foreign key property name in the junction entity that references the related entity.
            </summary>
        </member>
        <member name="M:Durable.ManyToManyNavigationPropertyAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.ManyToManyNavigationPropertyAttribute"/> class.
            </summary>
            <param name="junctionEntityType">The type of the junction entity.</param>
            <param name="thisEntityForeignKeyProperty">The foreign key property name for this entity in the junction table.</param>
            <param name="relatedEntityForeignKeyProperty">The foreign key property name for the related entity in the junction table.</param>
        </member>
        <member name="T:Durable.NavigationPropertyAttribute">
            <summary>
            Attribute to mark a property as a navigation property and specify its foreign key property.
            </summary>
        </member>
        <member name="P:Durable.NavigationPropertyAttribute.ForeignKeyProperty">
            <summary>
            Gets the name of the foreign key property that establishes the relationship.
            </summary>
        </member>
        <member name="M:Durable.NavigationPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.NavigationPropertyAttribute"/> class.
            </summary>
            <param name="foreignKeyProperty">The name of the foreign key property.</param>
        </member>
        <member name="T:Durable.OptimisticConcurrencyException">
            <summary>
            Exception thrown when an optimistic concurrency conflict is detected during entity updates.
            </summary>
        </member>
        <member name="P:Durable.OptimisticConcurrencyException.Entity">
            <summary>
            Gets the entity that caused the concurrency conflict.
            </summary>
        </member>
        <member name="P:Durable.OptimisticConcurrencyException.ExpectedVersion">
            <summary>
            Gets the expected version value that was used in the update operation.
            </summary>
        </member>
        <member name="P:Durable.OptimisticConcurrencyException.ActualVersion">
            <summary>
            Gets the actual version value found in the database.
            </summary>
        </member>
        <member name="M:Durable.OptimisticConcurrencyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.OptimisticConcurrencyException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Durable.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.OptimisticConcurrencyException"/> class with a specified error message and inner exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Durable.OptimisticConcurrencyException.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.OptimisticConcurrencyException"/> class with entity and version information.
            </summary>
            <param name="entity">The entity that caused the conflict.</param>
            <param name="expectedVersion">The expected version value.</param>
            <param name="actualVersion">The actual version value found in the database.</param>
        </member>
        <member name="M:Durable.OptimisticConcurrencyException.#ctor(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.OptimisticConcurrencyException"/> class with a custom message and entity version information.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="entity">The entity that caused the conflict.</param>
            <param name="expectedVersion">The expected version value.</param>
            <param name="actualVersion">The actual version value found in the database.</param>
        </member>
        <member name="T:Durable.PooledConnection">
            <summary>
            Represents a database connection wrapper used internally by the ConnectionPool to track connection state and usage.
            </summary>
        </member>
        <member name="P:Durable.PooledConnection.Connection">
            <summary>
            Gets the underlying database connection.
            </summary>
        </member>
        <member name="P:Durable.PooledConnection.Created">
            <summary>
            Gets the UTC timestamp when this connection was created.
            </summary>
        </member>
        <member name="P:Durable.PooledConnection.LastUsed">
            <summary>
            Gets or sets the UTC timestamp when this connection was last used.
            </summary>
        </member>
        <member name="P:Durable.PooledConnection.IsInUse">
            <summary>
            Gets or sets a value indicating whether this connection is currently in use.
            </summary>
        </member>
        <member name="M:Durable.PooledConnection.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Initializes a new instance of the PooledConnection class.
            </summary>
            <param name="connection">The database connection to wrap.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when connection is null.</exception>
        </member>
        <member name="T:Durable.PrimaryKeyInfo">
            <summary>
            Represents information about a primary key column and its corresponding property.
            </summary>
        </member>
        <member name="P:Durable.PrimaryKeyInfo.ColumnName">
            <summary>
            Gets or sets the name of the primary key column in the database.
            </summary>
        </member>
        <member name="P:Durable.PrimaryKeyInfo.Property">
            <summary>
            Gets or sets the PropertyInfo for the primary key property on the entity.
            </summary>
        </member>
        <member name="M:Durable.PrimaryKeyInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.PrimaryKeyInfo"/> class.
            </summary>
        </member>
        <member name="M:Durable.PrimaryKeyInfo.#ctor(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.PrimaryKeyInfo"/> class.
            </summary>
            <param name="columnName">The name of the primary key column.</param>
            <param name="property">The PropertyInfo for the primary key property.</param>
        </member>
        <member name="T:Durable.PropertyAttribute">
            <summary>
            Attribute to specify database column properties for a field or property.
            </summary>
        </member>
        <member name="P:Durable.PropertyAttribute.Name">
            <summary>
            Gets the name of the database column.
            </summary>
        </member>
        <member name="P:Durable.PropertyAttribute.PropertyFlags">
            <summary>
            Gets the property flags that define special behaviors for this property.
            </summary>
        </member>
        <member name="P:Durable.PropertyAttribute.MaxLength">
            <summary>
            Gets the maximum length constraint for the property value.
            </summary>
        </member>
        <member name="M:Durable.PropertyAttribute.#ctor(System.String,Durable.Flags,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.PropertyAttribute"/> class.
            </summary>
            <param name="name">The name of the database column.</param>
            <param name="flags">The property flags (default is None).</param>
            <param name="maxLength">The maximum length constraint (default is 0 for no limit).</param>
        </member>
        <member name="T:Durable.RepositoryExtensions">
            <summary>
            Provides extension methods for IRepository to simplify query operations.
            </summary>
        </member>
        <member name="M:Durable.RepositoryExtensions.SelectWithQuery``1(Durable.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Executes a query with an optional predicate and returns the results with the generated SQL query.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository to query.</param>
            <param name="predicate">Optional predicate to filter results.</param>
            <param name="transaction">Optional transaction to use for the query.</param>
            <returns>A durable result containing the entities and the generated SQL query.</returns>
        </member>
        <member name="M:Durable.RepositoryExtensions.SelectWithQueryAsync``1(Durable.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a query with an optional predicate and returns the results with the generated SQL query.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository to query.</param>
            <param name="predicate">Optional predicate to filter results.</param>
            <param name="transaction">Optional transaction to use for the query.</param>
            <param name="token">Cancellation token.</param>
            <returns>A task that resolves to a durable result containing the entities and the generated SQL query.</returns>
        </member>
        <member name="M:Durable.RepositoryExtensions.SelectAsyncWithQuery``1(Durable.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Returns an async enumerable query result with an optional predicate and the generated SQL query.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository to query.</param>
            <param name="predicate">Optional predicate to filter results.</param>
            <param name="transaction">Optional transaction to use for the query.</param>
            <param name="token">Cancellation token.</param>
            <returns>An async durable result that can be enumerated asynchronously.</returns>
        </member>
        <member name="M:Durable.RepositoryExtensions.GetSelectQuery``1(Durable.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Gets the generated SQL query string for a select operation with an optional predicate.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository to query.</param>
            <param name="predicate">Optional predicate to filter results.</param>
            <param name="transaction">Optional transaction to use for the query.</param>
            <returns>The generated SQL query string.</returns>
        </member>
        <member name="T:Durable.RepositoryResultExtensions">
            <summary>
            Extension methods to provide backward compatibility for repository results.
            </summary>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.AsEnumerable``1(Durable.IDurableResult{``0})">
            <summary>
            Extracts just the data from a DurableResult for backward compatibility.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="result">The durable result.</param>
            <returns>The enumerable data without the query information.</returns>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.AsAsyncEnumerable``1(Durable.IAsyncDurableResult{``0})">
            <summary>
            Extracts just the async enumerable data from an AsyncDurableResult for backward compatibility.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="result">The async durable result.</param>
            <returns>The async enumerable data without the query information.</returns>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.AsAsyncEnumerable``1(System.Threading.Tasks.Task{Durable.IAsyncDurableResult{``0}})">
            <summary>
            Extension method to get async enumerable data from a Task of AsyncDurableResult.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="resultTask">The task containing the async durable result.</param>
            <returns>An async enumerable of the data.</returns>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.AsEntity``1(Durable.IDurableResult{``0})">
            <summary>
            Extracts a single entity from a DurableResult for backward compatibility.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="result">The durable result.</param>
            <returns>The first entity or default.</returns>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.AsEntity``1(System.Threading.Tasks.Task{Durable.IDurableResult{``0}})">
            <summary>
            Extracts a single entity from a Task&lt;DurableResult&lt;T&gt;&gt; for backward compatibility.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="resultTask">The task containing the durable result.</param>
            <returns>The first entity or default.</returns>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.AsValue``1(Durable.IDurableResult{``0})">
            <summary>
            Extracts a single value from a DurableResult for backward compatibility.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="result">The durable result.</param>
            <returns>The first value or default.</returns>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.AsValue``1(System.Threading.Tasks.Task{Durable.IDurableResult{``0}})">
            <summary>
            Extracts a single value from a Task&lt;DurableResult&lt;T&gt;&gt; for backward compatibility.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="resultTask">The task containing the durable result.</param>
            <returns>The first value or default.</returns>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.AsCount(Durable.IDurableResult{System.Int32})">
            <summary>
            Extracts a count value from a DurableResult&lt;int&gt; for backward compatibility.
            </summary>
            <param name="result">The durable result.</param>
            <returns>The count value.</returns>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.AsCount(System.Threading.Tasks.Task{Durable.IDurableResult{System.Int32}})">
            <summary>
            Extracts a count value from a Task&lt;DurableResult&lt;int&gt;&gt; for backward compatibility.
            </summary>
            <param name="resultTask">The task containing the durable result.</param>
            <returns>The count value.</returns>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.CreateWithQuery``1(Durable.IRepository{``0},``0,Durable.ITransaction)">
            <summary>
            Creates an entity and returns both the result and the executed SQL query.
            Enables SQL capture for the duration of this operation.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository instance.</param>
            <param name="entity">The entity to create.</param>
            <param name="transaction">Optional transaction to use for the operation.</param>
            <returns>A durable result containing the created entity and the executed SQL query.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when repository or entity is null.</exception>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.CreateWithQueryAsync``1(Durable.IRepository{``0},``0,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates an entity and returns both the result and the executed SQL query.
            Enables SQL capture for the duration of this operation.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository instance.</param>
            <param name="entity">The entity to create.</param>
            <param name="transaction">Optional transaction to use for the operation.</param>
            <param name="token">Cancellation token.</param>
            <returns>A task representing the asynchronous operation with a durable result containing the created entity and the executed SQL query.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when repository or entity is null.</exception>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.ReadManyWithQuery``1(Durable.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Reads multiple entities and returns both the results and the executed SQL query.
            Enables SQL capture for the duration of this operation.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository instance.</param>
            <param name="predicate">Optional predicate to filter entities.</param>
            <param name="transaction">Optional transaction to use for the operation.</param>
            <returns>A durable result containing the entities and the executed SQL query.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when repository is null.</exception>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.ReadManyWithQueryAsync``1(Durable.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads multiple entities and returns both the results and the executed SQL query.
            Enables SQL capture for the duration of this operation.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository instance.</param>
            <param name="predicate">Optional predicate to filter entities.</param>
            <param name="transaction">Optional transaction to use for the operation.</param>
            <param name="token">Cancellation token.</param>
            <returns>A task representing the asynchronous operation with a durable result containing the entities and the executed SQL query.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when repository is null.</exception>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.UpdateWithQuery``1(Durable.IRepository{``0},``0,Durable.ITransaction)">
            <summary>
            Updates an entity and returns both the result and the executed SQL query.
            Enables SQL capture for the duration of this operation.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository instance.</param>
            <param name="entity">The entity to update.</param>
            <param name="transaction">Optional transaction to use for the operation.</param>
            <returns>A durable result containing the updated entity and the executed SQL query.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when repository or entity is null.</exception>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.UpdateWithQueryAsync``1(Durable.IRepository{``0},``0,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates an entity and returns both the result and the executed SQL query.
            Enables SQL capture for the duration of this operation.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository instance.</param>
            <param name="entity">The entity to update.</param>
            <param name="transaction">Optional transaction to use for the operation.</param>
            <param name="token">Cancellation token.</param>
            <returns>A task representing the asynchronous operation with a durable result containing the updated entity and the executed SQL query.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when repository or entity is null.</exception>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.DeleteWithQuery``1(Durable.IRepository{``0},``0,Durable.ITransaction)">
            <summary>
            Deletes an entity and returns both the result and the executed SQL query.
            Enables SQL capture for the duration of this operation.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository instance.</param>
            <param name="entity">The entity to delete.</param>
            <param name="transaction">Optional transaction to use for the operation.</param>
            <returns>A durable result containing the deletion result and the executed SQL query.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when repository or entity is null.</exception>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.DeleteWithQueryAsync``1(Durable.IRepository{``0},``0,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes an entity and returns both the result and the executed SQL query.
            Enables SQL capture for the duration of this operation.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository instance.</param>
            <param name="entity">The entity to delete.</param>
            <param name="transaction">Optional transaction to use for the operation.</param>
            <param name="token">Cancellation token.</param>
            <returns>A task representing the asynchronous operation with a durable result containing the deletion result and the executed SQL query.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when repository or entity is null.</exception>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.DeleteManyWithQuery``1(Durable.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Durable.ITransaction)">
            <summary>
            Deletes multiple entities that match the specified predicate and returns both the result and the executed SQL query.
            Enables SQL capture for the duration of this operation.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository instance.</param>
            <param name="predicate">The predicate to filter entities to delete.</param>
            <param name="transaction">Optional transaction to use for the operation.</param>
            <returns>A durable result containing the number of deleted entities and the executed SQL query.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when repository or predicate is null.</exception>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.DeleteManyWithQueryAsync``1(Durable.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes multiple entities that match the specified predicate and returns both the result and the executed SQL query.
            Enables SQL capture for the duration of this operation.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository instance.</param>
            <param name="predicate">The predicate to filter entities to delete.</param>
            <param name="transaction">Optional transaction to use for the operation.</param>
            <param name="token">Cancellation token.</param>
            <returns>A task representing the asynchronous operation with a durable result containing the number of deleted entities and the executed SQL query.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when repository or predicate is null.</exception>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.CreateAuto``1(Durable.IRepository{``0},``0,Durable.ITransaction)">
            <summary>
            Automatically determines whether to return standard results or SQL-enhanced results based on configuration.
            Respects global, thread-local, and instance-level SQL tracking settings.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository instance.</param>
            <param name="entity">The entity to create.</param>
            <param name="transaction">Optional transaction to use for the operation.</param>
            <returns>Either T or IDurableResult&lt;T&gt; depending on configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when repository or entity is null.</exception>
        </member>
        <member name="M:Durable.RepositoryResultExtensions.CreateAutoAsync``1(Durable.IRepository{``0},``0,Durable.ITransaction,System.Threading.CancellationToken)">
            <summary>
            Automatically determines whether to return standard results or SQL-enhanced results based on configuration.
            Respects global, thread-local, and instance-level SQL tracking settings.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository instance.</param>
            <param name="entity">The entity to create.</param>
            <param name="transaction">Optional transaction to use for the operation.</param>
            <param name="token">Cancellation token.</param>
            <returns>Either Task&lt;T&gt; or Task&lt;IDurableResult&lt;T&gt;&gt; depending on configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when repository or entity is null.</exception>
        </member>
        <member name="T:Durable.RepositorySettings">
            <summary>
            Abstract base class for repository connection settings.
            Derived classes should implement provider-specific connection string parsing and building.
            </summary>
        </member>
        <member name="P:Durable.RepositorySettings.Type">
            <summary>
            The type of repository
            </summary>
        </member>
        <member name="P:Durable.RepositorySettings.Hostname">
            <summary>
            The hostname or server address. Default: null
            </summary>
        </member>
        <member name="P:Durable.RepositorySettings.Port">
            <summary>
            The port number for the database server. Default: null (uses provider default)
            </summary>
        </member>
        <member name="P:Durable.RepositorySettings.Username">
            <summary>
            The username for authentication. Default: null
            </summary>
        </member>
        <member name="P:Durable.RepositorySettings.Password">
            <summary>
            The password for authentication. Default: null
            </summary>
        </member>
        <member name="P:Durable.RepositorySettings.Database">
            <summary>
            The database name. Default: null
            </summary>
        </member>
        <member name="P:Durable.RepositorySettings.AdditionalProperties">
            <summary>
            Additional provider-specific properties. Default: null
            </summary>
        </member>
        <member name="M:Durable.RepositorySettings.#ctor">
            <summary>
            Initializes a new instance of the RepositorySettings class
            </summary>
        </member>
        <member name="M:Durable.RepositorySettings.BuildConnectionString">
            <summary>
            Builds a connection string from the current settings
            </summary>
            <returns>A connection string</returns>
        </member>
        <member name="T:Durable.RepositoryType">
            <summary>
            Represents a repository type in an extensible, type-safe manner.
            This class provides built-in repository types (Sqlite, MySql, Postgres, SqlServer)
            and allows users to define custom repository types.
            </summary>
        </member>
        <member name="P:Durable.RepositoryType.Identifier">
            <summary>
            The unique identifier for this repository type
            </summary>
        </member>
        <member name="P:Durable.RepositoryType.DisplayName">
            <summary>
            The display name for this repository type
            </summary>
        </member>
        <member name="F:Durable.RepositoryType.Sqlite">
            <summary>
            Represents a SQLite repository
            </summary>
        </member>
        <member name="F:Durable.RepositoryType.MySql">
            <summary>
            Represents a MySQL repository
            </summary>
        </member>
        <member name="F:Durable.RepositoryType.Postgres">
            <summary>
            Represents a PostgreSQL repository
            </summary>
        </member>
        <member name="F:Durable.RepositoryType.SqlServer">
            <summary>
            Represents a SQL Server repository
            </summary>
        </member>
        <member name="M:Durable.RepositoryType.#ctor(System.String,System.String)">
            <summary>
            Creates a new repository type with the specified identifier and display name
            </summary>
            <param name="identifier">The unique identifier for the repository type (case-insensitive)</param>
            <param name="displayName">The display name for the repository type</param>
            <exception cref="T:System.ArgumentNullException">Thrown when identifier or displayName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when identifier or displayName is empty or whitespace</exception>
        </member>
        <member name="M:Durable.RepositoryType.Equals(Durable.RepositoryType)">
            <summary>
            Determines whether this repository type is equal to another repository type
            </summary>
            <param name="other">The other repository type to compare</param>
            <returns>True if the repository types are equal, false otherwise</returns>
        </member>
        <member name="M:Durable.RepositoryType.Equals(System.Object)">
            <summary>
            Determines whether this repository type is equal to another object
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Durable.RepositoryType.GetHashCode">
            <summary>
            Gets the hash code for this repository type
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Durable.RepositoryType.ToString">
            <summary>
            Returns the display name of this repository type
            </summary>
            <returns>The display name</returns>
        </member>
        <member name="M:Durable.RepositoryType.op_Equality(Durable.RepositoryType,Durable.RepositoryType)">
            <summary>
            Determines whether two repository types are equal
            </summary>
            <param name="left">The first repository type</param>
            <param name="right">The second repository type</param>
            <returns>True if the repository types are equal, false otherwise</returns>
        </member>
        <member name="M:Durable.RepositoryType.op_Inequality(Durable.RepositoryType,Durable.RepositoryType)">
            <summary>
            Determines whether two repository types are not equal
            </summary>
            <param name="left">The first repository type</param>
            <param name="right">The second repository type</param>
            <returns>True if the repository types are not equal, false otherwise</returns>
        </member>
        <member name="T:Durable.SetOperation`1">
            <summary>
            Represents a set operation (UNION, INTERSECT, EXCEPT) between queries.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
        </member>
        <member name="P:Durable.SetOperation`1.Type">
            <summary>
            Gets or sets the type of set operation.
            </summary>
        </member>
        <member name="P:Durable.SetOperation`1.OtherQuery">
            <summary>
            Gets or sets the other query to combine with.
            </summary>
        </member>
        <member name="M:Durable.SetOperation`1.#ctor(Durable.SetOperationType,Durable.IQueryBuilder{`0})">
            <summary>
            Initializes a new instance of the SetOperation class.
            </summary>
            <param name="type">The type of set operation.</param>
            <param name="otherQuery">The other query to combine with.</param>
        </member>
        <member name="T:Durable.SetOperationType">
            <summary>
            Defines the types of set operations that can be performed on collections.
            </summary>
        </member>
        <member name="F:Durable.SetOperationType.Union">
            <summary>
            Represents a union operation that returns distinct elements from both collections.
            </summary>
        </member>
        <member name="F:Durable.SetOperationType.UnionAll">
            <summary>
            Represents a union operation that returns all elements from both collections including duplicates.
            </summary>
        </member>
        <member name="F:Durable.SetOperationType.Intersect">
            <summary>
            Represents an intersect operation that returns elements common to both collections.
            </summary>
        </member>
        <member name="F:Durable.SetOperationType.Except">
            <summary>
            Represents an except operation that returns elements from the first collection not in the second.
            </summary>
        </member>
        <member name="T:Durable.SimpleChangeTracker`1">
            <summary>
            A simple implementation of IChangeTracker that tracks entity changes by comparing current values with original values.
            </summary>
            <typeparam name="T">The entity type to track changes for.</typeparam>
        </member>
        <member name="M:Durable.SimpleChangeTracker`1.#ctor(System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            Initializes a new instance of the SimpleChangeTracker class.
            </summary>
            <param name="columnMappings">Dictionary mapping column names to property information.</param>
        </member>
        <member name="M:Durable.SimpleChangeTracker`1.TrackEntity(`0)">
            <summary>
            Starts tracking changes for the specified entity by creating a copy of its current state.
            </summary>
            <param name="entity">The entity to start tracking.</param>
        </member>
        <member name="M:Durable.SimpleChangeTracker`1.GetOriginalValues(`0)">
            <summary>
            Gets the original values for the specified entity.
            </summary>
            <param name="entity">The entity to get original values for.</param>
            <returns>The original values of the entity, or null if the entity is not being tracked.</returns>
        </member>
        <member name="M:Durable.SimpleChangeTracker`1.HasChanges(`0)">
            <summary>
            Determines whether the specified entity has changes by comparing current values with original values.
            </summary>
            <param name="entity">The entity to check for changes.</param>
            <returns>True if the entity has changes; otherwise, false.</returns>
        </member>
        <member name="M:Durable.SimpleChangeTracker`1.StopTracking(`0)">
            <summary>
            Stops tracking changes for the specified entity.
            </summary>
            <param name="entity">The entity to stop tracking.</param>
        </member>
        <member name="M:Durable.SimpleChangeTracker`1.Clear">
            <summary>
            Clears all tracked entities from the change tracker.
            </summary>
        </member>
        <member name="M:Durable.SimpleChangeTracker`1.CreateCopy(`0)">
            <summary>
            Creates a copy of the specified entity for tracking original values.
            </summary>
            <param name="entity">The entity to copy.</param>
            <returns>A copy of the entity, or null if the entity is null.</returns>
        </member>
        <member name="M:Durable.SimpleChangeTracker`1.ObjectEquals(System.Object,System.Object)">
            <summary>
            Compares two objects for equality, handling null values appropriately.
            </summary>
            <param name="obj1">The first object to compare.</param>
            <param name="obj2">The second object to compare.</param>
            <returns>True if the objects are equal; otherwise, false.</returns>
        </member>
        <member name="T:Durable.SqlCaptureScope">
            <summary>
            Disposable helper class that temporarily enables SQL capture and restores the original setting when disposed.
            </summary>
        </member>
        <member name="M:Durable.SqlCaptureScope.#ctor(Durable.ISqlCapture)">
            <summary>
            Initializes a new instance of the SqlCaptureScope class.
            </summary>
            <param name="sqlCapture">The SQL capture instance to manage.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when sqlCapture is null.</exception>
        </member>
        <member name="M:Durable.SqlCaptureScope.Dispose">
            <summary>
            Restores the original SQL capture setting.
            </summary>
        </member>
        <member name="T:Durable.TransactionScope">
            <summary>
            Provides a convenient way to manage database transactions with automatic rollback on disposal if not completed.
            Supports nested transaction scopes by reusing existing transactions on the same connection.
            </summary>
        </member>
        <member name="P:Durable.TransactionScope.Current">
            <summary>
            Gets the current transaction scope for the current async context.
            </summary>
        </member>
        <member name="P:Durable.TransactionScope.Transaction">
            <summary>
            Gets the transaction associated with this scope.
            </summary>
        </member>
        <member name="P:Durable.TransactionScope.IsCompleted">
            <summary>
            Gets a value indicating whether this transaction scope has been completed.
            </summary>
        </member>
        <member name="M:Durable.TransactionScope.#ctor(Durable.ITransaction,System.Boolean,Durable.TransactionScope)">
            <summary>
            Initializes a new instance of the TransactionScope class.
            </summary>
            <param name="transaction">The transaction to manage.</param>
            <param name="ownsTransaction">Whether this scope owns the transaction and should commit/rollback it.</param>
            <param name="parent">The parent transaction scope, if any.</param>
        </member>
        <member name="M:Durable.TransactionScope.Create(Durable.ITransaction)">
            <summary>
            Creates a new transaction scope with the specified transaction.
            If there's an existing scope with the same connection, creates a nested scope.
            </summary>
            <param name="transaction">The transaction to use for the scope.</param>
            <returns>A new transaction scope.</returns>
        </member>
        <member name="M:Durable.TransactionScope.CreateAsync``1(Durable.IRepository{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a new transaction scope by beginning a transaction on the specified repository.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository to begin the transaction on.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task that resolves to a new transaction scope.</returns>
        </member>
        <member name="M:Durable.TransactionScope.Create``1(Durable.IRepository{``0})">
            <summary>
            Creates a new transaction scope by beginning a transaction on the specified repository.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="repository">The repository to begin the transaction on.</param>
            <returns>A new transaction scope.</returns>
        </member>
        <member name="M:Durable.TransactionScope.Complete">
            <summary>
            Marks the transaction scope as completed, committing the transaction if this scope owns it.
            </summary>
        </member>
        <member name="M:Durable.TransactionScope.CompleteAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously marks the transaction scope as completed, committing the transaction if this scope owns it.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Durable.TransactionScope.Dispose">
            <summary>
            Disposes the transaction scope, rolling back the transaction if not completed and this scope owns it.
            </summary>
        </member>
        <member name="T:Durable.TransactionScopeExtensions">
            <summary>
            Extension methods for executing operations within transaction scopes.
            </summary>
        </member>
        <member name="M:Durable.TransactionScopeExtensions.ExecuteInTransactionScope``1(Durable.IRepository{``0},System.Action)">
            <summary>
            Executes an action within a transaction scope for the specified repository.
            </summary>
            <typeparam name="T">The type of entity managed by the repository.</typeparam>
            <param name="repository">The repository to create a transaction scope for.</param>
            <param name="action">The action to execute within the transaction scope.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when repository or action is null.</exception>
        </member>
        <member name="M:Durable.TransactionScopeExtensions.ExecuteInTransactionScope``2(Durable.IRepository{``0},System.Func{``1})">
            <summary>
            Executes a function within a transaction scope for the specified repository and returns the result.
            </summary>
            <typeparam name="T">The type of entity managed by the repository.</typeparam>
            <typeparam name="TResult">The type of the result returned by the function.</typeparam>
            <param name="repository">The repository to create a transaction scope for.</param>
            <param name="func">The function to execute within the transaction scope.</param>
            <returns>The result of the function execution.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when repository or func is null.</exception>
        </member>
        <member name="M:Durable.TransactionScopeExtensions.ExecuteInTransactionScopeAsync``1(Durable.IRepository{``0},System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a task within a transaction scope for the specified repository.
            </summary>
            <typeparam name="T">The type of entity managed by the repository.</typeparam>
            <param name="repository">The repository to create a transaction scope for.</param>
            <param name="func">The task function to execute within the transaction scope.</param>
            <param name="token">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when repository or func is null.</exception>
        </member>
        <member name="M:Durable.TransactionScopeExtensions.ExecuteInTransactionScopeAsync``2(Durable.IRepository{``0},System.Func{System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a task function within a transaction scope for the specified repository and returns the result.
            </summary>
            <typeparam name="T">The type of entity managed by the repository.</typeparam>
            <typeparam name="TResult">The type of the result returned by the function.</typeparam>
            <param name="repository">The repository to create a transaction scope for.</param>
            <param name="func">The task function to execute within the transaction scope.</param>
            <param name="token">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation containing the result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when repository or func is null.</exception>
        </member>
        <member name="M:Durable.TransactionScopeExtensions.ExecuteInTransactionScope(Durable.ITransaction,System.Action)">
            <summary>
            Executes an action within a transaction scope for the specified transaction.
            </summary>
            <param name="transaction">The transaction to create a transaction scope for.</param>
            <param name="action">The action to execute within the transaction scope.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when transaction or action is null.</exception>
        </member>
        <member name="M:Durable.TransactionScopeExtensions.ExecuteInTransactionScope``1(Durable.ITransaction,System.Func{``0})">
            <summary>
            Executes a function within a transaction scope for the specified transaction and returns the result.
            </summary>
            <typeparam name="TResult">The type of the result returned by the function.</typeparam>
            <param name="transaction">The transaction to create a transaction scope for.</param>
            <param name="func">The function to execute within the transaction scope.</param>
            <returns>The result of the function execution.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when transaction or func is null.</exception>
        </member>
        <member name="M:Durable.TransactionScopeExtensions.ExecuteInTransactionScopeAsync(Durable.ITransaction,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a task within a transaction scope for the specified transaction.
            </summary>
            <param name="transaction">The transaction to create a transaction scope for.</param>
            <param name="func">The task function to execute within the transaction scope.</param>
            <param name="token">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when transaction or func is null.</exception>
        </member>
        <member name="M:Durable.TransactionScopeExtensions.ExecuteInTransactionScopeAsync``1(Durable.ITransaction,System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a task function within a transaction scope for the specified transaction and returns the result.
            </summary>
            <typeparam name="TResult">The type of the result returned by the function.</typeparam>
            <param name="transaction">The transaction to create a transaction scope for.</param>
            <param name="func">The task function to execute within the transaction scope.</param>
            <param name="token">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation containing the result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when transaction or func is null.</exception>
        </member>
        <member name="M:Durable.TransactionScopeExtensions.ExecuteWithSavepoint(Durable.ITransaction,System.Action,System.String)">
            <summary>
            Executes an action within a savepoint scope for the specified transaction.
            </summary>
            <param name="transaction">The transaction to create a savepoint for.</param>
            <param name="action">The action to execute within the savepoint scope.</param>
            <param name="savepointName">Optional name for the savepoint. If null, a default name will be used.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when transaction or action is null.</exception>
        </member>
        <member name="M:Durable.TransactionScopeExtensions.ExecuteWithSavepoint``1(Durable.ITransaction,System.Func{``0},System.String)">
            <summary>
            Executes a function within a savepoint scope for the specified transaction and returns the result.
            </summary>
            <typeparam name="TResult">The type of the result returned by the function.</typeparam>
            <param name="transaction">The transaction to create a savepoint for.</param>
            <param name="func">The function to execute within the savepoint scope.</param>
            <param name="savepointName">Optional name for the savepoint. If null, a default name will be used.</param>
            <returns>The result of the function execution.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when transaction or func is null.</exception>
        </member>
        <member name="M:Durable.TransactionScopeExtensions.ExecuteWithSavepointAsync(Durable.ITransaction,System.Func{System.Threading.Tasks.Task},System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a task within a savepoint scope for the specified transaction.
            </summary>
            <param name="transaction">The transaction to create a savepoint for.</param>
            <param name="func">The task function to execute within the savepoint scope.</param>
            <param name="savepointName">Optional name for the savepoint. If null, a default name will be used.</param>
            <param name="token">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when transaction or func is null.</exception>
        </member>
        <member name="M:Durable.TransactionScopeExtensions.ExecuteWithSavepointAsync``1(Durable.ITransaction,System.Func{System.Threading.Tasks.Task{``0}},System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a task function within a savepoint scope for the specified transaction and returns the result.
            </summary>
            <typeparam name="TResult">The type of the result returned by the function.</typeparam>
            <param name="transaction">The transaction to create a savepoint for.</param>
            <param name="func">The task function to execute within the savepoint scope.</param>
            <param name="savepointName">Optional name for the savepoint. If null, a default name will be used.</param>
            <param name="token">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation containing the result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when transaction or func is null.</exception>
        </member>
        <member name="T:Durable.TryResolveConflictResult`1">
            <summary>
            Represents the result of attempting to resolve a conflict for an entity of type T.
            </summary>
            <typeparam name="T">The type of entity being resolved.</typeparam>
        </member>
        <member name="P:Durable.TryResolveConflictResult`1.Success">
            <summary>
            Gets or sets a value indicating whether the conflict resolution was successful.
            </summary>
        </member>
        <member name="P:Durable.TryResolveConflictResult`1.ResolvedEntity">
            <summary>
            Gets or sets the resolved entity if the conflict resolution was successful.
            </summary>
        </member>
        <member name="T:Durable.VersionColumnAttribute">
            <summary>
            Attribute to mark a property as a version column for concurrency control
            </summary>
        </member>
        <member name="P:Durable.VersionColumnAttribute.Type">
            <summary>
            Gets the type of version column
            </summary>
        </member>
        <member name="M:Durable.VersionColumnAttribute.#ctor(Durable.VersionColumnType)">
            <summary>
            Initializes a new instance of the VersionColumnAttribute class
            </summary>
            <param name="type">The type of version column</param>
        </member>
        <member name="T:Durable.VersionColumnInfo">
            <summary>
            Contains information about a version column property
            </summary>
        </member>
        <member name="P:Durable.VersionColumnInfo.ColumnName">
            <summary>
            Gets or sets the database column name
            </summary>
        </member>
        <member name="P:Durable.VersionColumnInfo.Property">
            <summary>
            Gets or sets the property information
            </summary>
        </member>
        <member name="P:Durable.VersionColumnInfo.Type">
            <summary>
            Gets or sets the version column type
            </summary>
        </member>
        <member name="P:Durable.VersionColumnInfo.PropertyType">
            <summary>
            Gets or sets the property type
            </summary>
        </member>
        <member name="M:Durable.VersionColumnInfo.GetValue(System.Object)">
            <summary>
            Gets the version value from the specified entity
            </summary>
            <param name="entity">The entity to get the version from</param>
            <returns>The version value</returns>
        </member>
        <member name="M:Durable.VersionColumnInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the version value on the specified entity
            </summary>
            <param name="entity">The entity to set the version on</param>
            <param name="value">The version value to set</param>
        </member>
        <member name="M:Durable.VersionColumnInfo.IncrementVersion(System.Object)">
            <summary>
            Increments the version value based on the version column type
            </summary>
            <param name="currentVersion">The current version value</param>
            <returns>The incremented version value</returns>
        </member>
        <member name="M:Durable.VersionColumnInfo.GetDefaultVersion">
            <summary>
            Gets the default version value based on the version column type
            </summary>
            <returns>The default version value</returns>
        </member>
        <member name="M:Durable.VersionColumnInfo.FormatVersionForSql(System.Object)">
            <summary>
            Formats the version value for SQL queries
            </summary>
            <param name="version">The version value to format</param>
            <returns>The SQL-formatted version string</returns>
        </member>
        <member name="T:Durable.VersionColumnType">
            <summary>
            Specifies the type of version column for concurrency control
            </summary>
        </member>
        <member name="F:Durable.VersionColumnType.RowVersion">
            <summary>
            Binary row version (typically used with SQL Server ROWVERSION)
            </summary>
        </member>
        <member name="F:Durable.VersionColumnType.Timestamp">
            <summary>
            Timestamp-based versioning using DateTime
            </summary>
        </member>
        <member name="F:Durable.VersionColumnType.Integer">
            <summary>
            Integer-based versioning (incremental counter)
            </summary>
        </member>
        <member name="F:Durable.VersionColumnType.Guid">
            <summary>
            GUID-based versioning using unique identifiers
            </summary>
        </member>
        <member name="T:Durable.WhenClause">
            <summary>
            Represents a WHEN clause in a CASE expression, containing a condition and result.
            </summary>
        </member>
        <member name="P:Durable.WhenClause.Condition">
            <summary>
            Gets or sets the condition to evaluate.
            </summary>
        </member>
        <member name="P:Durable.WhenClause.Result">
            <summary>
            Gets or sets the result to return when the condition is true.
            </summary>
        </member>
        <member name="M:Durable.WhenClause.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Durable.WhenClause"/> class.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="result">The result to return when the condition is true.</param>
        </member>
        <member name="T:Durable.WindowFrame">
            <summary>
            Represents a window frame for window functions, defining the frame type and bounds.
            </summary>
        </member>
        <member name="P:Durable.WindowFrame.Type">
            <summary>
            Gets or sets the type of window frame (ROWS or RANGE).
            </summary>
        </member>
        <member name="P:Durable.WindowFrame.StartBound">
            <summary>
            Gets or sets the starting bound of the window frame.
            </summary>
        </member>
        <member name="P:Durable.WindowFrame.EndBound">
            <summary>
            Gets or sets the ending bound of the window frame.
            </summary>
        </member>
        <member name="T:Durable.WindowFrameBound">
            <summary>
            Represents a boundary of a window frame, specifying the bound type and optional offset.
            </summary>
        </member>
        <member name="P:Durable.WindowFrameBound.Type">
            <summary>
            Gets or sets the type of window frame boundary.
            </summary>
        </member>
        <member name="P:Durable.WindowFrameBound.Offset">
            <summary>
            Gets or sets the optional offset value for PRECEDING or FOLLOWING bounds.
            </summary>
        </member>
        <member name="T:Durable.WindowFrameBoundType">
            <summary>
            Defines the types of window frame boundaries for window functions.
            </summary>
        </member>
        <member name="F:Durable.WindowFrameBoundType.UnboundedPreceding">
            <summary>
            Unbounded preceding - includes all rows from the beginning of the partition.
            </summary>
        </member>
        <member name="F:Durable.WindowFrameBoundType.UnboundedFollowing">
            <summary>
            Unbounded following - includes all rows to the end of the partition.
            </summary>
        </member>
        <member name="F:Durable.WindowFrameBoundType.CurrentRow">
            <summary>
            Current row - includes only the current row.
            </summary>
        </member>
        <member name="F:Durable.WindowFrameBoundType.Preceding">
            <summary>
            Preceding - includes a specified number of rows before the current row.
            </summary>
        </member>
        <member name="F:Durable.WindowFrameBoundType.Following">
            <summary>
            Following - includes a specified number of rows after the current row.
            </summary>
        </member>
        <member name="T:Durable.WindowFrameType">
            <summary>
            Specifies the type of window frame for SQL window functions
            </summary>
        </member>
        <member name="F:Durable.WindowFrameType.Rows">
            <summary>
            Frame is defined by physical rows
            </summary>
        </member>
        <member name="F:Durable.WindowFrameType.Range">
            <summary>
            Frame is defined by logical range of values
            </summary>
        </member>
        <member name="F:Durable.WindowFrameType.Groups">
            <summary>
            Frame is defined by groups of equal values
            </summary>
        </member>
        <member name="T:Durable.WindowFunction">
            <summary>
            Represents a SQL window function with its configuration and parameters
            </summary>
        </member>
        <member name="P:Durable.WindowFunction.FunctionName">
            <summary>
            Gets or sets the name of the window function (e.g., ROW_NUMBER, RANK, SUM)
            </summary>
        </member>
        <member name="P:Durable.WindowFunction.Column">
            <summary>
            Gets or sets the column name the function operates on
            </summary>
        </member>
        <member name="P:Durable.WindowFunction.Alias">
            <summary>
            Gets or sets the alias for the window function result
            </summary>
        </member>
        <member name="P:Durable.WindowFunction.PartitionByColumns">
            <summary>
            Gets or sets the list of columns to partition the data by
            </summary>
        </member>
        <member name="P:Durable.WindowFunction.OrderByColumns">
            <summary>
            Gets or sets the list of order by clauses for the window function
            </summary>
        </member>
        <member name="P:Durable.WindowFunction.Frame">
            <summary>
            Gets or sets the window frame specification
            </summary>
        </member>
        <member name="P:Durable.WindowFunction.Parameters">
            <summary>
            Gets or sets additional parameters for the window function
            </summary>
        </member>
        <member name="M:Durable.WindowFunction.#ctor">
            <summary>
            Initializes a new instance of the WindowFunction class
            </summary>
        </member>
        <member name="T:Durable.WindowOrderByClause">
            <summary>
            Represents an ORDER BY clause for a window function
            </summary>
        </member>
        <member name="P:Durable.WindowOrderByClause.Column">
            <summary>
            Gets or sets the column name to order by
            </summary>
        </member>
        <member name="P:Durable.WindowOrderByClause.Ascending">
            <summary>
            Gets or sets a value indicating whether the ordering is ascending (true) or descending (false)
            </summary>
        </member>
    </members>
</doc>
